
Week12Spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008270  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf8  08008bf8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c00  08008c00  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c04  08008c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000088  08008c8c  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08008c8c  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116de  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002405  00000000  00000000  00031792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00033b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00034b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017dc8  00000000  00000000  00035a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111fd  00000000  00000000  0004d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b609  00000000  00000000  0005ea55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa05e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b2c  00000000  00000000  000fa0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083f8 	.word	0x080083f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080083f8 	.word	0x080083f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_frsub>:
 8000c2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	e002      	b.n	8000c38 <__addsf3>
 8000c32:	bf00      	nop

08000c34 <__aeabi_fsub>:
 8000c34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c38 <__addsf3>:
 8000c38:	0042      	lsls	r2, r0, #1
 8000c3a:	bf1f      	itttt	ne
 8000c3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c40:	ea92 0f03 	teqne	r2, r3
 8000c44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4c:	d06a      	beq.n	8000d24 <__addsf3+0xec>
 8000c4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c56:	bfc1      	itttt	gt
 8000c58:	18d2      	addgt	r2, r2, r3
 8000c5a:	4041      	eorgt	r1, r0
 8000c5c:	4048      	eorgt	r0, r1
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	bfb8      	it	lt
 8000c62:	425b      	neglt	r3, r3
 8000c64:	2b19      	cmp	r3, #25
 8000c66:	bf88      	it	hi
 8000c68:	4770      	bxhi	lr
 8000c6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4240      	negne	r0, r0
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c86:	bf18      	it	ne
 8000c88:	4249      	negne	r1, r1
 8000c8a:	ea92 0f03 	teq	r2, r3
 8000c8e:	d03f      	beq.n	8000d10 <__addsf3+0xd8>
 8000c90:	f1a2 0201 	sub.w	r2, r2, #1
 8000c94:	fa41 fc03 	asr.w	ip, r1, r3
 8000c98:	eb10 000c 	adds.w	r0, r0, ip
 8000c9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ca0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__addsf3+0x78>
 8000caa:	4249      	negs	r1, r1
 8000cac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb4:	d313      	bcc.n	8000cde <__addsf3+0xa6>
 8000cb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cba:	d306      	bcc.n	8000cca <__addsf3+0x92>
 8000cbc:	0840      	lsrs	r0, r0, #1
 8000cbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc2:	f102 0201 	add.w	r2, r2, #1
 8000cc6:	2afe      	cmp	r2, #254	; 0xfe
 8000cc8:	d251      	bcs.n	8000d6e <__addsf3+0x136>
 8000cca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd2:	bf08      	it	eq
 8000cd4:	f020 0001 	biceq.w	r0, r0, #1
 8000cd8:	ea40 0003 	orr.w	r0, r0, r3
 8000cdc:	4770      	bx	lr
 8000cde:	0049      	lsls	r1, r1, #1
 8000ce0:	eb40 0000 	adc.w	r0, r0, r0
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	bf28      	it	cs
 8000ce8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cec:	d2ed      	bcs.n	8000cca <__addsf3+0x92>
 8000cee:	fab0 fc80 	clz	ip, r0
 8000cf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cfe:	bfaa      	itet	ge
 8000d00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d04:	4252      	neglt	r2, r2
 8000d06:	4318      	orrge	r0, r3
 8000d08:	bfbc      	itt	lt
 8000d0a:	40d0      	lsrlt	r0, r2
 8000d0c:	4318      	orrlt	r0, r3
 8000d0e:	4770      	bx	lr
 8000d10:	f092 0f00 	teq	r2, #0
 8000d14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d18:	bf06      	itte	eq
 8000d1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d1e:	3201      	addeq	r2, #1
 8000d20:	3b01      	subne	r3, #1
 8000d22:	e7b5      	b.n	8000c90 <__addsf3+0x58>
 8000d24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d2c:	bf18      	it	ne
 8000d2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d32:	d021      	beq.n	8000d78 <__addsf3+0x140>
 8000d34:	ea92 0f03 	teq	r2, r3
 8000d38:	d004      	beq.n	8000d44 <__addsf3+0x10c>
 8000d3a:	f092 0f00 	teq	r2, #0
 8000d3e:	bf08      	it	eq
 8000d40:	4608      	moveq	r0, r1
 8000d42:	4770      	bx	lr
 8000d44:	ea90 0f01 	teq	r0, r1
 8000d48:	bf1c      	itt	ne
 8000d4a:	2000      	movne	r0, #0
 8000d4c:	4770      	bxne	lr
 8000d4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d52:	d104      	bne.n	8000d5e <__addsf3+0x126>
 8000d54:	0040      	lsls	r0, r0, #1
 8000d56:	bf28      	it	cs
 8000d58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	4770      	bx	lr
 8000d5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d62:	bf3c      	itt	cc
 8000d64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d68:	4770      	bxcc	lr
 8000d6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d76:	4770      	bx	lr
 8000d78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d7c:	bf16      	itet	ne
 8000d7e:	4608      	movne	r0, r1
 8000d80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d84:	4601      	movne	r1, r0
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	bf06      	itte	eq
 8000d8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d8e:	ea90 0f01 	teqeq	r0, r1
 8000d92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_ui2f>:
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e004      	b.n	8000da8 <__aeabi_i2f+0x8>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_i2f>:
 8000da0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da4:	bf48      	it	mi
 8000da6:	4240      	negmi	r0, r0
 8000da8:	ea5f 0c00 	movs.w	ip, r0
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db4:	4601      	mov	r1, r0
 8000db6:	f04f 0000 	mov.w	r0, #0
 8000dba:	e01c      	b.n	8000df6 <__aeabi_l2f+0x2a>

08000dbc <__aeabi_ul2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e00a      	b.n	8000de0 <__aeabi_l2f+0x14>
 8000dca:	bf00      	nop

08000dcc <__aeabi_l2f>:
 8000dcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd0:	bf08      	it	eq
 8000dd2:	4770      	bxeq	lr
 8000dd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dd8:	d502      	bpl.n	8000de0 <__aeabi_l2f+0x14>
 8000dda:	4240      	negs	r0, r0
 8000ddc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de0:	ea5f 0c01 	movs.w	ip, r1
 8000de4:	bf02      	ittt	eq
 8000de6:	4684      	moveq	ip, r0
 8000de8:	4601      	moveq	r1, r0
 8000dea:	2000      	moveq	r0, #0
 8000dec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000df0:	bf08      	it	eq
 8000df2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000df6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dfa:	fabc f28c 	clz	r2, ip
 8000dfe:	3a08      	subs	r2, #8
 8000e00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e04:	db10      	blt.n	8000e28 <__aeabi_l2f+0x5c>
 8000e06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e10:	f1c2 0220 	rsb	r2, r2, #32
 8000e14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	eb43 0002 	adc.w	r0, r3, r2
 8000e20:	bf08      	it	eq
 8000e22:	f020 0001 	biceq.w	r0, r0, #1
 8000e26:	4770      	bx	lr
 8000e28:	f102 0220 	add.w	r2, r2, #32
 8000e2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e30:	f1c2 0220 	rsb	r2, r2, #32
 8000e34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e38:	fa21 f202 	lsr.w	r2, r1, r2
 8000e3c:	eb43 0002 	adc.w	r0, r3, r2
 8000e40:	bf08      	it	eq
 8000e42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_uldivmod>:
 8000e48:	b953      	cbnz	r3, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4a:	b94a      	cbnz	r2, 8000e60 <__aeabi_uldivmod+0x18>
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	bf08      	it	eq
 8000e50:	2800      	cmpeq	r0, #0
 8000e52:	bf1c      	itt	ne
 8000e54:	f04f 31ff 	movne.w	r1, #4294967295
 8000e58:	f04f 30ff 	movne.w	r0, #4294967295
 8000e5c:	f000 b96e 	b.w	800113c <__aeabi_idiv0>
 8000e60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e68:	f000 f806 	bl	8000e78 <__udivmoddi4>
 8000e6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e74:	b004      	add	sp, #16
 8000e76:	4770      	bx	lr

08000e78 <__udivmoddi4>:
 8000e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e7c:	9d08      	ldr	r5, [sp, #32]
 8000e7e:	4604      	mov	r4, r0
 8000e80:	468c      	mov	ip, r1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f040 8083 	bne.w	8000f8e <__udivmoddi4+0x116>
 8000e88:	428a      	cmp	r2, r1
 8000e8a:	4617      	mov	r7, r2
 8000e8c:	d947      	bls.n	8000f1e <__udivmoddi4+0xa6>
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	b142      	cbz	r2, 8000ea6 <__udivmoddi4+0x2e>
 8000e94:	f1c2 0020 	rsb	r0, r2, #32
 8000e98:	fa24 f000 	lsr.w	r0, r4, r0
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	4097      	lsls	r7, r2
 8000ea0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ea4:	4094      	lsls	r4, r2
 8000ea6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eaa:	0c23      	lsrs	r3, r4, #16
 8000eac:	fbbc f6f8 	udiv	r6, ip, r8
 8000eb0:	fa1f fe87 	uxth.w	lr, r7
 8000eb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000eb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	d909      	bls.n	8000ed8 <__udivmoddi4+0x60>
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000eca:	f080 8119 	bcs.w	8001100 <__udivmoddi4+0x288>
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	f240 8116 	bls.w	8001100 <__udivmoddi4+0x288>
 8000ed4:	3e02      	subs	r6, #2
 8000ed6:	443b      	add	r3, r7
 8000ed8:	1a5b      	subs	r3, r3, r1
 8000eda:	b2a4      	uxth	r4, r4
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ee4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x8c>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ef6:	f080 8105 	bcs.w	8001104 <__udivmoddi4+0x28c>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8102 	bls.w	8001104 <__udivmoddi4+0x28c>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f08:	eba4 040e 	sub.w	r4, r4, lr
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	b11d      	cbz	r5, 8000f18 <__udivmoddi4+0xa0>
 8000f10:	40d4      	lsrs	r4, r2
 8000f12:	2300      	movs	r3, #0
 8000f14:	e9c5 4300 	strd	r4, r3, [r5]
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	b902      	cbnz	r2, 8000f22 <__udivmoddi4+0xaa>
 8000f20:	deff      	udf	#255	; 0xff
 8000f22:	fab2 f282 	clz	r2, r2
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	d150      	bne.n	8000fcc <__udivmoddi4+0x154>
 8000f2a:	1bcb      	subs	r3, r1, r7
 8000f2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f30:	fa1f f887 	uxth.w	r8, r7
 8000f34:	2601      	movs	r6, #1
 8000f36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000f3a:	0c21      	lsrs	r1, r4, #16
 8000f3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb08 f30c 	mul.w	r3, r8, ip
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d907      	bls.n	8000f5c <__udivmoddi4+0xe4>
 8000f4c:	1879      	adds	r1, r7, r1
 8000f4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f52:	d202      	bcs.n	8000f5a <__udivmoddi4+0xe2>
 8000f54:	428b      	cmp	r3, r1
 8000f56:	f200 80e9 	bhi.w	800112c <__udivmoddi4+0x2b4>
 8000f5a:	4684      	mov	ip, r0
 8000f5c:	1ac9      	subs	r1, r1, r3
 8000f5e:	b2a3      	uxth	r3, r4
 8000f60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f6c:	fb08 f800 	mul.w	r8, r8, r0
 8000f70:	45a0      	cmp	r8, r4
 8000f72:	d907      	bls.n	8000f84 <__udivmoddi4+0x10c>
 8000f74:	193c      	adds	r4, r7, r4
 8000f76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x10a>
 8000f7c:	45a0      	cmp	r8, r4
 8000f7e:	f200 80d9 	bhi.w	8001134 <__udivmoddi4+0x2bc>
 8000f82:	4618      	mov	r0, r3
 8000f84:	eba4 0408 	sub.w	r4, r4, r8
 8000f88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f8c:	e7bf      	b.n	8000f0e <__udivmoddi4+0x96>
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d909      	bls.n	8000fa6 <__udivmoddi4+0x12e>
 8000f92:	2d00      	cmp	r5, #0
 8000f94:	f000 80b1 	beq.w	80010fa <__udivmoddi4+0x282>
 8000f98:	2600      	movs	r6, #0
 8000f9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	fab3 f683 	clz	r6, r3
 8000faa:	2e00      	cmp	r6, #0
 8000fac:	d14a      	bne.n	8001044 <__udivmoddi4+0x1cc>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	d302      	bcc.n	8000fb8 <__udivmoddi4+0x140>
 8000fb2:	4282      	cmp	r2, r0
 8000fb4:	f200 80b8 	bhi.w	8001128 <__udivmoddi4+0x2b0>
 8000fb8:	1a84      	subs	r4, r0, r2
 8000fba:	eb61 0103 	sbc.w	r1, r1, r3
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	468c      	mov	ip, r1
 8000fc2:	2d00      	cmp	r5, #0
 8000fc4:	d0a8      	beq.n	8000f18 <__udivmoddi4+0xa0>
 8000fc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000fca:	e7a5      	b.n	8000f18 <__udivmoddi4+0xa0>
 8000fcc:	f1c2 0320 	rsb	r3, r2, #32
 8000fd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000fd4:	4097      	lsls	r7, r2
 8000fd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000fda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fde:	40d9      	lsrs	r1, r3
 8000fe0:	4330      	orrs	r0, r6
 8000fe2:	0c03      	lsrs	r3, r0, #16
 8000fe4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000fe8:	fa1f f887 	uxth.w	r8, r7
 8000fec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ff0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ff4:	fb06 f108 	mul.w	r1, r6, r8
 8000ff8:	4299      	cmp	r1, r3
 8000ffa:	fa04 f402 	lsl.w	r4, r4, r2
 8000ffe:	d909      	bls.n	8001014 <__udivmoddi4+0x19c>
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	f106 3cff 	add.w	ip, r6, #4294967295
 8001006:	f080 808d 	bcs.w	8001124 <__udivmoddi4+0x2ac>
 800100a:	4299      	cmp	r1, r3
 800100c:	f240 808a 	bls.w	8001124 <__udivmoddi4+0x2ac>
 8001010:	3e02      	subs	r6, #2
 8001012:	443b      	add	r3, r7
 8001014:	1a5b      	subs	r3, r3, r1
 8001016:	b281      	uxth	r1, r0
 8001018:	fbb3 f0fe 	udiv	r0, r3, lr
 800101c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001020:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001024:	fb00 f308 	mul.w	r3, r0, r8
 8001028:	428b      	cmp	r3, r1
 800102a:	d907      	bls.n	800103c <__udivmoddi4+0x1c4>
 800102c:	1879      	adds	r1, r7, r1
 800102e:	f100 3cff 	add.w	ip, r0, #4294967295
 8001032:	d273      	bcs.n	800111c <__udivmoddi4+0x2a4>
 8001034:	428b      	cmp	r3, r1
 8001036:	d971      	bls.n	800111c <__udivmoddi4+0x2a4>
 8001038:	3802      	subs	r0, #2
 800103a:	4439      	add	r1, r7
 800103c:	1acb      	subs	r3, r1, r3
 800103e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001042:	e778      	b.n	8000f36 <__udivmoddi4+0xbe>
 8001044:	f1c6 0c20 	rsb	ip, r6, #32
 8001048:	fa03 f406 	lsl.w	r4, r3, r6
 800104c:	fa22 f30c 	lsr.w	r3, r2, ip
 8001050:	431c      	orrs	r4, r3
 8001052:	fa20 f70c 	lsr.w	r7, r0, ip
 8001056:	fa01 f306 	lsl.w	r3, r1, r6
 800105a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800105e:	fa21 f10c 	lsr.w	r1, r1, ip
 8001062:	431f      	orrs	r7, r3
 8001064:	0c3b      	lsrs	r3, r7, #16
 8001066:	fbb1 f9fe 	udiv	r9, r1, lr
 800106a:	fa1f f884 	uxth.w	r8, r4
 800106e:	fb0e 1119 	mls	r1, lr, r9, r1
 8001072:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001076:	fb09 fa08 	mul.w	sl, r9, r8
 800107a:	458a      	cmp	sl, r1
 800107c:	fa02 f206 	lsl.w	r2, r2, r6
 8001080:	fa00 f306 	lsl.w	r3, r0, r6
 8001084:	d908      	bls.n	8001098 <__udivmoddi4+0x220>
 8001086:	1861      	adds	r1, r4, r1
 8001088:	f109 30ff 	add.w	r0, r9, #4294967295
 800108c:	d248      	bcs.n	8001120 <__udivmoddi4+0x2a8>
 800108e:	458a      	cmp	sl, r1
 8001090:	d946      	bls.n	8001120 <__udivmoddi4+0x2a8>
 8001092:	f1a9 0902 	sub.w	r9, r9, #2
 8001096:	4421      	add	r1, r4
 8001098:	eba1 010a 	sub.w	r1, r1, sl
 800109c:	b2bf      	uxth	r7, r7
 800109e:	fbb1 f0fe 	udiv	r0, r1, lr
 80010a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80010a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80010aa:	fb00 f808 	mul.w	r8, r0, r8
 80010ae:	45b8      	cmp	r8, r7
 80010b0:	d907      	bls.n	80010c2 <__udivmoddi4+0x24a>
 80010b2:	19e7      	adds	r7, r4, r7
 80010b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80010b8:	d22e      	bcs.n	8001118 <__udivmoddi4+0x2a0>
 80010ba:	45b8      	cmp	r8, r7
 80010bc:	d92c      	bls.n	8001118 <__udivmoddi4+0x2a0>
 80010be:	3802      	subs	r0, #2
 80010c0:	4427      	add	r7, r4
 80010c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80010c6:	eba7 0708 	sub.w	r7, r7, r8
 80010ca:	fba0 8902 	umull	r8, r9, r0, r2
 80010ce:	454f      	cmp	r7, r9
 80010d0:	46c6      	mov	lr, r8
 80010d2:	4649      	mov	r1, r9
 80010d4:	d31a      	bcc.n	800110c <__udivmoddi4+0x294>
 80010d6:	d017      	beq.n	8001108 <__udivmoddi4+0x290>
 80010d8:	b15d      	cbz	r5, 80010f2 <__udivmoddi4+0x27a>
 80010da:	ebb3 020e 	subs.w	r2, r3, lr
 80010de:	eb67 0701 	sbc.w	r7, r7, r1
 80010e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80010e6:	40f2      	lsrs	r2, r6
 80010e8:	ea4c 0202 	orr.w	r2, ip, r2
 80010ec:	40f7      	lsrs	r7, r6
 80010ee:	e9c5 2700 	strd	r2, r7, [r5]
 80010f2:	2600      	movs	r6, #0
 80010f4:	4631      	mov	r1, r6
 80010f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010fa:	462e      	mov	r6, r5
 80010fc:	4628      	mov	r0, r5
 80010fe:	e70b      	b.n	8000f18 <__udivmoddi4+0xa0>
 8001100:	4606      	mov	r6, r0
 8001102:	e6e9      	b.n	8000ed8 <__udivmoddi4+0x60>
 8001104:	4618      	mov	r0, r3
 8001106:	e6fd      	b.n	8000f04 <__udivmoddi4+0x8c>
 8001108:	4543      	cmp	r3, r8
 800110a:	d2e5      	bcs.n	80010d8 <__udivmoddi4+0x260>
 800110c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001110:	eb69 0104 	sbc.w	r1, r9, r4
 8001114:	3801      	subs	r0, #1
 8001116:	e7df      	b.n	80010d8 <__udivmoddi4+0x260>
 8001118:	4608      	mov	r0, r1
 800111a:	e7d2      	b.n	80010c2 <__udivmoddi4+0x24a>
 800111c:	4660      	mov	r0, ip
 800111e:	e78d      	b.n	800103c <__udivmoddi4+0x1c4>
 8001120:	4681      	mov	r9, r0
 8001122:	e7b9      	b.n	8001098 <__udivmoddi4+0x220>
 8001124:	4666      	mov	r6, ip
 8001126:	e775      	b.n	8001014 <__udivmoddi4+0x19c>
 8001128:	4630      	mov	r0, r6
 800112a:	e74a      	b.n	8000fc2 <__udivmoddi4+0x14a>
 800112c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001130:	4439      	add	r1, r7
 8001132:	e713      	b.n	8000f5c <__udivmoddi4+0xe4>
 8001134:	3802      	subs	r0, #2
 8001136:	443c      	add	r4, r7
 8001138:	e724      	b.n	8000f84 <__udivmoddi4+0x10c>
 800113a:	bf00      	nop

0800113c <__aeabi_idiv0>:
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001144:	b0d8      	sub	sp, #352	; 0x160
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f001 ffdc 	bl	8003104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f001 fa70 	bl	8002630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f001 fc1a 	bl	8002988 <MX_GPIO_Init>
  MX_DMA_Init();
 8001154:	f001 fbf8 	bl	8002948 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001158:	f001 fbcc 	bl	80028f4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800115c:	f001 fb22 	bl	80027a4 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001160:	f001 face 	bl	8002700 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001164:	f001 fb56 	bl	8002814 <MX_TIM3_Init>
  MX_TIM11_Init();
 8001168:	f001 fba0 	bl	80028ac <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 800116c:	48c8      	ldr	r0, [pc, #800]	; (8001490 <main+0x350>)
 800116e:	f004 fcc3 	bl	8005af8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8001172:	48c8      	ldr	r0, [pc, #800]	; (8001494 <main+0x354>)
 8001174:	f004 fd1a 	bl	8005bac <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8001178:	2201      	movs	r2, #1
 800117a:	49c7      	ldr	r1, [pc, #796]	; (8001498 <main+0x358>)
 800117c:	48c7      	ldr	r0, [pc, #796]	; (800149c <main+0x35c>)
 800117e:	f002 f9b7 	bl	80034f0 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001188:	48c5      	ldr	r0, [pc, #788]	; (80014a0 <main+0x360>)
 800118a:	f003 fc33 	bl	80049f4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 800118e:	2220      	movs	r2, #32
 8001190:	49c4      	ldr	r1, [pc, #784]	; (80014a4 <main+0x364>)
 8001192:	48c5      	ldr	r0, [pc, #788]	; (80014a8 <main+0x368>)
 8001194:	f005 f9db 	bl	800654e <HAL_UART_Receive_IT>
		int16_t inputchar = UARTRecieveIT();
 8001198:	f001 fcd2 	bl	8002b40 <UARTRecieveIT>
 800119c:	4603      	mov	r3, r0
 800119e:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
		static uint64_t timestamp = 0;
		if(wave ==1)
 80011a2:	4bc2      	ldr	r3, [pc, #776]	; (80014ac <main+0x36c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	f040 8198 	bne.w	80014dc <main+0x39c>
		{
			if (micros() - timestamp > 1000)
 80011ac:	f001 fd36 	bl	8002c1c <micros>
 80011b0:	4bbf      	ldr	r3, [pc, #764]	; (80014b0 <main+0x370>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	ebb0 0a02 	subs.w	sl, r0, r2
 80011ba:	eb61 0b03 	sbc.w	fp, r1, r3
 80011be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	455b      	cmp	r3, fp
 80011c8:	bf08      	it	eq
 80011ca:	4552      	cmpeq	r2, sl
 80011cc:	f080 836f 	bcs.w	80018ae <main+0x76e>
			{
				timestamp = micros();
 80011d0:	f001 fd24 	bl	8002c1c <micros>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	49b5      	ldr	r1, [pc, #724]	; (80014b0 <main+0x370>)
 80011da:	e9c1 2300 	strd	r2, r3, [r1]
				if(slove==1){
 80011de:	4bb5      	ldr	r3, [pc, #724]	; (80014b4 <main+0x374>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	f040 8093 	bne.w	800130e <main+0x1ce>
					dada = (vh-vl)*((4096*timestamp*f)/(3.3*1000000));
 80011e8:	4bb3      	ldr	r3, [pc, #716]	; (80014b8 <main+0x378>)
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	4bb3      	ldr	r3, [pc, #716]	; (80014bc <main+0x37c>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	ee17 0a90 	vmov	r0, s15
 80011fc:	f7ff f9ac 	bl	8000558 <__aeabi_f2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4baa      	ldr	r3, [pc, #680]	; (80014b0 <main+0x370>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	f04f 0100 	mov.w	r1, #0
 8001212:	0319      	lsls	r1, r3, #12
 8001214:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8001218:	0310      	lsls	r0, r2, #12
 800121a:	f7ff fdcf 	bl	8000dbc <__aeabi_ul2f>
 800121e:	ee07 0a10 	vmov	s14, r0
 8001222:	4ba7      	ldr	r3, [pc, #668]	; (80014c0 <main+0x380>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122c:	ee17 0a90 	vmov	r0, s15
 8001230:	f7ff f992 	bl	8000558 <__aeabi_f2d>
 8001234:	a390      	add	r3, pc, #576	; (adr r3, 8001478 <main+0x338>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff fb0f 	bl	800085c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4620      	mov	r0, r4
 8001244:	4629      	mov	r1, r5
 8001246:	f7ff f9df 	bl	8000608 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc9b 	bl	8000b8c <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a9a      	ldr	r2, [pc, #616]	; (80014c4 <main+0x384>)
 800125a:	6013      	str	r3, [r2, #0]
//					+(vl*4096/3.3)
					dataOut = dada;
 800125c:	4b99      	ldr	r3, [pc, #612]	; (80014c4 <main+0x384>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001266:	ee17 2a90 	vmov	r2, s15
 800126a:	4b97      	ldr	r3, [pc, #604]	; (80014c8 <main+0x388>)
 800126c:	601a      	str	r2, [r3, #0]
					int mod = ((vh - vl) * (4096.0 / 3.3));//A*f*t%A
 800126e:	4b92      	ldr	r3, [pc, #584]	; (80014b8 <main+0x378>)
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	4b91      	ldr	r3, [pc, #580]	; (80014bc <main+0x37c>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	ee17 0a90 	vmov	r0, s15
 8001282:	f7ff f969 	bl	8000558 <__aeabi_f2d>
 8001286:	a37e      	add	r3, pc, #504	; (adr r3, 8001480 <main+0x340>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff f9bc 	bl	8000608 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fc50 	bl	8000b3c <__aeabi_d2iz>
 800129c:	4603      	mov	r3, r0
 800129e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
					dataOut %= mod;
 80012a2:	4b89      	ldr	r3, [pc, #548]	; (80014c8 <main+0x388>)
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012aa:	fb91 f2f3 	sdiv	r2, r1, r3
 80012ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80012b2:	fb03 f302 	mul.w	r3, r3, r2
 80012b6:	1acb      	subs	r3, r1, r3
 80012b8:	4a83      	ldr	r2, [pc, #524]	; (80014c8 <main+0x388>)
 80012ba:	6013      	str	r3, [r2, #0]
					dataOut += (vl * 4096.0 / 3.3);
 80012bc:	4b82      	ldr	r3, [pc, #520]	; (80014c8 <main+0x388>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f937 	bl	8000534 <__aeabi_i2d>
 80012c6:	4604      	mov	r4, r0
 80012c8:	460d      	mov	r5, r1
 80012ca:	4b7c      	ldr	r3, [pc, #496]	; (80014bc <main+0x37c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f942 	bl	8000558 <__aeabi_f2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b7c      	ldr	r3, [pc, #496]	; (80014cc <main+0x38c>)
 80012da:	f7ff f995 	bl	8000608 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	a368      	add	r3, pc, #416	; (adr r3, 8001488 <main+0x348>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fab6 	bl	800085c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	f7fe ffd0 	bl	800029c <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fc1a 	bl	8000b3c <__aeabi_d2iz>
 8001308:	4603      	mov	r3, r0
 800130a:	4a6f      	ldr	r2, [pc, #444]	; (80014c8 <main+0x388>)
 800130c:	6013      	str	r3, [r2, #0]
				}
				if(slove == 0)
 800130e:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <main+0x374>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f040 8095 	bne.w	8001442 <main+0x302>
				{
					dada = (vh-vl)*((4096*timestamp*f)/(3.3*1000000));
 8001318:	4b67      	ldr	r3, [pc, #412]	; (80014b8 <main+0x378>)
 800131a:	ed93 7a00 	vldr	s14, [r3]
 800131e:	4b67      	ldr	r3, [pc, #412]	; (80014bc <main+0x37c>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001328:	ee17 0a90 	vmov	r0, s15
 800132c:	f7ff f914 	bl	8000558 <__aeabi_f2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <main+0x370>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	0319      	lsls	r1, r3, #12
 8001344:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8001348:	0310      	lsls	r0, r2, #12
 800134a:	f7ff fd37 	bl	8000dbc <__aeabi_ul2f>
 800134e:	ee07 0a10 	vmov	s14, r0
 8001352:	4b5b      	ldr	r3, [pc, #364]	; (80014c0 <main+0x380>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	ee17 0a90 	vmov	r0, s15
 8001360:	f7ff f8fa 	bl	8000558 <__aeabi_f2d>
 8001364:	a344      	add	r3, pc, #272	; (adr r3, 8001478 <main+0x338>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff fa77 	bl	800085c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4620      	mov	r0, r4
 8001374:	4629      	mov	r1, r5
 8001376:	f7ff f947 	bl	8000608 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fc03 	bl	8000b8c <__aeabi_d2f>
 8001386:	4603      	mov	r3, r0
 8001388:	4a4e      	ldr	r2, [pc, #312]	; (80014c4 <main+0x384>)
 800138a:	6013      	str	r3, [r2, #0]
//					+((vl)*4096/3.3)
					dataOut = -dada;
 800138c:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <main+0x384>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	eef1 7a67 	vneg.f32	s15, s15
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	ee17 2a90 	vmov	r2, s15
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <main+0x388>)
 80013a0:	601a      	str	r2, [r3, #0]
					int mod = ((vl - vh) * (4096.0 / 3.3));
 80013a2:	4b46      	ldr	r3, [pc, #280]	; (80014bc <main+0x37c>)
 80013a4:	ed93 7a00 	vldr	s14, [r3]
 80013a8:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <main+0x378>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	ee17 0a90 	vmov	r0, s15
 80013b6:	f7ff f8cf 	bl	8000558 <__aeabi_f2d>
 80013ba:	a331      	add	r3, pc, #196	; (adr r3, 8001480 <main+0x340>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f922 	bl	8000608 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fbb6 	bl	8000b3c <__aeabi_d2iz>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
					dataOut %= mod;
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <main+0x388>)
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013de:	fb91 f2f3 	sdiv	r2, r1, r3
 80013e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013e6:	fb03 f302 	mul.w	r3, r3, r2
 80013ea:	1acb      	subs	r3, r1, r3
 80013ec:	4a36      	ldr	r2, [pc, #216]	; (80014c8 <main+0x388>)
 80013ee:	6013      	str	r3, [r2, #0]
					dataOut += ((vh) * 4096.0 / 3.3);
 80013f0:	4b35      	ldr	r3, [pc, #212]	; (80014c8 <main+0x388>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f89d 	bl	8000534 <__aeabi_i2d>
 80013fa:	4604      	mov	r4, r0
 80013fc:	460d      	mov	r5, r1
 80013fe:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <main+0x378>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8a8 	bl	8000558 <__aeabi_f2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <main+0x38c>)
 800140e:	f7ff f8fb 	bl	8000608 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	a31b      	add	r3, pc, #108	; (adr r3, 8001488 <main+0x348>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff fa1c 	bl	800085c <__aeabi_ddiv>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7fe ff36 	bl	800029c <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fb80 	bl	8000b3c <__aeabi_d2iz>
 800143c:	4603      	mov	r3, r0
 800143e:	4a22      	ldr	r2, [pc, #136]	; (80014c8 <main+0x388>)
 8001440:	6013      	str	r3, [r2, #0]
				}
				if (hspi3.State == HAL_SPI_STATE_READY
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <main+0x390>)
 8001444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	f040 822f 	bne.w	80018ae <main+0x76e>
						&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001450:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001454:	481f      	ldr	r0, [pc, #124]	; (80014d4 <main+0x394>)
 8001456:	f003 fab5 	bl	80049c4 <HAL_GPIO_ReadPin>
 800145a:	4603      	mov	r3, r0
 800145c:	2b01      	cmp	r3, #1
 800145e:	f040 8226 	bne.w	80018ae <main+0x76e>
								== GPIO_PIN_SET)
				{
					MCP4922SetOutput(DACConfig, dataOut);
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <main+0x398>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <main+0x388>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f001 fb2a 	bl	8002ac8 <MCP4922SetOutput>
 8001474:	e21b      	b.n	80018ae <main+0x76e>
 8001476:	bf00      	nop
 8001478:	00000000 	.word	0x00000000
 800147c:	41492d50 	.word	0x41492d50
 8001480:	364d9365 	.word	0x364d9365
 8001484:	409364d9 	.word	0x409364d9
 8001488:	66666666 	.word	0x66666666
 800148c:	400a6666 	.word	0x400a6666
 8001490:	20000120 	.word	0x20000120
 8001494:	20000208 	.word	0x20000208
 8001498:	200000a4 	.word	0x200000a4
 800149c:	200001c0 	.word	0x200001c0
 80014a0:	40020000 	.word	0x40020000
 80014a4:	200000d8 	.word	0x200000d8
 80014a8:	200002b0 	.word	0x200002b0
 80014ac:	200000b4 	.word	0x200000b4
 80014b0:	20000108 	.word	0x20000108
 80014b4:	20000010 	.word	0x20000010
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	200000f8 	.word	0x200000f8
 80014c0:	20000008 	.word	0x20000008
 80014c4:	200000fc 	.word	0x200000fc
 80014c8:	200000b0 	.word	0x200000b0
 80014cc:	40b00000 	.word	0x40b00000
 80014d0:	20000168 	.word	0x20000168
 80014d4:	40020400 	.word	0x40020400
 80014d8:	20000004 	.word	0x20000004
				}
			}
		}
		else if(wave ==2)
 80014dc:	4b7c      	ldr	r3, [pc, #496]	; (80016d0 <main+0x590>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	f040 810d 	bne.w	8001700 <main+0x5c0>
		{
			if (micros() - timestamp > 1000)
 80014e6:	f001 fb99 	bl	8002c1c <micros>
 80014ea:	4b7a      	ldr	r3, [pc, #488]	; (80016d4 <main+0x594>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	1a84      	subs	r4, r0, r2
 80014f2:	623c      	str	r4, [r7, #32]
 80014f4:	eb61 0303 	sbc.w	r3, r1, r3
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
 80014fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001506:	428b      	cmp	r3, r1
 8001508:	bf08      	it	eq
 800150a:	4282      	cmpeq	r2, r0
 800150c:	f080 81cf 	bcs.w	80018ae <main+0x76e>
			{
				timestamp = micros();
 8001510:	f001 fb84 	bl	8002c1c <micros>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	496e      	ldr	r1, [pc, #440]	; (80016d4 <main+0x594>)
 800151a:	e9c1 2300 	strd	r2, r3, [r1]
				dada = (((vh-vl)*2048/3.3)*sinf(2*3.14*f*timestamp/1000000))+(2048+(vl*2048/3.3)-((3.3-vh)*2048/3.3));
 800151e:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <main+0x598>)
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	4b6d      	ldr	r3, [pc, #436]	; (80016dc <main+0x59c>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80016e0 <main+0x5a0>
 8001532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001536:	ee17 0a90 	vmov	r0, s15
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	a35e      	add	r3, pc, #376	; (adr r3, 80016b8 <main+0x578>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f98a 	bl	800085c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4690      	mov	r8, r2
 800154e:	4699      	mov	r9, r3
 8001550:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <main+0x5a4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffff 	bl	8000558 <__aeabi_f2d>
 800155a:	a359      	add	r3, pc, #356	; (adr r3, 80016c0 <main+0x580>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f852 	bl	8000608 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4614      	mov	r4, r2
 800156a:	461d      	mov	r5, r3
 800156c:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <main+0x594>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff f811 	bl	800059c <__aeabi_ul2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7ff f841 	bl	8000608 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	a34e      	add	r3, pc, #312	; (adr r3, 80016c8 <main+0x588>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f962 	bl	800085c <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff faf4 	bl	8000b8c <__aeabi_d2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	ee00 3a10 	vmov	s0, r3
 80015aa:	f006 f9b9 	bl	8007920 <sinf>
 80015ae:	ee10 3a10 	vmov	r3, s0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffd0 	bl	8000558 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4640      	mov	r0, r8
 80015be:	4649      	mov	r1, r9
 80015c0:	f7ff f822 	bl	8000608 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4690      	mov	r8, r2
 80015ca:	4699      	mov	r9, r3
 80015cc:	4b43      	ldr	r3, [pc, #268]	; (80016dc <main+0x59c>)
 80015ce:	edd3 7a00 	vldr	s15, [r3]
 80015d2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80016e0 <main+0x5a0>
 80015d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015da:	ee17 0a90 	vmov	r0, s15
 80015de:	f7fe ffbb 	bl	8000558 <__aeabi_f2d>
 80015e2:	a335      	add	r3, pc, #212	; (adr r3, 80016b8 <main+0x578>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7ff f938 	bl	800085c <__aeabi_ddiv>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <main+0x5a8>)
 80015fa:	f7fe fe4f 	bl	800029c <__adddf3>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4614      	mov	r4, r2
 8001604:	461d      	mov	r5, r3
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <main+0x598>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffa4 	bl	8000558 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	a128      	add	r1, pc, #160	; (adr r1, 80016b8 <main+0x578>)
 8001616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800161a:	f7fe fe3d 	bl	8000298 <__aeabi_dsub>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <main+0x5a8>)
 800162c:	f7fe ffec 	bl	8000608 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	a31f      	add	r3, pc, #124	; (adr r3, 80016b8 <main+0x578>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7ff f90d 	bl	800085c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fe25 	bl	8000298 <__aeabi_dsub>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4640      	mov	r0, r8
 8001654:	4649      	mov	r1, r9
 8001656:	f7fe fe21 	bl	800029c <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fa93 	bl	8000b8c <__aeabi_d2f>
 8001666:	4603      	mov	r3, r0
 8001668:	4a20      	ldr	r2, [pc, #128]	; (80016ec <main+0x5ac>)
 800166a:	6013      	str	r3, [r2, #0]
				dataOut = dada;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <main+0x5ac>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001676:	ee17 2a90 	vmov	r2, s15
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <main+0x5b0>)
 800167c:	601a      	str	r2, [r3, #0]
				if (hspi3.State == HAL_SPI_STATE_READY
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <main+0x5b4>)
 8001680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b01      	cmp	r3, #1
 8001688:	f040 8111 	bne.w	80018ae <main+0x76e>
						&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 800168c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001690:	4819      	ldr	r0, [pc, #100]	; (80016f8 <main+0x5b8>)
 8001692:	f003 f997 	bl	80049c4 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	2b01      	cmp	r3, #1
 800169a:	f040 8108 	bne.w	80018ae <main+0x76e>
								== GPIO_PIN_SET)
				{
					MCP4922SetOutput(DACConfig, dataOut);
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <main+0x5bc>)
 80016a0:	781a      	ldrb	r2, [r3, #0]
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <main+0x5b0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f001 fa0c 	bl	8002ac8 <MCP4922SetOutput>
 80016b0:	e0fd      	b.n	80018ae <main+0x76e>
 80016b2:	bf00      	nop
 80016b4:	f3af 8000 	nop.w
 80016b8:	66666666 	.word	0x66666666
 80016bc:	400a6666 	.word	0x400a6666
 80016c0:	51eb851f 	.word	0x51eb851f
 80016c4:	40191eb8 	.word	0x40191eb8
 80016c8:	00000000 	.word	0x00000000
 80016cc:	412e8480 	.word	0x412e8480
 80016d0:	200000b4 	.word	0x200000b4
 80016d4:	20000108 	.word	0x20000108
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	200000f8 	.word	0x200000f8
 80016e0:	45000000 	.word	0x45000000
 80016e4:	20000008 	.word	0x20000008
 80016e8:	40a00000 	.word	0x40a00000
 80016ec:	200000fc 	.word	0x200000fc
 80016f0:	200000b0 	.word	0x200000b0
 80016f4:	20000168 	.word	0x20000168
 80016f8:	40020400 	.word	0x40020400
 80016fc:	20000004 	.word	0x20000004
				}
			}
		}
		else if(wave==3)
 8001700:	4bbf      	ldr	r3, [pc, #764]	; (8001a00 <main+0x8c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b03      	cmp	r3, #3
 8001706:	f040 80d2 	bne.w	80018ae <main+0x76e>
		{
			if (micros() - timestamp > 1000)
 800170a:	f001 fa87 	bl	8002c1c <micros>
 800170e:	4bbd      	ldr	r3, [pc, #756]	; (8001a04 <main+0x8c4>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	1a84      	subs	r4, r0, r2
 8001716:	61bc      	str	r4, [r7, #24]
 8001718:	eb61 0303 	sbc.w	r3, r1, r3
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800172a:	428b      	cmp	r3, r1
 800172c:	bf08      	it	eq
 800172e:	4282      	cmpeq	r2, r0
 8001730:	f080 80bd 	bcs.w	80018ae <main+0x76e>
			{
				int mytime = 10000*Duty/f;
 8001734:	4bb4      	ldr	r3, [pc, #720]	; (8001a08 <main+0x8c8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f242 7210 	movw	r2, #10000	; 0x2710
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001748:	4bb0      	ldr	r3, [pc, #704]	; (8001a0c <main+0x8cc>)
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001756:	ee17 3a90 	vmov	r3, s15
 800175a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

				if (micros() - timestamp <mytime)
 800175e:	f001 fa5d 	bl	8002c1c <micros>
 8001762:	4ba8      	ldr	r3, [pc, #672]	; (8001a04 <main+0x8c4>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	1a84      	subs	r4, r0, r2
 800176a:	613c      	str	r4, [r7, #16]
 800176c:	eb61 0303 	sbc.w	r3, r1, r3
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001776:	461a      	mov	r2, r3
 8001778:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800177c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001780:	4299      	cmp	r1, r3
 8001782:	bf08      	it	eq
 8001784:	4290      	cmpeq	r0, r2
 8001786:	d221      	bcs.n	80017cc <main+0x68c>
				{
					dada = vh*4095/3.3;
 8001788:	4ba1      	ldr	r3, [pc, #644]	; (8001a10 <main+0x8d0>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001a14 <main+0x8d4>
 8001792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001796:	ee17 0a90 	vmov	r0, s15
 800179a:	f7fe fedd 	bl	8000558 <__aeabi_f2d>
 800179e:	a396      	add	r3, pc, #600	; (adr r3, 80019f8 <main+0x8b8>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7ff f85a 	bl	800085c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f9ec 	bl	8000b8c <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a98      	ldr	r2, [pc, #608]	; (8001a18 <main+0x8d8>)
 80017b8:	6013      	str	r3, [r2, #0]
					dataOut = dada;
 80017ba:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <main+0x8d8>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c4:	ee17 2a90 	vmov	r2, s15
 80017c8:	4b94      	ldr	r3, [pc, #592]	; (8001a1c <main+0x8dc>)
 80017ca:	601a      	str	r2, [r3, #0]
				}
				if (micros() - timestamp >mytime)
 80017cc:	f001 fa26 	bl	8002c1c <micros>
 80017d0:	4b8c      	ldr	r3, [pc, #560]	; (8001a04 <main+0x8c4>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	1a84      	subs	r4, r0, r2
 80017d8:	60bc      	str	r4, [r7, #8]
 80017da:	eb61 0303 	sbc.w	r3, r1, r3
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017e4:	461a      	mov	r2, r3
 80017e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80017ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ee:	428b      	cmp	r3, r1
 80017f0:	bf08      	it	eq
 80017f2:	4282      	cmpeq	r2, r0
 80017f4:	d221      	bcs.n	800183a <main+0x6fa>
				{
					dada = vl*4095/3.3;
 80017f6:	4b8a      	ldr	r3, [pc, #552]	; (8001a20 <main+0x8e0>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001a14 <main+0x8d4>
 8001800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001804:	ee17 0a90 	vmov	r0, s15
 8001808:	f7fe fea6 	bl	8000558 <__aeabi_f2d>
 800180c:	a37a      	add	r3, pc, #488	; (adr r3, 80019f8 <main+0x8b8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7ff f823 	bl	800085c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f9b5 	bl	8000b8c <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	4a7c      	ldr	r2, [pc, #496]	; (8001a18 <main+0x8d8>)
 8001826:	6013      	str	r3, [r2, #0]
					dataOut = dada;
 8001828:	4b7b      	ldr	r3, [pc, #492]	; (8001a18 <main+0x8d8>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001832:	ee17 2a90 	vmov	r2, s15
 8001836:	4b79      	ldr	r3, [pc, #484]	; (8001a1c <main+0x8dc>)
 8001838:	601a      	str	r2, [r3, #0]

				}
				if(micros() - timestamp >=1000000/f)
 800183a:	f001 f9ef 	bl	8002c1c <micros>
 800183e:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <main+0x8c4>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	1a84      	subs	r4, r0, r2
 8001846:	603c      	str	r4, [r7, #0]
 8001848:	eb61 0303 	sbc.w	r3, r1, r3
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001852:	f7ff fab3 	bl	8000dbc <__aeabi_ul2f>
 8001856:	ee06 0a10 	vmov	s12, r0
 800185a:	4b6c      	ldr	r3, [pc, #432]	; (8001a0c <main+0x8cc>)
 800185c:	ed93 7a00 	vldr	s14, [r3]
 8001860:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001a24 <main+0x8e4>
 8001864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001868:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	db06      	blt.n	8001880 <main+0x740>
				{
					timestamp = micros();
 8001872:	f001 f9d3 	bl	8002c1c <micros>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4962      	ldr	r1, [pc, #392]	; (8001a04 <main+0x8c4>)
 800187c:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (hspi3.State == HAL_SPI_STATE_READY
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <main+0x8e8>)
 8001882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d110      	bne.n	80018ae <main+0x76e>
												&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 800188c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001890:	4866      	ldr	r0, [pc, #408]	; (8001a2c <main+0x8ec>)
 8001892:	f003 f897 	bl	80049c4 <HAL_GPIO_ReadPin>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <main+0x76e>
														== GPIO_PIN_SET)
				{
					MCP4922SetOutput(DACConfig, dataOut);
 800189c:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <main+0x8f0>)
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <main+0x8dc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	4619      	mov	r1, r3
 80018a8:	4610      	mov	r0, r2
 80018aa:	f001 f90d 	bl	8002ac8 <MCP4922SetOutput>
				}

			}
		}
        switch(STATE_Display)
 80018ae:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <main+0x8f4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b29      	cmp	r3, #41	; 0x29
 80018b4:	f63f ac6b 	bhi.w	800118e <main+0x4e>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <main+0x780>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	08001969 	.word	0x08001969
 80018c4:	0800118f 	.word	0x0800118f
 80018c8:	0800118f 	.word	0x0800118f
 80018cc:	0800118f 	.word	0x0800118f
 80018d0:	0800118f 	.word	0x0800118f
 80018d4:	0800118f 	.word	0x0800118f
 80018d8:	0800118f 	.word	0x0800118f
 80018dc:	0800118f 	.word	0x0800118f
 80018e0:	0800118f 	.word	0x0800118f
 80018e4:	0800118f 	.word	0x0800118f
 80018e8:	08001973 	.word	0x08001973
 80018ec:	080019ab 	.word	0x080019ab
 80018f0:	0800118f 	.word	0x0800118f
 80018f4:	0800118f 	.word	0x0800118f
 80018f8:	0800118f 	.word	0x0800118f
 80018fc:	0800118f 	.word	0x0800118f
 8001900:	0800118f 	.word	0x0800118f
 8001904:	0800118f 	.word	0x0800118f
 8001908:	0800118f 	.word	0x0800118f
 800190c:	0800118f 	.word	0x0800118f
 8001910:	08001a87 	.word	0x08001a87
 8001914:	08001ac1 	.word	0x08001ac1
 8001918:	0800118f 	.word	0x0800118f
 800191c:	0800118f 	.word	0x0800118f
 8001920:	0800118f 	.word	0x0800118f
 8001924:	0800118f 	.word	0x0800118f
 8001928:	0800118f 	.word	0x0800118f
 800192c:	0800118f 	.word	0x0800118f
 8001930:	0800118f 	.word	0x0800118f
 8001934:	0800118f 	.word	0x0800118f
 8001938:	08001e93 	.word	0x08001e93
 800193c:	08001ec9 	.word	0x08001ec9
 8001940:	0800118f 	.word	0x0800118f
 8001944:	0800118f 	.word	0x0800118f
 8001948:	0800118f 	.word	0x0800118f
 800194c:	0800118f 	.word	0x0800118f
 8001950:	0800118f 	.word	0x0800118f
 8001954:	0800118f 	.word	0x0800118f
 8001958:	0800118f 	.word	0x0800118f
 800195c:	0800118f 	.word	0x0800118f
 8001960:	0800221b 	.word	0x0800221b
 8001964:	08002253 	.word	0x08002253
        {
        	case StateDisplay_Start:
			  STATE_Display = StateDisplay_MenuRoot_Print;
 8001968:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <main+0x8f4>)
 800196a:	220a      	movs	r2, #10
 800196c:	601a      	str	r2, [r3, #0]
			  break;
 800196e:	f000 be3f 	b.w	80025f0 <main+0x14b0>
		  case StateDisplay_MenuRoot_Print: //display one time state
		  {
			  char temp[]="------------\r\n   Menu   \r\n------------\r\n1.sawtooth\r\n2.Sin wave 2\r\n3.square wave \r\n\r\n";
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <main+0x8f8>)
 8001978:	4618      	mov	r0, r3
 800197a:	4611      	mov	r1, r2
 800197c:	2355      	movs	r3, #85	; 0x55
 800197e:	461a      	mov	r2, r3
 8001980:	f005 fb98 	bl	80070b4 <memcpy>
			  HAL_UART_Transmit(&huart2, (uint16_t*)temp, strlen(temp),1000);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fc29 	bl	80001e0 <strlen>
 800198e:	4603      	mov	r3, r0
 8001990:	b29a      	uxth	r2, r3
 8001992:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	4828      	ldr	r0, [pc, #160]	; (8001a3c <main+0x8fc>)
 800199c:	f004 fd45 	bl	800642a <HAL_UART_Transmit>
			  STATE_Display = StateDisplay_MenuRoot_WaitInput;
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <main+0x8f4>)
 80019a2:	220b      	movs	r2, #11
 80019a4:	601a      	str	r2, [r3, #0]
			  break;
 80019a6:	f000 be23 	b.w	80025f0 <main+0x14b0>
		  }
		  case StateDisplay_MenuRoot_WaitInput: //wait state for input
			  switch (inputchar)
 80019aa:	f9b7 315e 	ldrsh.w	r3, [r7, #350]	; 0x15e
 80019ae:	2b33      	cmp	r3, #51	; 0x33
 80019b0:	d018      	beq.n	80019e4 <main+0x8a4>
 80019b2:	2b33      	cmp	r3, #51	; 0x33
 80019b4:	dc44      	bgt.n	8001a40 <main+0x900>
 80019b6:	2b32      	cmp	r3, #50	; 0x32
 80019b8:	d00d      	beq.n	80019d6 <main+0x896>
 80019ba:	2b32      	cmp	r3, #50	; 0x32
 80019bc:	dc40      	bgt.n	8001a40 <main+0x900>
 80019be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c2:	d05d      	beq.n	8001a80 <main+0x940>
 80019c4:	2b31      	cmp	r3, #49	; 0x31
 80019c6:	d13b      	bne.n	8001a40 <main+0x900>
					//no input ; just wait input
					break;
				  case '1':
				  {

					STATE_Display = StateDisplay_Menu1_Print;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <main+0x8f4>)
 80019ca:	2214      	movs	r2, #20
 80019cc:	601a      	str	r2, [r3, #0]
					wave = 1;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <main+0x8c0>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
					break;
 80019d4:	e055      	b.n	8001a82 <main+0x942>
				  }
				  case '2':
					STATE_Display = StateDisplay_Menu2_Print;
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <main+0x8f4>)
 80019d8:	221e      	movs	r2, #30
 80019da:	601a      	str	r2, [r3, #0]
					wave = 2;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <main+0x8c0>)
 80019de:	2202      	movs	r2, #2
 80019e0:	601a      	str	r2, [r3, #0]
					break;
 80019e2:	e04e      	b.n	8001a82 <main+0x942>
				  case '3':
					STATE_Display = StateDisplay_Menu3_Print;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <main+0x8f4>)
 80019e6:	2228      	movs	r2, #40	; 0x28
 80019e8:	601a      	str	r2, [r3, #0]
					wave = 3;
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <main+0x8c0>)
 80019ec:	2203      	movs	r2, #3
 80019ee:	601a      	str	r2, [r3, #0]
					break;
 80019f0:	e047      	b.n	8001a82 <main+0x942>
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
 80019f8:	66666666 	.word	0x66666666
 80019fc:	400a6666 	.word	0x400a6666
 8001a00:	200000b4 	.word	0x200000b4
 8001a04:	20000108 	.word	0x20000108
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	2000000c 	.word	0x2000000c
 8001a14:	457ff000 	.word	0x457ff000
 8001a18:	200000fc 	.word	0x200000fc
 8001a1c:	200000b0 	.word	0x200000b0
 8001a20:	200000f8 	.word	0x200000f8
 8001a24:	49742400 	.word	0x49742400
 8001a28:	20000168 	.word	0x20000168
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	20000004 	.word	0x20000004
 8001a34:	20000100 	.word	0x20000100
 8001a38:	08008410 	.word	0x08008410
 8001a3c:	200002b0 	.word	0x200002b0
				  default: // actully error , you can add error message
				  {
					char temp[]="////////////Wrong Input////////////\r\n";
 8001a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a44:	4aba      	ldr	r2, [pc, #744]	; (8001d30 <main+0xbf0>)
 8001a46:	461d      	mov	r5, r3
 8001a48:	4614      	mov	r4, r2
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a56:	6028      	str	r0, [r5, #0]
 8001a58:	3504      	adds	r5, #4
 8001a5a:	8029      	strh	r1, [r5, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fbbd 	bl	80001e0 <strlen>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	48b0      	ldr	r0, [pc, #704]	; (8001d34 <main+0xbf4>)
 8001a74:	f004 fcd9 	bl	800642a <HAL_UART_Transmit>
					STATE_Display = StateDisplay_MenuRoot_Print;
 8001a78:	4baf      	ldr	r3, [pc, #700]	; (8001d38 <main+0xbf8>)
 8001a7a:	220a      	movs	r2, #10
 8001a7c:	601a      	str	r2, [r3, #0]
					break;
 8001a7e:	e000      	b.n	8001a82 <main+0x942>
					break;
 8001a80:	bf00      	nop
				  }
			  }
			  break;
 8001a82:	f000 bdb5 	b.w	80025f0 <main+0x14b0>
			  case StateDisplay_Menu1_Print: //display one time state
			  {
				  char temp[]="------------------------\r\n"
 8001a86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8a:	4aac      	ldr	r2, [pc, #688]	; (8001d3c <main+0xbfc>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	4611      	mov	r1, r2
 8001a90:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a94:	461a      	mov	r2, r3
 8001a96:	f005 fb0d 	bl	80070b4 <memcpy>
							  "4.decrease V high(-0.1)\r\n"
							  "5.increase V low(+0.1)\r\n"
							  "6.decrease V low(-0.1)\r\n"
							  "7.Slope (Up/Down)\r\n"
						      "0.Exit to main menu\r\n";
				  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fb9e 	bl	80001e0 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab0:	48a0      	ldr	r0, [pc, #640]	; (8001d34 <main+0xbf4>)
 8001ab2:	f004 fcba 	bl	800642a <HAL_UART_Transmit>
				  STATE_Display = StateDisplay_Menu1_WaitInput;
 8001ab6:	4ba0      	ldr	r3, [pc, #640]	; (8001d38 <main+0xbf8>)
 8001ab8:	2215      	movs	r2, #21
 8001aba:	601a      	str	r2, [r3, #0]
				  break;
 8001abc:	f000 bd98 	b.w	80025f0 <main+0x14b0>
			  }
			  case StateDisplay_Menu1_WaitInput:
				  switch (inputchar)
 8001ac0:	f9b7 315e 	ldrsh.w	r3, [r7, #350]	; 0x15e
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	2b38      	cmp	r3, #56	; 0x38
 8001ac8:	f200 81bf 	bhi.w	8001e4a <main+0xd0a>
 8001acc:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <main+0x994>)
 8001ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad2:	bf00      	nop
 8001ad4:	08001e8b 	.word	0x08001e8b
 8001ad8:	08001e4b 	.word	0x08001e4b
 8001adc:	08001e4b 	.word	0x08001e4b
 8001ae0:	08001e4b 	.word	0x08001e4b
 8001ae4:	08001e4b 	.word	0x08001e4b
 8001ae8:	08001e4b 	.word	0x08001e4b
 8001aec:	08001e4b 	.word	0x08001e4b
 8001af0:	08001e4b 	.word	0x08001e4b
 8001af4:	08001e4b 	.word	0x08001e4b
 8001af8:	08001e4b 	.word	0x08001e4b
 8001afc:	08001e4b 	.word	0x08001e4b
 8001b00:	08001e4b 	.word	0x08001e4b
 8001b04:	08001e4b 	.word	0x08001e4b
 8001b08:	08001e4b 	.word	0x08001e4b
 8001b0c:	08001e4b 	.word	0x08001e4b
 8001b10:	08001e4b 	.word	0x08001e4b
 8001b14:	08001e4b 	.word	0x08001e4b
 8001b18:	08001e4b 	.word	0x08001e4b
 8001b1c:	08001e4b 	.word	0x08001e4b
 8001b20:	08001e4b 	.word	0x08001e4b
 8001b24:	08001e4b 	.word	0x08001e4b
 8001b28:	08001e4b 	.word	0x08001e4b
 8001b2c:	08001e4b 	.word	0x08001e4b
 8001b30:	08001e4b 	.word	0x08001e4b
 8001b34:	08001e4b 	.word	0x08001e4b
 8001b38:	08001e4b 	.word	0x08001e4b
 8001b3c:	08001e4b 	.word	0x08001e4b
 8001b40:	08001e4b 	.word	0x08001e4b
 8001b44:	08001e4b 	.word	0x08001e4b
 8001b48:	08001e4b 	.word	0x08001e4b
 8001b4c:	08001e4b 	.word	0x08001e4b
 8001b50:	08001e4b 	.word	0x08001e4b
 8001b54:	08001e4b 	.word	0x08001e4b
 8001b58:	08001e4b 	.word	0x08001e4b
 8001b5c:	08001e4b 	.word	0x08001e4b
 8001b60:	08001e4b 	.word	0x08001e4b
 8001b64:	08001e4b 	.word	0x08001e4b
 8001b68:	08001e4b 	.word	0x08001e4b
 8001b6c:	08001e4b 	.word	0x08001e4b
 8001b70:	08001e4b 	.word	0x08001e4b
 8001b74:	08001e4b 	.word	0x08001e4b
 8001b78:	08001e4b 	.word	0x08001e4b
 8001b7c:	08001e4b 	.word	0x08001e4b
 8001b80:	08001e4b 	.word	0x08001e4b
 8001b84:	08001e4b 	.word	0x08001e4b
 8001b88:	08001e4b 	.word	0x08001e4b
 8001b8c:	08001e4b 	.word	0x08001e4b
 8001b90:	08001e4b 	.word	0x08001e4b
 8001b94:	08001e4b 	.word	0x08001e4b
 8001b98:	08001e43 	.word	0x08001e43
 8001b9c:	08001bb9 	.word	0x08001bb9
 8001ba0:	08001c01 	.word	0x08001c01
 8001ba4:	08001c47 	.word	0x08001c47
 8001ba8:	08001c95 	.word	0x08001c95
 8001bac:	08001d55 	.word	0x08001d55
 8001bb0:	08001ddd 	.word	0x08001ddd
 8001bb4:	08001e23 	.word	0x08001e23
					  case -1:
						//no input ; just wait input
						break;
					  case '1':
					  {
						f+=0.1;
 8001bb8:	4b61      	ldr	r3, [pc, #388]	; (8001d40 <main+0xc00>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fccb 	bl	8000558 <__aeabi_f2d>
 8001bc2:	a357      	add	r3, pc, #348	; (adr r3, 8001d20 <main+0xbe0>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	f7fe fb68 	bl	800029c <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe ffda 	bl	8000b8c <__aeabi_d2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a59      	ldr	r2, [pc, #356]	; (8001d40 <main+0xc00>)
 8001bdc:	6013      	str	r3, [r2, #0]
						if(f>10)
 8001bde:	4b58      	ldr	r3, [pc, #352]	; (8001d40 <main+0xc00>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	dd02      	ble.n	8001bf8 <main+0xab8>
						{
							f=10;
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <main+0xc00>)
 8001bf4:	4a53      	ldr	r2, [pc, #332]	; (8001d44 <main+0xc04>)
 8001bf6:	601a      	str	r2, [r3, #0]
						}
						STATE_Display = StateDisplay_Menu1_Print;
 8001bf8:	4b4f      	ldr	r3, [pc, #316]	; (8001d38 <main+0xbf8>)
 8001bfa:	2214      	movs	r2, #20
 8001bfc:	601a      	str	r2, [r3, #0]
						break;
 8001bfe:	e147      	b.n	8001e90 <main+0xd50>
					  }
					  case '2':
					  {
						f-=0.1;
 8001c00:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <main+0xc00>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fca7 	bl	8000558 <__aeabi_f2d>
 8001c0a:	a345      	add	r3, pc, #276	; (adr r3, 8001d20 <main+0xbe0>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe fb42 	bl	8000298 <__aeabi_dsub>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe ffb6 	bl	8000b8c <__aeabi_d2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a47      	ldr	r2, [pc, #284]	; (8001d40 <main+0xc00>)
 8001c24:	6013      	str	r3, [r2, #0]
						if(f<0)
 8001c26:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <main+0xc00>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	d503      	bpl.n	8001c3e <main+0xafe>
						{
							f = 0;
 8001c36:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <main+0xc00>)
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
						}
						STATE_Display = StateDisplay_Menu1_Print;
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <main+0xbf8>)
 8001c40:	2214      	movs	r2, #20
 8001c42:	601a      	str	r2, [r3, #0]
						break;
 8001c44:	e124      	b.n	8001e90 <main+0xd50>
					  }
					  case '3':
						vh+=0.1;
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <main+0xc08>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc84 	bl	8000558 <__aeabi_f2d>
 8001c50:	a333      	add	r3, pc, #204	; (adr r3, 8001d20 <main+0xbe0>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	f7fe fb21 	bl	800029c <__adddf3>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ff93 	bl	8000b8c <__aeabi_d2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a37      	ldr	r2, [pc, #220]	; (8001d48 <main+0xc08>)
 8001c6a:	6013      	str	r3, [r2, #0]
						if (vh>=3.3)
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <main+0xc08>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc71 	bl	8000558 <__aeabi_f2d>
 8001c76:	a32c      	add	r3, pc, #176	; (adr r3, 8001d28 <main+0xbe8>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe ff4a 	bl	8000b14 <__aeabi_dcmpge>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <main+0xb4c>
							vh = 3.3;
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <main+0xc08>)
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <main+0xc0c>)
 8001c8a:	601a      	str	r2, [r3, #0]
						STATE_Display = StateDisplay_Menu1_Print;
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <main+0xbf8>)
 8001c8e:	2214      	movs	r2, #20
 8001c90:	601a      	str	r2, [r3, #0]
						break;
 8001c92:	e0fd      	b.n	8001e90 <main+0xd50>
					  case '4':
						vh-=0.1;
 8001c94:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <main+0xc08>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc5d 	bl	8000558 <__aeabi_f2d>
 8001c9e:	a320      	add	r3, pc, #128	; (adr r3, 8001d20 <main+0xbe0>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe faf8 	bl	8000298 <__aeabi_dsub>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ff6c 	bl	8000b8c <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a24      	ldr	r2, [pc, #144]	; (8001d48 <main+0xc08>)
 8001cb8:	6013      	str	r3, [r2, #0]
						if (vh<=vl+0.1)
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <main+0xc08>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fc4a 	bl	8000558 <__aeabi_f2d>
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	460d      	mov	r5, r1
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <main+0xc10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc43 	bl	8000558 <__aeabi_f2d>
 8001cd2:	a313      	add	r3, pc, #76	; (adr r3, 8001d20 <main+0xbe0>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fae0 	bl	800029c <__adddf3>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	f7fe ff0c 	bl	8000b00 <__aeabi_dcmple>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d012      	beq.n	8001d14 <main+0xbd4>
							vh = vl+0.1;
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <main+0xc10>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fc30 	bl	8000558 <__aeabi_f2d>
 8001cf8:	a309      	add	r3, pc, #36	; (adr r3, 8001d20 <main+0xbe0>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe facd 	bl	800029c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff3f 	bl	8000b8c <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <main+0xc08>)
 8001d12:	6013      	str	r3, [r2, #0]
						STATE_Display = StateDisplay_Menu1_Print;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <main+0xbf8>)
 8001d16:	2214      	movs	r2, #20
 8001d18:	601a      	str	r2, [r3, #0]
						break;
 8001d1a:	e0b9      	b.n	8001e90 <main+0xd50>
 8001d1c:	f3af 8000 	nop.w
 8001d20:	9999999a 	.word	0x9999999a
 8001d24:	3fb99999 	.word	0x3fb99999
 8001d28:	66666666 	.word	0x66666666
 8001d2c:	400a6666 	.word	0x400a6666
 8001d30:	08008468 	.word	0x08008468
 8001d34:	200002b0 	.word	0x200002b0
 8001d38:	20000100 	.word	0x20000100
 8001d3c:	08008490 	.word	0x08008490
 8001d40:	20000008 	.word	0x20000008
 8001d44:	41200000 	.word	0x41200000
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	40533333 	.word	0x40533333
 8001d50:	200000f8 	.word	0x200000f8
					  case '5':
						vl+=0.1;
 8001d54:	4bba      	ldr	r3, [pc, #744]	; (8002040 <main+0xf00>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbfd 	bl	8000558 <__aeabi_f2d>
 8001d5e:	a3b6      	add	r3, pc, #728	; (adr r3, 8002038 <main+0xef8>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fa9a 	bl	800029c <__adddf3>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe ff0c 	bl	8000b8c <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4ab2      	ldr	r2, [pc, #712]	; (8002040 <main+0xf00>)
 8001d78:	6013      	str	r3, [r2, #0]
						if (vl>=vh-0.1)
 8001d7a:	4bb1      	ldr	r3, [pc, #708]	; (8002040 <main+0xf00>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fbea 	bl	8000558 <__aeabi_f2d>
 8001d84:	4604      	mov	r4, r0
 8001d86:	460d      	mov	r5, r1
 8001d88:	4bae      	ldr	r3, [pc, #696]	; (8002044 <main+0xf04>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbe3 	bl	8000558 <__aeabi_f2d>
 8001d92:	a3a9      	add	r3, pc, #676	; (adr r3, 8002038 <main+0xef8>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fa7e 	bl	8000298 <__aeabi_dsub>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe feb6 	bl	8000b14 <__aeabi_dcmpge>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <main+0xc94>
							vl = vh-0.1;
 8001dae:	4ba5      	ldr	r3, [pc, #660]	; (8002044 <main+0xf04>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd0 	bl	8000558 <__aeabi_f2d>
 8001db8:	a39f      	add	r3, pc, #636	; (adr r3, 8002038 <main+0xef8>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	f7fe fa6b 	bl	8000298 <__aeabi_dsub>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fedf 	bl	8000b8c <__aeabi_d2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a9b      	ldr	r2, [pc, #620]	; (8002040 <main+0xf00>)
 8001dd2:	6013      	str	r3, [r2, #0]
						STATE_Display = StateDisplay_Menu1_Print;
 8001dd4:	4b9c      	ldr	r3, [pc, #624]	; (8002048 <main+0xf08>)
 8001dd6:	2214      	movs	r2, #20
 8001dd8:	601a      	str	r2, [r3, #0]
						break;
 8001dda:	e059      	b.n	8001e90 <main+0xd50>
					  case '6':
						vl-=0.1;
 8001ddc:	4b98      	ldr	r3, [pc, #608]	; (8002040 <main+0xf00>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fbb9 	bl	8000558 <__aeabi_f2d>
 8001de6:	a394      	add	r3, pc, #592	; (adr r3, 8002038 <main+0xef8>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fa54 	bl	8000298 <__aeabi_dsub>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fec8 	bl	8000b8c <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a90      	ldr	r2, [pc, #576]	; (8002040 <main+0xf00>)
 8001e00:	6013      	str	r3, [r2, #0]
						if (vl<=0)
 8001e02:	4b8f      	ldr	r3, [pc, #572]	; (8002040 <main+0xf00>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d803      	bhi.n	8001e1a <main+0xcda>
							vl = 0;
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <main+0xf00>)
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
						STATE_Display = StateDisplay_Menu1_Print;
 8001e1a:	4b8b      	ldr	r3, [pc, #556]	; (8002048 <main+0xf08>)
 8001e1c:	2214      	movs	r2, #20
 8001e1e:	601a      	str	r2, [r3, #0]
						break;
 8001e20:	e036      	b.n	8001e90 <main+0xd50>
					  case '7':
					  {
						if(slove==1)
 8001e22:	4b8a      	ldr	r3, [pc, #552]	; (800204c <main+0xf0c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d103      	bne.n	8001e32 <main+0xcf2>
						{
							slove=0;
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <main+0xf0c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

							break;
 8001e30:	e02e      	b.n	8001e90 <main+0xd50>
						}
						else if(slove==0)
 8001e32:	4b86      	ldr	r3, [pc, #536]	; (800204c <main+0xf0c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d129      	bne.n	8001e8e <main+0xd4e>
						{
							slove=1;
 8001e3a:	4b84      	ldr	r3, [pc, #528]	; (800204c <main+0xf0c>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

							break;
 8001e40:	e026      	b.n	8001e90 <main+0xd50>
						}
					  }
					  break;
					  case '0': // back to main manu(10)
						STATE_Display = StateDisplay_MenuRoot_Print;
 8001e42:	4b81      	ldr	r3, [pc, #516]	; (8002048 <main+0xf08>)
 8001e44:	220a      	movs	r2, #10
 8001e46:	601a      	str	r2, [r3, #0]
						break;
 8001e48:	e022      	b.n	8001e90 <main+0xd50>
					  default: // actully error , you can add error message
					  {
						STATE_Display = StateDisplay_Menu1_Print;
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <main+0xf08>)
 8001e4c:	2214      	movs	r2, #20
 8001e4e:	601a      	str	r2, [r3, #0]
						char temp[]="////////////Wrong Input////////////\r\n";
 8001e50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e54:	4a7e      	ldr	r2, [pc, #504]	; (8002050 <main+0xf10>)
 8001e56:	461d      	mov	r5, r3
 8001e58:	4614      	mov	r4, r2
 8001e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e66:	6028      	str	r0, [r5, #0]
 8001e68:	3504      	adds	r5, #4
 8001e6a:	8029      	strh	r1, [r5, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe f9b5 	bl	80001e0 <strlen>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	4874      	ldr	r0, [pc, #464]	; (8002054 <main+0xf14>)
 8001e84:	f004 fad1 	bl	800642a <HAL_UART_Transmit>
						break;
 8001e88:	e002      	b.n	8001e90 <main+0xd50>
						break;
 8001e8a:	bf00      	nop
 8001e8c:	e3b0      	b.n	80025f0 <main+0x14b0>
					  break;
 8001e8e:	bf00      	nop
					  }
				  }
				  break;
 8001e90:	e3ae      	b.n	80025f0 <main+0x14b0>
				  case StateDisplay_Menu2_Print: //display one time state
				  {
					  char temp[]="------------------------\r\n"
 8001e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e96:	4a70      	ldr	r2, [pc, #448]	; (8002058 <main+0xf18>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	23fd      	movs	r3, #253	; 0xfd
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f005 f908 	bl	80070b4 <memcpy>
								  "3.increase V high(+0.1)\r\n"
								  "4.decrease V high(-0.1)\r\n"
								  "5.increase V low(+0.1)\r\n"
								  "6.decrease V low(-0.1)\r\n"
							      "0.Exit to main menu\r\n";
					  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe f999 	bl	80001e0 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	4866      	ldr	r0, [pc, #408]	; (8002054 <main+0xf14>)
 8001ebc:	f004 fab5 	bl	800642a <HAL_UART_Transmit>
					  STATE_Display = StateDisplay_Menu2_WaitInput;
 8001ec0:	4b61      	ldr	r3, [pc, #388]	; (8002048 <main+0xf08>)
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	601a      	str	r2, [r3, #0]
					  break;
 8001ec6:	e393      	b.n	80025f0 <main+0x14b0>
				  }
				  case StateDisplay_Menu2_WaitInput:
					  switch (inputchar)
 8001ec8:	f9b7 315e 	ldrsh.w	r3, [r7, #350]	; 0x15e
 8001ecc:	3301      	adds	r3, #1
 8001ece:	2b37      	cmp	r3, #55	; 0x37
 8001ed0:	f200 8181 	bhi.w	80021d6 <main+0x1096>
 8001ed4:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <main+0xd9c>)
 8001ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eda:	bf00      	nop
 8001edc:	08002217 	.word	0x08002217
 8001ee0:	080021d7 	.word	0x080021d7
 8001ee4:	080021d7 	.word	0x080021d7
 8001ee8:	080021d7 	.word	0x080021d7
 8001eec:	080021d7 	.word	0x080021d7
 8001ef0:	080021d7 	.word	0x080021d7
 8001ef4:	080021d7 	.word	0x080021d7
 8001ef8:	080021d7 	.word	0x080021d7
 8001efc:	080021d7 	.word	0x080021d7
 8001f00:	080021d7 	.word	0x080021d7
 8001f04:	080021d7 	.word	0x080021d7
 8001f08:	080021d7 	.word	0x080021d7
 8001f0c:	080021d7 	.word	0x080021d7
 8001f10:	080021d7 	.word	0x080021d7
 8001f14:	080021d7 	.word	0x080021d7
 8001f18:	080021d7 	.word	0x080021d7
 8001f1c:	080021d7 	.word	0x080021d7
 8001f20:	080021d7 	.word	0x080021d7
 8001f24:	080021d7 	.word	0x080021d7
 8001f28:	080021d7 	.word	0x080021d7
 8001f2c:	080021d7 	.word	0x080021d7
 8001f30:	080021d7 	.word	0x080021d7
 8001f34:	080021d7 	.word	0x080021d7
 8001f38:	080021d7 	.word	0x080021d7
 8001f3c:	080021d7 	.word	0x080021d7
 8001f40:	080021d7 	.word	0x080021d7
 8001f44:	080021d7 	.word	0x080021d7
 8001f48:	080021d7 	.word	0x080021d7
 8001f4c:	080021d7 	.word	0x080021d7
 8001f50:	080021d7 	.word	0x080021d7
 8001f54:	080021d7 	.word	0x080021d7
 8001f58:	080021d7 	.word	0x080021d7
 8001f5c:	080021d7 	.word	0x080021d7
 8001f60:	080021d7 	.word	0x080021d7
 8001f64:	080021d7 	.word	0x080021d7
 8001f68:	080021d7 	.word	0x080021d7
 8001f6c:	080021d7 	.word	0x080021d7
 8001f70:	080021d7 	.word	0x080021d7
 8001f74:	080021d7 	.word	0x080021d7
 8001f78:	080021d7 	.word	0x080021d7
 8001f7c:	080021d7 	.word	0x080021d7
 8001f80:	080021d7 	.word	0x080021d7
 8001f84:	080021d7 	.word	0x080021d7
 8001f88:	080021d7 	.word	0x080021d7
 8001f8c:	080021d7 	.word	0x080021d7
 8001f90:	080021d7 	.word	0x080021d7
 8001f94:	080021d7 	.word	0x080021d7
 8001f98:	080021d7 	.word	0x080021d7
 8001f9c:	080021d7 	.word	0x080021d7
 8001fa0:	080021cf 	.word	0x080021cf
 8001fa4:	08001fbd 	.word	0x08001fbd
 8001fa8:	08001ff1 	.word	0x08001ff1
 8001fac:	08002065 	.word	0x08002065
 8001fb0:	080020b3 	.word	0x080020b3
 8001fb4:	08002101 	.word	0x08002101
 8001fb8:	08002189 	.word	0x08002189
						  case -1:
							//no input ; just wait input
							break;
						  case '1':
						  {
							f+=0.1;
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <main+0xf1c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fac9 	bl	8000558 <__aeabi_f2d>
 8001fc6:	a31c      	add	r3, pc, #112	; (adr r3, 8002038 <main+0xef8>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe f966 	bl	800029c <__adddf3>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f7fe fdd8 	bl	8000b8c <__aeabi_d2f>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4a1f      	ldr	r2, [pc, #124]	; (800205c <main+0xf1c>)
 8001fe0:	6013      	str	r3, [r2, #0]
							{
								f=10;
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <main+0xf1c>)
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <main+0xf20>)
 8001fe6:	601a      	str	r2, [r3, #0]
							}
							STATE_Display = StateDisplay_Menu2_Print;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <main+0xf08>)
 8001fea:	221e      	movs	r2, #30
 8001fec:	601a      	str	r2, [r3, #0]
							break;
 8001fee:	e113      	b.n	8002218 <main+0x10d8>
						  }
						  case '2':
						  {
							f-=0.1;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <main+0xf1c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe faaf 	bl	8000558 <__aeabi_f2d>
 8001ffa:	a30f      	add	r3, pc, #60	; (adr r3, 8002038 <main+0xef8>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe f94a 	bl	8000298 <__aeabi_dsub>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fdbe 	bl	8000b8c <__aeabi_d2f>
 8002010:	4603      	mov	r3, r0
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <main+0xf1c>)
 8002014:	6013      	str	r3, [r2, #0]
							if(f<0)
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <main+0xf1c>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002024:	d503      	bpl.n	800202e <main+0xeee>
							{
								f = 0;
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <main+0xf1c>)
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
							}
							STATE_Display = StateDisplay_Menu2_Print;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <main+0xf08>)
 8002030:	221e      	movs	r2, #30
 8002032:	601a      	str	r2, [r3, #0]
							break;
 8002034:	e0f0      	b.n	8002218 <main+0x10d8>
 8002036:	bf00      	nop
 8002038:	9999999a 	.word	0x9999999a
 800203c:	3fb99999 	.word	0x3fb99999
 8002040:	200000f8 	.word	0x200000f8
 8002044:	2000000c 	.word	0x2000000c
 8002048:	20000100 	.word	0x20000100
 800204c:	20000010 	.word	0x20000010
 8002050:	08008468 	.word	0x08008468
 8002054:	200002b0 	.word	0x200002b0
 8002058:	080085a0 	.word	0x080085a0
 800205c:	20000008 	.word	0x20000008
 8002060:	41200000 	.word	0x41200000
						  }
						  case '3':
							vh+=0.1;
 8002064:	4bbe      	ldr	r3, [pc, #760]	; (8002360 <main+0x1220>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fa75 	bl	8000558 <__aeabi_f2d>
 800206e:	a3b8      	add	r3, pc, #736	; (adr r3, 8002350 <main+0x1210>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe f912 	bl	800029c <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fd84 	bl	8000b8c <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	4ab6      	ldr	r2, [pc, #728]	; (8002360 <main+0x1220>)
 8002088:	6013      	str	r3, [r2, #0]
							if (vh>=3.3)
 800208a:	4bb5      	ldr	r3, [pc, #724]	; (8002360 <main+0x1220>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fa62 	bl	8000558 <__aeabi_f2d>
 8002094:	a3b0      	add	r3, pc, #704	; (adr r3, 8002358 <main+0x1218>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fd3b 	bl	8000b14 <__aeabi_dcmpge>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <main+0xf6a>
								vh = 3.3;
 80020a4:	4bae      	ldr	r3, [pc, #696]	; (8002360 <main+0x1220>)
 80020a6:	4aaf      	ldr	r2, [pc, #700]	; (8002364 <main+0x1224>)
 80020a8:	601a      	str	r2, [r3, #0]
							STATE_Display = StateDisplay_Menu2_Print;
 80020aa:	4baf      	ldr	r3, [pc, #700]	; (8002368 <main+0x1228>)
 80020ac:	221e      	movs	r2, #30
 80020ae:	601a      	str	r2, [r3, #0]
							break;
 80020b0:	e0b2      	b.n	8002218 <main+0x10d8>
						  case '4':
							vh-=0.1;
 80020b2:	4bab      	ldr	r3, [pc, #684]	; (8002360 <main+0x1220>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa4e 	bl	8000558 <__aeabi_f2d>
 80020bc:	a3a4      	add	r3, pc, #656	; (adr r3, 8002350 <main+0x1210>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe f8e9 	bl	8000298 <__aeabi_dsub>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fd5d 	bl	8000b8c <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4aa2      	ldr	r2, [pc, #648]	; (8002360 <main+0x1220>)
 80020d6:	6013      	str	r3, [r2, #0]
							if (vh<=0.1)
 80020d8:	4ba1      	ldr	r3, [pc, #644]	; (8002360 <main+0x1220>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fa3b 	bl	8000558 <__aeabi_f2d>
 80020e2:	a39b      	add	r3, pc, #620	; (adr r3, 8002350 <main+0x1210>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fd0a 	bl	8000b00 <__aeabi_dcmple>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <main+0xfb8>
								vh = 0.1;
 80020f2:	4b9b      	ldr	r3, [pc, #620]	; (8002360 <main+0x1220>)
 80020f4:	4a9d      	ldr	r2, [pc, #628]	; (800236c <main+0x122c>)
 80020f6:	601a      	str	r2, [r3, #0]
							STATE_Display = StateDisplay_Menu2_Print;
 80020f8:	4b9b      	ldr	r3, [pc, #620]	; (8002368 <main+0x1228>)
 80020fa:	221e      	movs	r2, #30
 80020fc:	601a      	str	r2, [r3, #0]
							break;
 80020fe:	e08b      	b.n	8002218 <main+0x10d8>
						  case '5':
							vl+=0.1;
 8002100:	4b9b      	ldr	r3, [pc, #620]	; (8002370 <main+0x1230>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fa27 	bl	8000558 <__aeabi_f2d>
 800210a:	a391      	add	r3, pc, #580	; (adr r3, 8002350 <main+0x1210>)
 800210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002110:	f7fe f8c4 	bl	800029c <__adddf3>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f7fe fd36 	bl	8000b8c <__aeabi_d2f>
 8002120:	4603      	mov	r3, r0
 8002122:	4a93      	ldr	r2, [pc, #588]	; (8002370 <main+0x1230>)
 8002124:	6013      	str	r3, [r2, #0]
							if (vl>=vh-0.1)
 8002126:	4b92      	ldr	r3, [pc, #584]	; (8002370 <main+0x1230>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fa14 	bl	8000558 <__aeabi_f2d>
 8002130:	4604      	mov	r4, r0
 8002132:	460d      	mov	r5, r1
 8002134:	4b8a      	ldr	r3, [pc, #552]	; (8002360 <main+0x1220>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fa0d 	bl	8000558 <__aeabi_f2d>
 800213e:	a384      	add	r3, pc, #528	; (adr r3, 8002350 <main+0x1210>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe f8a8 	bl	8000298 <__aeabi_dsub>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4620      	mov	r0, r4
 800214e:	4629      	mov	r1, r5
 8002150:	f7fe fce0 	bl	8000b14 <__aeabi_dcmpge>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d012      	beq.n	8002180 <main+0x1040>
								vl = vh-0.1;
 800215a:	4b81      	ldr	r3, [pc, #516]	; (8002360 <main+0x1220>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9fa 	bl	8000558 <__aeabi_f2d>
 8002164:	a37a      	add	r3, pc, #488	; (adr r3, 8002350 <main+0x1210>)
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f7fe f895 	bl	8000298 <__aeabi_dsub>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fd09 	bl	8000b8c <__aeabi_d2f>
 800217a:	4603      	mov	r3, r0
 800217c:	4a7c      	ldr	r2, [pc, #496]	; (8002370 <main+0x1230>)
 800217e:	6013      	str	r3, [r2, #0]
							STATE_Display = StateDisplay_Menu2_Print;
 8002180:	4b79      	ldr	r3, [pc, #484]	; (8002368 <main+0x1228>)
 8002182:	221e      	movs	r2, #30
 8002184:	601a      	str	r2, [r3, #0]
							break;
 8002186:	e047      	b.n	8002218 <main+0x10d8>
						  case '6':
							vl-=0.1;
 8002188:	4b79      	ldr	r3, [pc, #484]	; (8002370 <main+0x1230>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9e3 	bl	8000558 <__aeabi_f2d>
 8002192:	a36f      	add	r3, pc, #444	; (adr r3, 8002350 <main+0x1210>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe f87e 	bl	8000298 <__aeabi_dsub>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7fe fcf2 	bl	8000b8c <__aeabi_d2f>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4a71      	ldr	r2, [pc, #452]	; (8002370 <main+0x1230>)
 80021ac:	6013      	str	r3, [r2, #0]
							if (vl<=0)
 80021ae:	4b70      	ldr	r3, [pc, #448]	; (8002370 <main+0x1230>)
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	d803      	bhi.n	80021c6 <main+0x1086>
								vl = 0;
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <main+0x1230>)
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
							STATE_Display = StateDisplay_Menu2_Print;
 80021c6:	4b68      	ldr	r3, [pc, #416]	; (8002368 <main+0x1228>)
 80021c8:	221e      	movs	r2, #30
 80021ca:	601a      	str	r2, [r3, #0]
							break;
 80021cc:	e024      	b.n	8002218 <main+0x10d8>
						  case '0': // back to main manu(10)
							STATE_Display = StateDisplay_MenuRoot_Print;
 80021ce:	4b66      	ldr	r3, [pc, #408]	; (8002368 <main+0x1228>)
 80021d0:	220a      	movs	r2, #10
 80021d2:	601a      	str	r2, [r3, #0]
							break;
 80021d4:	e020      	b.n	8002218 <main+0x10d8>
						  default: // actully error , you can add error message
						  {
							STATE_Display = StateDisplay_Menu2_Print;
 80021d6:	4b64      	ldr	r3, [pc, #400]	; (8002368 <main+0x1228>)
 80021d8:	221e      	movs	r2, #30
 80021da:	601a      	str	r2, [r3, #0]
							char temp[]="////////////Wrong Input////////////\r\n";
 80021dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e0:	4a64      	ldr	r2, [pc, #400]	; (8002374 <main+0x1234>)
 80021e2:	461d      	mov	r5, r3
 80021e4:	4614      	mov	r4, r2
 80021e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021f2:	6028      	str	r0, [r5, #0]
 80021f4:	3504      	adds	r5, #4
 80021f6:	8029      	strh	r1, [r5, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80021f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fd ffef 	bl	80001e0 <strlen>
 8002202:	4603      	mov	r3, r0
 8002204:	b29a      	uxth	r2, r3
 8002206:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	485a      	ldr	r0, [pc, #360]	; (8002378 <main+0x1238>)
 8002210:	f004 f90b 	bl	800642a <HAL_UART_Transmit>
							break;
 8002214:	e000      	b.n	8002218 <main+0x10d8>
							break;
 8002216:	bf00      	nop
						  }
					  }
					  break;
 8002218:	e1ea      	b.n	80025f0 <main+0x14b0>
					  case StateDisplay_Menu3_Print: //display one time state
					  {
						  char temp[]="------------------------\r\n"
 800221a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800221e:	4a57      	ldr	r2, [pc, #348]	; (800237c <main+0x123c>)
 8002220:	4618      	mov	r0, r3
 8002222:	4611      	mov	r1, r2
 8002224:	f44f 7392 	mov.w	r3, #292	; 0x124
 8002228:	461a      	mov	r2, r3
 800222a:	f004 ff43 	bl	80070b4 <memcpy>
									  "5.increase V low(+0.1)\r\n"
									  "6.decrease V low(-0.1)\r\n"
								      "7.duty cycle(+5)\r\n"
								      "8.duty cycle(-5)\r\n"
									  "0.Exit to main menu\r\n";
						  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 800222e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002232:	4618      	mov	r0, r3
 8002234:	f7fd ffd4 	bl	80001e0 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	b29a      	uxth	r2, r3
 800223c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002244:	484c      	ldr	r0, [pc, #304]	; (8002378 <main+0x1238>)
 8002246:	f004 f8f0 	bl	800642a <HAL_UART_Transmit>
						  STATE_Display = StateDisplay_Menu3_WaitInput;
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <main+0x1228>)
 800224c:	2229      	movs	r2, #41	; 0x29
 800224e:	601a      	str	r2, [r3, #0]
						  break;
 8002250:	e1ce      	b.n	80025f0 <main+0x14b0>
					  }
					  case StateDisplay_Menu3_WaitInput:
						  switch (inputchar)
 8002252:	f9b7 315e 	ldrsh.w	r3, [r7, #350]	; 0x15e
 8002256:	3301      	adds	r3, #1
 8002258:	2b39      	cmp	r3, #57	; 0x39
 800225a:	f200 81a7 	bhi.w	80025ac <main+0x146c>
 800225e:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <main+0x1124>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	080025ed 	.word	0x080025ed
 8002268:	080025ad 	.word	0x080025ad
 800226c:	080025ad 	.word	0x080025ad
 8002270:	080025ad 	.word	0x080025ad
 8002274:	080025ad 	.word	0x080025ad
 8002278:	080025ad 	.word	0x080025ad
 800227c:	080025ad 	.word	0x080025ad
 8002280:	080025ad 	.word	0x080025ad
 8002284:	080025ad 	.word	0x080025ad
 8002288:	080025ad 	.word	0x080025ad
 800228c:	080025ad 	.word	0x080025ad
 8002290:	080025ad 	.word	0x080025ad
 8002294:	080025ad 	.word	0x080025ad
 8002298:	080025ad 	.word	0x080025ad
 800229c:	080025ad 	.word	0x080025ad
 80022a0:	080025ad 	.word	0x080025ad
 80022a4:	080025ad 	.word	0x080025ad
 80022a8:	080025ad 	.word	0x080025ad
 80022ac:	080025ad 	.word	0x080025ad
 80022b0:	080025ad 	.word	0x080025ad
 80022b4:	080025ad 	.word	0x080025ad
 80022b8:	080025ad 	.word	0x080025ad
 80022bc:	080025ad 	.word	0x080025ad
 80022c0:	080025ad 	.word	0x080025ad
 80022c4:	080025ad 	.word	0x080025ad
 80022c8:	080025ad 	.word	0x080025ad
 80022cc:	080025ad 	.word	0x080025ad
 80022d0:	080025ad 	.word	0x080025ad
 80022d4:	080025ad 	.word	0x080025ad
 80022d8:	080025ad 	.word	0x080025ad
 80022dc:	080025ad 	.word	0x080025ad
 80022e0:	080025ad 	.word	0x080025ad
 80022e4:	080025ad 	.word	0x080025ad
 80022e8:	080025ad 	.word	0x080025ad
 80022ec:	080025ad 	.word	0x080025ad
 80022f0:	080025ad 	.word	0x080025ad
 80022f4:	080025ad 	.word	0x080025ad
 80022f8:	080025ad 	.word	0x080025ad
 80022fc:	080025ad 	.word	0x080025ad
 8002300:	080025ad 	.word	0x080025ad
 8002304:	080025ad 	.word	0x080025ad
 8002308:	080025ad 	.word	0x080025ad
 800230c:	080025ad 	.word	0x080025ad
 8002310:	080025ad 	.word	0x080025ad
 8002314:	080025ad 	.word	0x080025ad
 8002318:	080025ad 	.word	0x080025ad
 800231c:	080025ad 	.word	0x080025ad
 8002320:	080025ad 	.word	0x080025ad
 8002324:	080025ad 	.word	0x080025ad
 8002328:	080025a5 	.word	0x080025a5
 800232c:	08002381 	.word	0x08002381
 8002330:	080023b5 	.word	0x080023b5
 8002334:	080023fb 	.word	0x080023fb
 8002338:	08002449 	.word	0x08002449
 800233c:	08002497 	.word	0x08002497
 8002340:	0800251f 	.word	0x0800251f
 8002344:	08002565 	.word	0x08002565
 8002348:	08002585 	.word	0x08002585
 800234c:	f3af 8000 	nop.w
 8002350:	9999999a 	.word	0x9999999a
 8002354:	3fb99999 	.word	0x3fb99999
 8002358:	66666666 	.word	0x66666666
 800235c:	400a6666 	.word	0x400a6666
 8002360:	2000000c 	.word	0x2000000c
 8002364:	40533333 	.word	0x40533333
 8002368:	20000100 	.word	0x20000100
 800236c:	3dcccccd 	.word	0x3dcccccd
 8002370:	200000f8 	.word	0x200000f8
 8002374:	08008468 	.word	0x08008468
 8002378:	200002b0 	.word	0x200002b0
 800237c:	080086a0 	.word	0x080086a0
							  case -1:
								//no input ; just wait input
								break;
							  case '1':
							  {
								f+=0.1;
 8002380:	4ba1      	ldr	r3, [pc, #644]	; (8002608 <main+0x14c8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8e7 	bl	8000558 <__aeabi_f2d>
 800238a:	a39b      	add	r3, pc, #620	; (adr r3, 80025f8 <main+0x14b8>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fd ff84 	bl	800029c <__adddf3>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fbf6 	bl	8000b8c <__aeabi_d2f>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a99      	ldr	r2, [pc, #612]	; (8002608 <main+0x14c8>)
 80023a4:	6013      	str	r3, [r2, #0]
								{
									f=10;
 80023a6:	4b98      	ldr	r3, [pc, #608]	; (8002608 <main+0x14c8>)
 80023a8:	4a98      	ldr	r2, [pc, #608]	; (800260c <main+0x14cc>)
 80023aa:	601a      	str	r2, [r3, #0]
								}
								STATE_Display = StateDisplay_Menu3_Print;
 80023ac:	4b98      	ldr	r3, [pc, #608]	; (8002610 <main+0x14d0>)
 80023ae:	2228      	movs	r2, #40	; 0x28
 80023b0:	601a      	str	r2, [r3, #0]
								break;
 80023b2:	e11c      	b.n	80025ee <main+0x14ae>
							  }
							  case '2':
							  {
								f-=0.1;
 80023b4:	4b94      	ldr	r3, [pc, #592]	; (8002608 <main+0x14c8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f8cd 	bl	8000558 <__aeabi_f2d>
 80023be:	a38e      	add	r3, pc, #568	; (adr r3, 80025f8 <main+0x14b8>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fd ff68 	bl	8000298 <__aeabi_dsub>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7fe fbdc 	bl	8000b8c <__aeabi_d2f>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4a8c      	ldr	r2, [pc, #560]	; (8002608 <main+0x14c8>)
 80023d8:	6013      	str	r3, [r2, #0]
								if(f<0)
 80023da:	4b8b      	ldr	r3, [pc, #556]	; (8002608 <main+0x14c8>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	d503      	bpl.n	80023f2 <main+0x12b2>
								{
									f = 0;
 80023ea:	4b87      	ldr	r3, [pc, #540]	; (8002608 <main+0x14c8>)
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
								}
								STATE_Display = StateDisplay_Menu3_Print;
 80023f2:	4b87      	ldr	r3, [pc, #540]	; (8002610 <main+0x14d0>)
 80023f4:	2228      	movs	r2, #40	; 0x28
 80023f6:	601a      	str	r2, [r3, #0]
								break;
 80023f8:	e0f9      	b.n	80025ee <main+0x14ae>
							  }
							  case '3':
								vh+=0.1;
 80023fa:	4b86      	ldr	r3, [pc, #536]	; (8002614 <main+0x14d4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f8aa 	bl	8000558 <__aeabi_f2d>
 8002404:	a37c      	add	r3, pc, #496	; (adr r3, 80025f8 <main+0x14b8>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fd ff47 	bl	800029c <__adddf3>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe fbb9 	bl	8000b8c <__aeabi_d2f>
 800241a:	4603      	mov	r3, r0
 800241c:	4a7d      	ldr	r2, [pc, #500]	; (8002614 <main+0x14d4>)
 800241e:	6013      	str	r3, [r2, #0]
								if (vh>=3.3)
 8002420:	4b7c      	ldr	r3, [pc, #496]	; (8002614 <main+0x14d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f897 	bl	8000558 <__aeabi_f2d>
 800242a:	a375      	add	r3, pc, #468	; (adr r3, 8002600 <main+0x14c0>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fe fb70 	bl	8000b14 <__aeabi_dcmpge>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <main+0x1300>
									vh = 3.3;
 800243a:	4b76      	ldr	r3, [pc, #472]	; (8002614 <main+0x14d4>)
 800243c:	4a76      	ldr	r2, [pc, #472]	; (8002618 <main+0x14d8>)
 800243e:	601a      	str	r2, [r3, #0]
								STATE_Display = StateDisplay_Menu3_Print;
 8002440:	4b73      	ldr	r3, [pc, #460]	; (8002610 <main+0x14d0>)
 8002442:	2228      	movs	r2, #40	; 0x28
 8002444:	601a      	str	r2, [r3, #0]
								break;
 8002446:	e0d2      	b.n	80025ee <main+0x14ae>
							  case '4':
								vh-=0.1;
 8002448:	4b72      	ldr	r3, [pc, #456]	; (8002614 <main+0x14d4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f883 	bl	8000558 <__aeabi_f2d>
 8002452:	a369      	add	r3, pc, #420	; (adr r3, 80025f8 <main+0x14b8>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fd ff1e 	bl	8000298 <__aeabi_dsub>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f7fe fb92 	bl	8000b8c <__aeabi_d2f>
 8002468:	4603      	mov	r3, r0
 800246a:	4a6a      	ldr	r2, [pc, #424]	; (8002614 <main+0x14d4>)
 800246c:	6013      	str	r3, [r2, #0]
								if (vh<=0.1)
 800246e:	4b69      	ldr	r3, [pc, #420]	; (8002614 <main+0x14d4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f870 	bl	8000558 <__aeabi_f2d>
 8002478:	a35f      	add	r3, pc, #380	; (adr r3, 80025f8 <main+0x14b8>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fe fb3f 	bl	8000b00 <__aeabi_dcmple>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <main+0x134e>
									vh = 0.1;
 8002488:	4b62      	ldr	r3, [pc, #392]	; (8002614 <main+0x14d4>)
 800248a:	4a64      	ldr	r2, [pc, #400]	; (800261c <main+0x14dc>)
 800248c:	601a      	str	r2, [r3, #0]
								STATE_Display = StateDisplay_Menu3_Print;
 800248e:	4b60      	ldr	r3, [pc, #384]	; (8002610 <main+0x14d0>)
 8002490:	2228      	movs	r2, #40	; 0x28
 8002492:	601a      	str	r2, [r3, #0]
								break;
 8002494:	e0ab      	b.n	80025ee <main+0x14ae>
							  case '5':
								vl+=0.1;
 8002496:	4b62      	ldr	r3, [pc, #392]	; (8002620 <main+0x14e0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f85c 	bl	8000558 <__aeabi_f2d>
 80024a0:	a355      	add	r3, pc, #340	; (adr r3, 80025f8 <main+0x14b8>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fd fef9 	bl	800029c <__adddf3>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f7fe fb6b 	bl	8000b8c <__aeabi_d2f>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4a59      	ldr	r2, [pc, #356]	; (8002620 <main+0x14e0>)
 80024ba:	6013      	str	r3, [r2, #0]
								if (vl>=vh-0.1)
 80024bc:	4b58      	ldr	r3, [pc, #352]	; (8002620 <main+0x14e0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe f849 	bl	8000558 <__aeabi_f2d>
 80024c6:	4604      	mov	r4, r0
 80024c8:	460d      	mov	r5, r1
 80024ca:	4b52      	ldr	r3, [pc, #328]	; (8002614 <main+0x14d4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f842 	bl	8000558 <__aeabi_f2d>
 80024d4:	a348      	add	r3, pc, #288	; (adr r3, 80025f8 <main+0x14b8>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fd fedd 	bl	8000298 <__aeabi_dsub>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fe fb15 	bl	8000b14 <__aeabi_dcmpge>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d012      	beq.n	8002516 <main+0x13d6>
									vl = vh-0.1;
 80024f0:	4b48      	ldr	r3, [pc, #288]	; (8002614 <main+0x14d4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f82f 	bl	8000558 <__aeabi_f2d>
 80024fa:	a33f      	add	r3, pc, #252	; (adr r3, 80025f8 <main+0x14b8>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fd feca 	bl	8000298 <__aeabi_dsub>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe fb3e 	bl	8000b8c <__aeabi_d2f>
 8002510:	4603      	mov	r3, r0
 8002512:	4a43      	ldr	r2, [pc, #268]	; (8002620 <main+0x14e0>)
 8002514:	6013      	str	r3, [r2, #0]
								STATE_Display = StateDisplay_Menu3_Print;
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <main+0x14d0>)
 8002518:	2228      	movs	r2, #40	; 0x28
 800251a:	601a      	str	r2, [r3, #0]
								break;
 800251c:	e067      	b.n	80025ee <main+0x14ae>
							  case '6':
								vl-=0.1;
 800251e:	4b40      	ldr	r3, [pc, #256]	; (8002620 <main+0x14e0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f818 	bl	8000558 <__aeabi_f2d>
 8002528:	a333      	add	r3, pc, #204	; (adr r3, 80025f8 <main+0x14b8>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fd feb3 	bl	8000298 <__aeabi_dsub>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f7fe fb27 	bl	8000b8c <__aeabi_d2f>
 800253e:	4603      	mov	r3, r0
 8002540:	4a37      	ldr	r2, [pc, #220]	; (8002620 <main+0x14e0>)
 8002542:	6013      	str	r3, [r2, #0]
								if (vl<=0)
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <main+0x14e0>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	d803      	bhi.n	800255c <main+0x141c>
									vl = 0;
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <main+0x14e0>)
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
								STATE_Display = StateDisplay_Menu3_Print;
 800255c:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <main+0x14d0>)
 800255e:	2228      	movs	r2, #40	; 0x28
 8002560:	601a      	str	r2, [r3, #0]
								break;
 8002562:	e044      	b.n	80025ee <main+0x14ae>
							  case '7':
								Duty+=5;
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <main+0x14e4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3305      	adds	r3, #5
 800256a:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <main+0x14e4>)
 800256c:	6013      	str	r3, [r2, #0]
								if (Duty>=100)
 800256e:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <main+0x14e4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b63      	cmp	r3, #99	; 0x63
 8002574:	dd02      	ble.n	800257c <main+0x143c>
									Duty = 100;
 8002576:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <main+0x14e4>)
 8002578:	2264      	movs	r2, #100	; 0x64
 800257a:	601a      	str	r2, [r3, #0]
								STATE_Display = StateDisplay_Menu3_Print;
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <main+0x14d0>)
 800257e:	2228      	movs	r2, #40	; 0x28
 8002580:	601a      	str	r2, [r3, #0]
								break;
 8002582:	e034      	b.n	80025ee <main+0x14ae>
							  case '8':
								Duty-=5;
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <main+0x14e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3b05      	subs	r3, #5
 800258a:	4a26      	ldr	r2, [pc, #152]	; (8002624 <main+0x14e4>)
 800258c:	6013      	str	r3, [r2, #0]
								if (Duty<=0)
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <main+0x14e4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	dc02      	bgt.n	800259c <main+0x145c>
									Duty = 0;
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <main+0x14e4>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
								STATE_Display = StateDisplay_Menu3_Print;
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <main+0x14d0>)
 800259e:	2228      	movs	r2, #40	; 0x28
 80025a0:	601a      	str	r2, [r3, #0]
								break;
 80025a2:	e024      	b.n	80025ee <main+0x14ae>
							  case '0': // back to main manu(10)
								STATE_Display = StateDisplay_MenuRoot_Print;
 80025a4:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <main+0x14d0>)
 80025a6:	220a      	movs	r2, #10
 80025a8:	601a      	str	r2, [r3, #0]
								break;
 80025aa:	e020      	b.n	80025ee <main+0x14ae>
							  default: // actully error , you can add error message
							  {
								STATE_Display = StateDisplay_Menu3_Print;
 80025ac:	4b18      	ldr	r3, [pc, #96]	; (8002610 <main+0x14d0>)
 80025ae:	2228      	movs	r2, #40	; 0x28
 80025b0:	601a      	str	r2, [r3, #0]
								char temp[]="////////////Wrong Input////////////\r\n";
 80025b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b6:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <main+0x14e8>)
 80025b8:	461d      	mov	r5, r3
 80025ba:	4614      	mov	r4, r2
 80025bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c8:	6028      	str	r0, [r5, #0]
 80025ca:	3504      	adds	r5, #4
 80025cc:	8029      	strh	r1, [r5, #0]
								HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80025ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd fe04 	bl	80001e0 <strlen>
 80025d8:	4603      	mov	r3, r0
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80025e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e4:	4811      	ldr	r0, [pc, #68]	; (800262c <main+0x14ec>)
 80025e6:	f003 ff20 	bl	800642a <HAL_UART_Transmit>
								break;
 80025ea:	e000      	b.n	80025ee <main+0x14ae>
								break;
 80025ec:	bf00      	nop
							  }
						  }
						  break;
 80025ee:	bf00      	nop
	{
 80025f0:	f7fe bdcd 	b.w	800118e <main+0x4e>
 80025f4:	f3af 8000 	nop.w
 80025f8:	9999999a 	.word	0x9999999a
 80025fc:	3fb99999 	.word	0x3fb99999
 8002600:	66666666 	.word	0x66666666
 8002604:	400a6666 	.word	0x400a6666
 8002608:	20000008 	.word	0x20000008
 800260c:	41200000 	.word	0x41200000
 8002610:	20000100 	.word	0x20000100
 8002614:	2000000c 	.word	0x2000000c
 8002618:	40533333 	.word	0x40533333
 800261c:	3dcccccd 	.word	0x3dcccccd
 8002620:	200000f8 	.word	0x200000f8
 8002624:	20000000 	.word	0x20000000
 8002628:	08008468 	.word	0x08008468
 800262c:	200002b0 	.word	0x200002b0

08002630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b094      	sub	sp, #80	; 0x50
 8002634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002636:	f107 0320 	add.w	r3, r7, #32
 800263a:	2230      	movs	r2, #48	; 0x30
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fd46 	bl	80070d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002644:	f107 030c 	add.w	r3, r7, #12
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <SystemClock_Config+0xc8>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <SystemClock_Config+0xc8>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	6413      	str	r3, [r2, #64]	; 0x40
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <SystemClock_Config+0xc8>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002670:	2300      	movs	r3, #0
 8002672:	607b      	str	r3, [r7, #4]
 8002674:	4b21      	ldr	r3, [pc, #132]	; (80026fc <SystemClock_Config+0xcc>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a20      	ldr	r2, [pc, #128]	; (80026fc <SystemClock_Config+0xcc>)
 800267a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <SystemClock_Config+0xcc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800268c:	2302      	movs	r3, #2
 800268e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002690:	2301      	movs	r3, #1
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002694:	2310      	movs	r3, #16
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002698:	2302      	movs	r3, #2
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800269c:	2300      	movs	r3, #0
 800269e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026a0:	2308      	movs	r3, #8
 80026a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80026a4:	2364      	movs	r3, #100	; 0x64
 80026a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026a8:	2302      	movs	r3, #2
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026ac:	2304      	movs	r3, #4
 80026ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b0:	f107 0320 	add.w	r3, r7, #32
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 f9b7 	bl	8004a28 <HAL_RCC_OscConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026c0:	f000 fac6 	bl	8002c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c4:	230f      	movs	r3, #15
 80026c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c8:	2302      	movs	r3, #2
 80026ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026da:	f107 030c 	add.w	r3, r7, #12
 80026de:	2103      	movs	r1, #3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 fc19 	bl	8004f18 <HAL_RCC_ClockConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80026ec:	f000 fab0 	bl	8002c50 <Error_Handler>
  }
}
 80026f0:	bf00      	nop
 80026f2:	3750      	adds	r7, #80	; 0x50
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40007000 	.word	0x40007000

08002700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002706:	463b      	mov	r3, r7
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <MX_ADC1_Init+0x9c>)
 8002714:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <MX_ADC1_Init+0xa0>)
 8002716:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <MX_ADC1_Init+0x9c>)
 800271a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800271e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <MX_ADC1_Init+0x9c>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <MX_ADC1_Init+0x9c>)
 8002728:	2201      	movs	r2, #1
 800272a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <MX_ADC1_Init+0x9c>)
 800272e:	2200      	movs	r2, #0
 8002730:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <MX_ADC1_Init+0x9c>)
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <MX_ADC1_Init+0x9c>)
 800273c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <MX_ADC1_Init+0x9c>)
 8002744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <MX_ADC1_Init+0x9c>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <MX_ADC1_Init+0x9c>)
 8002752:	2201      	movs	r2, #1
 8002754:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <MX_ADC1_Init+0x9c>)
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <MX_ADC1_Init+0x9c>)
 8002760:	2200      	movs	r2, #0
 8002762:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002764:	480d      	ldr	r0, [pc, #52]	; (800279c <MX_ADC1_Init+0x9c>)
 8002766:	f000 fd3f 	bl	80031e8 <HAL_ADC_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002770:	f000 fa6e 	bl	8002c50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002774:	2300      	movs	r3, #0
 8002776:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002778:	2301      	movs	r3, #1
 800277a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002780:	463b      	mov	r3, r7
 8002782:	4619      	mov	r1, r3
 8002784:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_ADC1_Init+0x9c>)
 8002786:	f000 ffcb 	bl	8003720 <HAL_ADC_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002790:	f000 fa5e 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200001c0 	.word	0x200001c0
 80027a0:	40012000 	.word	0x40012000

080027a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <MX_SPI3_Init+0x68>)
 80027aa:	4a19      	ldr	r2, [pc, #100]	; (8002810 <MX_SPI3_Init+0x6c>)
 80027ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <MX_SPI3_Init+0x68>)
 80027b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <MX_SPI3_Init+0x68>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <MX_SPI3_Init+0x68>)
 80027be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_SPI3_Init+0x68>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ca:	4b10      	ldr	r3, [pc, #64]	; (800280c <MX_SPI3_Init+0x68>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <MX_SPI3_Init+0x68>)
 80027d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <MX_SPI3_Init+0x68>)
 80027da:	2220      	movs	r2, #32
 80027dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <MX_SPI3_Init+0x68>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_SPI3_Init+0x68>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <MX_SPI3_Init+0x68>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <MX_SPI3_Init+0x68>)
 80027f2:	220a      	movs	r2, #10
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_SPI3_Init+0x68>)
 80027f8:	f002 fd8a 	bl	8005310 <HAL_SPI_Init>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8002802:	f000 fa25 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000168 	.word	0x20000168
 8002810:	40003c00 	.word	0x40003c00

08002814 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281a:	f107 0308 	add.w	r3, r7, #8
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
 8002824:	609a      	str	r2, [r3, #8]
 8002826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002828:	463b      	mov	r3, r7
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002830:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <MX_TIM3_Init+0x90>)
 8002832:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <MX_TIM3_Init+0x94>)
 8002834:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8002836:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <MX_TIM3_Init+0x90>)
 8002838:	2264      	movs	r2, #100	; 0x64
 800283a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <MX_TIM3_Init+0x90>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <MX_TIM3_Init+0x90>)
 8002844:	2264      	movs	r2, #100	; 0x64
 8002846:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <MX_TIM3_Init+0x90>)
 800284a:	2200      	movs	r2, #0
 800284c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <MX_TIM3_Init+0x90>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002854:	4813      	ldr	r0, [pc, #76]	; (80028a4 <MX_TIM3_Init+0x90>)
 8002856:	f003 f8ff 	bl	8005a58 <HAL_TIM_Base_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002860:	f000 f9f6 	bl	8002c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002868:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800286a:	f107 0308 	add.w	r3, r7, #8
 800286e:	4619      	mov	r1, r3
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <MX_TIM3_Init+0x90>)
 8002872:	f003 fb05 	bl	8005e80 <HAL_TIM_ConfigClockSource>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800287c:	f000 f9e8 	bl	8002c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002880:	2320      	movs	r3, #32
 8002882:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002888:	463b      	mov	r3, r7
 800288a:	4619      	mov	r1, r3
 800288c:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_TIM3_Init+0x90>)
 800288e:	f003 fcfd 	bl	800628c <HAL_TIMEx_MasterConfigSynchronization>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002898:	f000 f9da 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000120 	.word	0x20000120
 80028a8:	40000400 	.word	0x40000400

080028ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_TIM11_Init+0x40>)
 80028b2:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <MX_TIM11_Init+0x44>)
 80028b4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <MX_TIM11_Init+0x40>)
 80028b8:	2264      	movs	r2, #100	; 0x64
 80028ba:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_TIM11_Init+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <MX_TIM11_Init+0x40>)
 80028c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028c8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_TIM11_Init+0x40>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_TIM11_Init+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_TIM11_Init+0x40>)
 80028d8:	f003 f8be 	bl	8005a58 <HAL_TIM_Base_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80028e2:	f000 f9b5 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000208 	.word	0x20000208
 80028f0:	40014800 	.word	0x40014800

080028f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <MX_USART2_UART_Init+0x50>)
 80028fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 800291a:	220c      	movs	r2, #12
 800291c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291e:	4b08      	ldr	r3, [pc, #32]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800292a:	4805      	ldr	r0, [pc, #20]	; (8002940 <MX_USART2_UART_Init+0x4c>)
 800292c:	f003 fd30 	bl	8006390 <HAL_UART_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002936:	f000 f98b 	bl	8002c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200002b0 	.word	0x200002b0
 8002944:	40004400 	.word	0x40004400

08002948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_DMA_Init+0x3c>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <MX_DMA_Init+0x3c>)
 8002958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_DMA_Init+0x3c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800296a:	2200      	movs	r2, #0
 800296c:	2100      	movs	r1, #0
 800296e:	2038      	movs	r0, #56	; 0x38
 8002970:	f001 fa6b 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002974:	2038      	movs	r0, #56	; 0x38
 8002976:	f001 fa84 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b44      	ldr	r3, [pc, #272]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4a43      	ldr	r2, [pc, #268]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a3c      	ldr	r2, [pc, #240]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a35      	ldr	r2, [pc, #212]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a2e      	ldr	r2, [pc, #184]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <MX_GPIO_Init+0x12c>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2120      	movs	r1, #32
 8002a12:	4829      	ldr	r0, [pc, #164]	; (8002ab8 <MX_GPIO_Init+0x130>)
 8002a14:	f001 ffee 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a1e:	4827      	ldr	r0, [pc, #156]	; (8002abc <MX_GPIO_Init+0x134>)
 8002a20:	f001 ffe8 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	2180      	movs	r1, #128	; 0x80
 8002a28:	4825      	ldr	r0, [pc, #148]	; (8002ac0 <MX_GPIO_Init+0x138>)
 8002a2a:	f001 ffe3 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a34:	4820      	ldr	r0, [pc, #128]	; (8002ab8 <MX_GPIO_Init+0x130>)
 8002a36:	f001 ffdd 	bl	80049f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <MX_GPIO_Init+0x13c>)
 8002a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	481c      	ldr	r0, [pc, #112]	; (8002ac0 <MX_GPIO_Init+0x138>)
 8002a50:	f001 fe34 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002a54:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4812      	ldr	r0, [pc, #72]	; (8002ab8 <MX_GPIO_Init+0x130>)
 8002a6e:	f001 fe25 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8002a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	480c      	ldr	r0, [pc, #48]	; (8002abc <MX_GPIO_Init+0x134>)
 8002a8c:	f001 fe16 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a94:	2301      	movs	r3, #1
 8002a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8002aa0:	f107 0314 	add.w	r3, r7, #20
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <MX_GPIO_Init+0x138>)
 8002aa8:	f001 fe08 	bl	80046bc <HAL_GPIO_Init>

}
 8002aac:	bf00      	nop
 8002aae:	3728      	adds	r7, #40	; 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	10210000 	.word	0x10210000

08002ac8 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002ad8:	88bb      	ldrh	r3, [r7, #4]
 8002ada:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	031b      	lsls	r3, r3, #12
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aee:	4807      	ldr	r0, [pc, #28]	; (8002b0c <MCP4922SetOutput+0x44>)
 8002af0:	f001 ff80 	bl	80049f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	2201      	movs	r2, #1
 8002afa:	4619      	mov	r1, r3
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <MCP4922SetOutput+0x48>)
 8002afe:	f002 fc91 	bl	8005424 <HAL_SPI_Transmit_IT>
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	20000168 	.word	0x20000168

08002b14 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <HAL_SPI_TxCpltCallback+0x24>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d105      	bne.n	8002b30 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b2a:	4804      	ldr	r0, [pc, #16]	; (8002b3c <HAL_SPI_TxCpltCallback+0x28>)
 8002b2c:	f001 ff62 	bl	80049f4 <HAL_GPIO_WritePin>
	}
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000168 	.word	0x20000168
 8002b3c:	40020400 	.word	0x40020400

08002b40 <UARTRecieveIT>:
int16_t UARTRecieveIT()
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8002b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b4a:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <UARTRecieveIT+0x54>)
 8002b4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b50:	461a      	mov	r2, r3
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <UARTRecieveIT+0x54>)
 8002b54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <UARTRecieveIT+0x58>)
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d010      	beq.n	8002b84 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <UARTRecieveIT+0x58>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <UARTRecieveIT+0x5c>)
 8002b68:	5cd3      	ldrb	r3, [r2, r3]
 8002b6a:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <UARTRecieveIT+0x58>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <UARTRecieveIT+0x54>)
 8002b74:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002b76:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b7a:	fb02 f201 	mul.w	r2, r2, r1
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <UARTRecieveIT+0x58>)
 8002b82:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	200002b0 	.word	0x200002b0
 8002b98:	20000110 	.word	0x20000110
 8002b9c:	200000d8 	.word	0x200000d8

08002ba0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8002ba8:	4a09      	ldr	r2, [pc, #36]	; (8002bd0 <HAL_UART_RxCpltCallback+0x30>)
 8002baa:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <HAL_UART_RxCpltCallback+0x34>)
 8002bac:	480a      	ldr	r0, [pc, #40]	; (8002bd8 <HAL_UART_RxCpltCallback+0x38>)
 8002bae:	f004 fa97 	bl	80070e0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002bb2:	4809      	ldr	r0, [pc, #36]	; (8002bd8 <HAL_UART_RxCpltCallback+0x38>)
 8002bb4:	f7fd fb14 	bl	80001e0 <strlen>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bc0:	4905      	ldr	r1, [pc, #20]	; (8002bd8 <HAL_UART_RxCpltCallback+0x38>)
 8002bc2:	4806      	ldr	r0, [pc, #24]	; (8002bdc <HAL_UART_RxCpltCallback+0x3c>)
 8002bc4:	f003 fc31 	bl	800642a <HAL_UART_Transmit>
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200000d8 	.word	0x200000d8
 8002bd4:	080087c4 	.word	0x080087c4
 8002bd8:	200000b8 	.word	0x200000b8
 8002bdc:	200002b0 	.word	0x200002b0

08002be0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b4b0      	push	{r4, r5, r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10c      	bne.n	8002c0a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	1814      	adds	r4, r2, r0
 8002c00:	eb43 0501 	adc.w	r5, r3, r1
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002c06:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bcb0      	pop	{r4, r5, r7}
 8002c12:	4770      	bx	lr
 8002c14:	20000208 	.word	0x20000208
 8002c18:	200000a8 	.word	0x200000a8

08002c1c <micros>:

inline uint64_t micros()
{
 8002c1c:	b4b0      	push	{r4, r5, r7}
 8002c1e:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <micros+0x2c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	4618      	mov	r0, r3
 8002c28:	f04f 0100 	mov.w	r1, #0
 8002c2c:	4b07      	ldr	r3, [pc, #28]	; (8002c4c <micros+0x30>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	1884      	adds	r4, r0, r2
 8002c34:	eb41 0503 	adc.w	r5, r1, r3
 8002c38:	4622      	mov	r2, r4
 8002c3a:	462b      	mov	r3, r5
}
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bcb0      	pop	{r4, r5, r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000208 	.word	0x20000208
 8002c4c:	200000a8 	.word	0x200000a8

08002c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c58:	e7fe      	b.n	8002c58 <Error_Handler+0x8>
	...

08002c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c9a:	2007      	movs	r0, #7
 8002c9c:	f001 f8ca 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a33      	ldr	r2, [pc, #204]	; (8002d98 <HAL_ADC_MspInit+0xec>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d15f      	bne.n	8002d8e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <HAL_ADC_MspInit+0xf0>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	4a31      	ldr	r2, [pc, #196]	; (8002d9c <HAL_ADC_MspInit+0xf0>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cde:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_ADC_MspInit+0xf0>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_ADC_MspInit+0xf0>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <HAL_ADC_MspInit+0xf0>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_ADC_MspInit+0xf0>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d06:	2301      	movs	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	f107 0314 	add.w	r3, r7, #20
 8002d16:	4619      	mov	r1, r3
 8002d18:	4821      	ldr	r0, [pc, #132]	; (8002da0 <HAL_ADC_MspInit+0xf4>)
 8002d1a:	f001 fccf 	bl	80046bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d20:	4a21      	ldr	r2, [pc, #132]	; (8002da8 <HAL_ADC_MspInit+0xfc>)
 8002d22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d24:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d62:	4810      	ldr	r0, [pc, #64]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d64:	f001 f8a8 	bl	8003eb8 <HAL_DMA_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002d6e:	f7ff ff6f 	bl	8002c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
 8002d78:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <HAL_ADC_MspInit+0xf8>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	2012      	movs	r0, #18
 8002d84:	f001 f861 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002d88:	2012      	movs	r0, #18
 8002d8a:	f001 f87a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d8e:	bf00      	nop
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40012000 	.word	0x40012000
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40020000 	.word	0x40020000
 8002da4:	20000250 	.word	0x20000250
 8002da8:	40026410 	.word	0x40026410

08002dac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_SPI_MspInit+0x94>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d133      	bne.n	8002e36 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_SPI_MspInit+0x98>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a1b      	ldr	r2, [pc, #108]	; (8002e44 <HAL_SPI_MspInit+0x98>)
 8002dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_SPI_MspInit+0x98>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_SPI_MspInit+0x98>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a14      	ldr	r2, [pc, #80]	; (8002e44 <HAL_SPI_MspInit+0x98>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_SPI_MspInit+0x98>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e06:	2338      	movs	r3, #56	; 0x38
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e16:	2306      	movs	r3, #6
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4809      	ldr	r0, [pc, #36]	; (8002e48 <HAL_SPI_MspInit+0x9c>)
 8002e22:	f001 fc4b 	bl	80046bc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2033      	movs	r0, #51	; 0x33
 8002e2c:	f001 f80d 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002e30:	2033      	movs	r0, #51	; 0x33
 8002e32:	f001 f826 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	; 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40003c00 	.word	0x40003c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020400 	.word	0x40020400

08002e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_TIM_Base_MspInit+0x70>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10e      	bne.n	8002e7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_TIM_Base_MspInit+0x74>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_TIM_Base_MspInit+0x74>)
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_TIM_Base_MspInit+0x74>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002e7a:	e01a      	b.n	8002eb2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <HAL_TIM_Base_MspInit+0x78>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d115      	bne.n	8002eb2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_TIM_Base_MspInit+0x74>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <HAL_TIM_Base_MspInit+0x74>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_TIM_Base_MspInit+0x74>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	201a      	movs	r0, #26
 8002ea8:	f000 ffcf 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002eac:	201a      	movs	r0, #26
 8002eae:	f000 ffe8 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40014800 	.word	0x40014800

08002ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1d      	ldr	r2, [pc, #116]	; (8002f5c <HAL_UART_MspInit+0x94>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d133      	bne.n	8002f52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <HAL_UART_MspInit+0x98>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a1b      	ldr	r2, [pc, #108]	; (8002f60 <HAL_UART_MspInit+0x98>)
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_UART_MspInit+0x98>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_UART_MspInit+0x98>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <HAL_UART_MspInit+0x98>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_UART_MspInit+0x98>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f22:	230c      	movs	r3, #12
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f32:	2307      	movs	r3, #7
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4809      	ldr	r0, [pc, #36]	; (8002f64 <HAL_UART_MspInit+0x9c>)
 8002f3e:	f001 fbbd 	bl	80046bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2100      	movs	r1, #0
 8002f46:	2026      	movs	r0, #38	; 0x26
 8002f48:	f000 ff7f 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f4c:	2026      	movs	r0, #38	; 0x26
 8002f4e:	f000 ff98 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40020000 	.word	0x40020000

08002f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f6c:	e7fe      	b.n	8002f6c <NMI_Handler+0x4>

08002f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f72:	e7fe      	b.n	8002f72 <HardFault_Handler+0x4>

08002f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <MemManage_Handler+0x4>

08002f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <BusFault_Handler+0x4>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <UsageFault_Handler+0x4>

08002f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb4:	f000 f8f8 	bl	80031a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <ADC_IRQHandler+0x10>)
 8002fc2:	f000 f954 	bl	800326e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200001c0 	.word	0x200001c0

08002fd0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002fd6:	f002 fe4b 	bl	8005c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000208 	.word	0x20000208

08002fe4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <USART2_IRQHandler+0x10>)
 8002fea:	f003 fae1 	bl	80065b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200002b0 	.word	0x200002b0

08002ff8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <SPI3_IRQHandler+0x10>)
 8002ffe:	f002 fa9b 	bl	8005538 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000168 	.word	0x20000168

0800300c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <DMA2_Stream0_IRQHandler+0x10>)
 8003012:	f001 f8e9 	bl	80041e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000250 	.word	0x20000250

08003020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_sbrk+0x5c>)
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_sbrk+0x60>)
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003050:	f004 f806 	bl	8007060 <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <_sbrk+0x64>)
 8003070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20020000 	.word	0x20020000
 8003080:	00000400 	.word	0x00000400
 8003084:	20000114 	.word	0x20000114
 8003088:	20000308 	.word	0x20000308

0800308c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <SystemInit+0x20>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	4a05      	ldr	r2, [pc, #20]	; (80030ac <SystemInit+0x20>)
 8003098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030b4:	480d      	ldr	r0, [pc, #52]	; (80030ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030b6:	490e      	ldr	r1, [pc, #56]	; (80030f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030b8:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030bc:	e002      	b.n	80030c4 <LoopCopyDataInit>

080030be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c2:	3304      	adds	r3, #4

080030c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c8:	d3f9      	bcc.n	80030be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ca:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030cc:	4c0b      	ldr	r4, [pc, #44]	; (80030fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d0:	e001      	b.n	80030d6 <LoopFillZerobss>

080030d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d4:	3204      	adds	r2, #4

080030d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030da:	f7ff ffd7 	bl	800308c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030de:	f003 ffc5 	bl	800706c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030e2:	f7fe f82d 	bl	8001140 <main>
  bx  lr    
 80030e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80030f4:	08008c08 	.word	0x08008c08
  ldr r2, =_sbss
 80030f8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80030fc:	20000308 	.word	0x20000308

08003100 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003100:	e7fe      	b.n	8003100 <DMA1_Stream0_IRQHandler>
	...

08003104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_Init+0x40>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <HAL_Init+0x40>)
 800310e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_Init+0x40>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_Init+0x40>)
 800311a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800311e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_Init+0x40>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_Init+0x40>)
 8003126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312c:	2003      	movs	r0, #3
 800312e:	f000 fe81 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003132:	2000      	movs	r0, #0
 8003134:	f000 f808 	bl	8003148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003138:	f7ff fd90 	bl	8002c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40023c00 	.word	0x40023c00

08003148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003150:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_InitTick+0x54>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_InitTick+0x58>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800315e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fe99 	bl	8003e9e <HAL_SYSTICK_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e00e      	b.n	8003194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b0f      	cmp	r3, #15
 800317a:	d80a      	bhi.n	8003192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800317c:	2200      	movs	r2, #0
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	f000 fe61 	bl	8003e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003188:	4a06      	ldr	r2, [pc, #24]	; (80031a4 <HAL_InitTick+0x5c>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e000      	b.n	8003194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000014 	.word	0x20000014
 80031a0:	2000001c 	.word	0x2000001c
 80031a4:	20000018 	.word	0x20000018

080031a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_IncTick+0x20>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_IncTick+0x24>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_IncTick+0x24>)
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	2000001c 	.word	0x2000001c
 80031cc:	200002f4 	.word	0x200002f4

080031d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_GetTick+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	200002f4 	.word	0x200002f4

080031e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e033      	b.n	8003266 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff fd50 	bl	8002cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800322e:	f023 0302 	bic.w	r3, r3, #2
 8003232:	f043 0202 	orr.w	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fba2 	bl	8003984 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f023 0303 	bic.w	r3, r3, #3
 800324e:	f043 0201 	orr.w	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
 8003256:	e001      	b.n	800325c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b02      	cmp	r3, #2
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b20      	cmp	r3, #32
 80032a0:	bf0c      	ite	eq
 80032a2:	2301      	moveq	r3, #1
 80032a4:	2300      	movne	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d049      	beq.n	8003344 <HAL_ADC_IRQHandler+0xd6>
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d046      	beq.n	8003344 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d12b      	bne.n	8003334 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d127      	bne.n	8003334 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d119      	bne.n	8003334 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0220 	bic.w	r2, r2, #32
 800330e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d105      	bne.n	8003334 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f9cb 	bl	80036d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f06f 0212 	mvn.w	r2, #18
 8003342:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b80      	cmp	r3, #128	; 0x80
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d057      	beq.n	8003426 <HAL_ADC_IRQHandler+0x1b8>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d054      	beq.n	8003426 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d139      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d12b      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d124      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11d      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d119      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033f0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fc32 	bl	8003c80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 020c 	mvn.w	r2, #12
 8003424:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b01      	cmp	r3, #1
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d017      	beq.n	8003488 <HAL_ADC_IRQHandler+0x21a>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d014      	beq.n	8003488 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d10d      	bne.n	8003488 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f93d 	bl	80036f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0201 	mvn.w	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b20      	cmp	r3, #32
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d015      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x27a>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f043 0202 	orr.w	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0220 	mvn.w	r2, #32
 80034d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f917 	bl	800370c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f06f 0220 	mvn.w	r2, #32
 80034e6:	601a      	str	r2, [r3, #0]
  }
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_ADC_Start_DMA+0x1e>
 800350a:	2302      	movs	r3, #2
 800350c:	e0ce      	b.n	80036ac <HAL_ADC_Start_DMA+0x1bc>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b01      	cmp	r3, #1
 8003522:	d018      	beq.n	8003556 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003534:	4b5f      	ldr	r3, [pc, #380]	; (80036b4 <HAL_ADC_Start_DMA+0x1c4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a5f      	ldr	r2, [pc, #380]	; (80036b8 <HAL_ADC_Start_DMA+0x1c8>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0c9a      	lsrs	r2, r3, #18
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003548:	e002      	b.n	8003550 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	3b01      	subs	r3, #1
 800354e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f9      	bne.n	800354a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003564:	d107      	bne.n	8003576 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003574:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	f040 8086 	bne.w	8003692 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d106      	bne.n	80035d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f023 0206 	bic.w	r2, r3, #6
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
 80035d2:	e002      	b.n	80035da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035e2:	4b36      	ldr	r3, [pc, #216]	; (80036bc <HAL_ADC_Start_DMA+0x1cc>)
 80035e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	4a35      	ldr	r2, [pc, #212]	; (80036c0 <HAL_ADC_Start_DMA+0x1d0>)
 80035ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	4a34      	ldr	r2, [pc, #208]	; (80036c4 <HAL_ADC_Start_DMA+0x1d4>)
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <HAL_ADC_Start_DMA+0x1d8>)
 80035fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003606:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003616:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003626:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	334c      	adds	r3, #76	; 0x4c
 8003632:	4619      	mov	r1, r3
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f000 fcec 	bl	8004014 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10f      	bne.n	8003668 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d129      	bne.n	80036aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003664:	609a      	str	r2, [r3, #8]
 8003666:	e020      	b.n	80036aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_ADC_Start_DMA+0x1dc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d11b      	bne.n	80036aa <HAL_ADC_Start_DMA+0x1ba>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d114      	bne.n	80036aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	e00b      	b.n	80036aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f043 0210 	orr.w	r2, r3, #16
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f043 0201 	orr.w	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20000014 	.word	0x20000014
 80036b8:	431bde83 	.word	0x431bde83
 80036bc:	40012300 	.word	0x40012300
 80036c0:	08003b7d 	.word	0x08003b7d
 80036c4:	08003c37 	.word	0x08003c37
 80036c8:	08003c53 	.word	0x08003c53
 80036cc:	40012000 	.word	0x40012000

080036d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_ADC_ConfigChannel+0x1c>
 8003738:	2302      	movs	r3, #2
 800373a:	e113      	b.n	8003964 <HAL_ADC_ConfigChannel+0x244>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b09      	cmp	r3, #9
 800374a:	d925      	bls.n	8003798 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68d9      	ldr	r1, [r3, #12]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	3b1e      	subs	r3, #30
 8003762:	2207      	movs	r2, #7
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43da      	mvns	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	400a      	ands	r2, r1
 8003770:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68d9      	ldr	r1, [r3, #12]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	4618      	mov	r0, r3
 8003784:	4603      	mov	r3, r0
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4403      	add	r3, r0
 800378a:	3b1e      	subs	r3, #30
 800378c:	409a      	lsls	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	e022      	b.n	80037de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6919      	ldr	r1, [r3, #16]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	2207      	movs	r2, #7
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	400a      	ands	r2, r1
 80037ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6919      	ldr	r1, [r3, #16]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	4618      	mov	r0, r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4403      	add	r3, r0
 80037d4:	409a      	lsls	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b06      	cmp	r3, #6
 80037e4:	d824      	bhi.n	8003830 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685a      	ldr	r2, [r3, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	3b05      	subs	r3, #5
 80037f8:	221f      	movs	r2, #31
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43da      	mvns	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	400a      	ands	r2, r1
 8003806:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	4618      	mov	r0, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	3b05      	subs	r3, #5
 8003822:	fa00 f203 	lsl.w	r2, r0, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	635a      	str	r2, [r3, #52]	; 0x34
 800382e:	e04c      	b.n	80038ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d824      	bhi.n	8003882 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	3b23      	subs	r3, #35	; 0x23
 800384a:	221f      	movs	r2, #31
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43da      	mvns	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	400a      	ands	r2, r1
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	4618      	mov	r0, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	3b23      	subs	r3, #35	; 0x23
 8003874:	fa00 f203 	lsl.w	r2, r0, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
 8003880:	e023      	b.n	80038ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	3b41      	subs	r3, #65	; 0x41
 8003894:	221f      	movs	r2, #31
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	400a      	ands	r2, r1
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4618      	mov	r0, r3
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	3b41      	subs	r3, #65	; 0x41
 80038be:	fa00 f203 	lsl.w	r2, r0, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_ADC_ConfigChannel+0x250>)
 80038cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a28      	ldr	r2, [pc, #160]	; (8003974 <HAL_ADC_ConfigChannel+0x254>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10f      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x1d8>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b12      	cmp	r3, #18
 80038de:	d10b      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <HAL_ADC_ConfigChannel+0x254>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12b      	bne.n	800395a <HAL_ADC_ConfigChannel+0x23a>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <HAL_ADC_ConfigChannel+0x258>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <HAL_ADC_ConfigChannel+0x1f4>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b11      	cmp	r3, #17
 8003912:	d122      	bne.n	800395a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a11      	ldr	r2, [pc, #68]	; (8003978 <HAL_ADC_ConfigChannel+0x258>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d111      	bne.n	800395a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_ADC_ConfigChannel+0x25c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a11      	ldr	r2, [pc, #68]	; (8003980 <HAL_ADC_ConfigChannel+0x260>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	0c9a      	lsrs	r2, r3, #18
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800394c:	e002      	b.n	8003954 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3b01      	subs	r3, #1
 8003952:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f9      	bne.n	800394e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40012300 	.word	0x40012300
 8003974:	40012000 	.word	0x40012000
 8003978:	10000012 	.word	0x10000012
 800397c:	20000014 	.word	0x20000014
 8003980:	431bde83 	.word	0x431bde83

08003984 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800398c:	4b79      	ldr	r3, [pc, #484]	; (8003b74 <ADC_Init+0x1f0>)
 800398e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	021a      	lsls	r2, r3, #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6859      	ldr	r1, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <ADC_Init+0x1f4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6899      	ldr	r1, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	6899      	ldr	r1, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	e00f      	b.n	8003a82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0202 	bic.w	r2, r2, #2
 8003a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6899      	ldr	r1, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	7e1b      	ldrb	r3, [r3, #24]
 8003a9c:	005a      	lsls	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01b      	beq.n	8003ae8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003abe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ace:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	3b01      	subs	r3, #1
 8003adc:	035a      	lsls	r2, r3, #13
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	e007      	b.n	8003af8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	051a      	lsls	r2, r3, #20
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b3a:	025a      	lsls	r2, r3, #9
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6899      	ldr	r1, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	029a      	lsls	r2, r3, #10
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40012300 	.word	0x40012300
 8003b78:	0f000001 	.word	0x0f000001

08003b7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d13c      	bne.n	8003c10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d12b      	bne.n	8003c08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d127      	bne.n	8003c08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d119      	bne.n	8003c08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0220 	bic.w	r2, r2, #32
 8003be2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0201 	orr.w	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fd61 	bl	80036d0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c0e:	e00e      	b.n	8003c2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff fd75 	bl	800370c <HAL_ADC_ErrorCallback>
}
 8003c22:	e004      	b.n	8003c2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff fd4d 	bl	80036e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2240      	movs	r2, #64	; 0x40
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f043 0204 	orr.w	r2, r3, #4
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff fd4a 	bl	800370c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4907      	ldr	r1, [pc, #28]	; (8003d30 <__NVIC_EnableIRQ+0x38>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100

08003d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	490c      	ldr	r1, [pc, #48]	; (8003d80 <__NVIC_SetPriority+0x4c>)
 8003d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d52:	0112      	lsls	r2, r2, #4
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	440b      	add	r3, r1
 8003d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d5c:	e00a      	b.n	8003d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	4908      	ldr	r1, [pc, #32]	; (8003d84 <__NVIC_SetPriority+0x50>)
 8003d64:	79fb      	ldrb	r3, [r7, #7]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3b04      	subs	r3, #4
 8003d6c:	0112      	lsls	r2, r2, #4
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	440b      	add	r3, r1
 8003d72:	761a      	strb	r2, [r3, #24]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000e100 	.word	0xe000e100
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f1c3 0307 	rsb	r3, r3, #7
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	bf28      	it	cs
 8003da6:	2304      	movcs	r3, #4
 8003da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3304      	adds	r3, #4
 8003dae:	2b06      	cmp	r3, #6
 8003db0:	d902      	bls.n	8003db8 <NVIC_EncodePriority+0x30>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3b03      	subs	r3, #3
 8003db6:	e000      	b.n	8003dba <NVIC_EncodePriority+0x32>
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	401a      	ands	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43d9      	mvns	r1, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de0:	4313      	orrs	r3, r2
         );
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3724      	adds	r7, #36	; 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e00:	d301      	bcc.n	8003e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e02:	2301      	movs	r3, #1
 8003e04:	e00f      	b.n	8003e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <SysTick_Config+0x40>)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0e:	210f      	movs	r1, #15
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	f7ff ff8e 	bl	8003d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <SysTick_Config+0x40>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1e:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <SysTick_Config+0x40>)
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000e010 	.word	0xe000e010

08003e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff29 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff3e 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff8e 	bl	8003d88 <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff5d 	bl	8003d34 <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff31 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffa2 	bl	8003df0 <SysTick_Config>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7ff f984 	bl	80031d0 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e099      	b.n	8004008 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef4:	e00f      	b.n	8003f16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ef6:	f7ff f96b 	bl	80031d0 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b05      	cmp	r3, #5
 8003f02:	d908      	bls.n	8003f16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e078      	b.n	8004008 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e8      	bne.n	8003ef6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4b38      	ldr	r3, [pc, #224]	; (8004010 <HAL_DMA_Init+0x158>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d107      	bne.n	8003f80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d117      	bne.n	8003fda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fb01 	bl	80045c4 <DMA_CheckFifoParam>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2240      	movs	r2, #64	; 0x40
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e016      	b.n	8004008 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fab8 	bl	8004558 <DMA_CalcBaseAndBitshift>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	223f      	movs	r2, #63	; 0x3f
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	f010803f 	.word	0xf010803f

08004014 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_DMA_Start_IT+0x26>
 8004036:	2302      	movs	r3, #2
 8004038:	e040      	b.n	80040bc <HAL_DMA_Start_IT+0xa8>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d12f      	bne.n	80040ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2202      	movs	r2, #2
 8004052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fa4a 	bl	80044fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	223f      	movs	r2, #63	; 0x3f
 800406e:	409a      	lsls	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0216 	orr.w	r2, r2, #22
 8004082:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0208 	orr.w	r2, r2, #8
 800409a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0201 	orr.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e005      	b.n	80040ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
 80040b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040d2:	f7ff f87d 	bl	80031d0 <HAL_GetTick>
 80040d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d008      	beq.n	80040f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e052      	b.n	800419c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0216 	bic.w	r2, r2, #22
 8004104:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004114:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_DMA_Abort+0x62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0208 	bic.w	r2, r2, #8
 8004134:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004146:	e013      	b.n	8004170 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004148:	f7ff f842 	bl	80031d0 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b05      	cmp	r3, #5
 8004154:	d90c      	bls.n	8004170 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2203      	movs	r2, #3
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e015      	b.n	800419c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e4      	bne.n	8004148 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	223f      	movs	r2, #63	; 0x3f
 8004184:	409a      	lsls	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d004      	beq.n	80041c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e00c      	b.n	80041dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2205      	movs	r2, #5
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041f4:	4b92      	ldr	r3, [pc, #584]	; (8004440 <HAL_DMA_IRQHandler+0x258>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a92      	ldr	r2, [pc, #584]	; (8004444 <HAL_DMA_IRQHandler+0x25c>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	2208      	movs	r2, #8
 8004214:	409a      	lsls	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01a      	beq.n	8004254 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0204 	bic.w	r2, r2, #4
 800423a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	2208      	movs	r2, #8
 8004242:	409a      	lsls	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d012      	beq.n	800428a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	2201      	movs	r2, #1
 8004278:	409a      	lsls	r2, r3
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f043 0202 	orr.w	r2, r3, #2
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	2204      	movs	r2, #4
 8004290:	409a      	lsls	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	2204      	movs	r2, #4
 80042ae:	409a      	lsls	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	f043 0204 	orr.w	r2, r3, #4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	2210      	movs	r2, #16
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d043      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d03c      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	2210      	movs	r2, #16
 80042e4:	409a      	lsls	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d108      	bne.n	8004318 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d024      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
 8004316:	e01f      	b.n	8004358 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
 8004328:	e016      	b.n	8004358 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0208 	bic.w	r2, r2, #8
 8004346:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	2220      	movs	r2, #32
 800435e:	409a      	lsls	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 808e 	beq.w	8004486 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8086 	beq.w	8004486 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	2220      	movs	r2, #32
 8004380:	409a      	lsls	r2, r3
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b05      	cmp	r3, #5
 8004390:	d136      	bne.n	8004400 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0216 	bic.w	r2, r2, #22
 80043a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x1da>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0208 	bic.w	r2, r2, #8
 80043d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	223f      	movs	r2, #63	; 0x3f
 80043d8:	409a      	lsls	r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d07d      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
        }
        return;
 80043fe:	e078      	b.n	80044f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01c      	beq.n	8004448 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d108      	bne.n	800442e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	2b00      	cmp	r3, #0
 8004422:	d030      	beq.n	8004486 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
 800442c:	e02b      	b.n	8004486 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d027      	beq.n	8004486 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e022      	b.n	8004486 <HAL_DMA_IRQHandler+0x29e>
 8004440:	20000014 	.word	0x20000014
 8004444:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0210 	bic.w	r2, r2, #16
 8004464:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	2b00      	cmp	r3, #0
 800448c:	d032      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d022      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2205      	movs	r2, #5
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d307      	bcc.n	80044ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f2      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x2ca>
 80044cc:	e000      	b.n	80044d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
 80044f0:	e000      	b.n	80044f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044f2:	bf00      	nop
    }
  }
}
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop

080044fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004518:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d108      	bne.n	800453c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800453a:	e007      	b.n	800454c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	3b10      	subs	r3, #16
 8004568:	4a14      	ldr	r2, [pc, #80]	; (80045bc <DMA_CalcBaseAndBitshift+0x64>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d909      	bls.n	800459a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	1d1a      	adds	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	659a      	str	r2, [r3, #88]	; 0x58
 8004598:	e007      	b.n	80045aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	aaaaaaab 	.word	0xaaaaaaab
 80045c0:	080087ec 	.word	0x080087ec

080045c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11f      	bne.n	800461e <DMA_CheckFifoParam+0x5a>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d856      	bhi.n	8004692 <DMA_CheckFifoParam+0xce>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <DMA_CheckFifoParam+0x28>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	0800460f 	.word	0x0800460f
 80045f4:	080045fd 	.word	0x080045fd
 80045f8:	08004693 	.word	0x08004693
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d046      	beq.n	8004696 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460c:	e043      	b.n	8004696 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004616:	d140      	bne.n	800469a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461c:	e03d      	b.n	800469a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004626:	d121      	bne.n	800466c <DMA_CheckFifoParam+0xa8>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b03      	cmp	r3, #3
 800462c:	d837      	bhi.n	800469e <DMA_CheckFifoParam+0xda>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <DMA_CheckFifoParam+0x70>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004645 	.word	0x08004645
 8004638:	0800464b 	.word	0x0800464b
 800463c:	08004645 	.word	0x08004645
 8004640:	0800465d 	.word	0x0800465d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	e030      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d025      	beq.n	80046a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465a:	e022      	b.n	80046a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004664:	d11f      	bne.n	80046a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800466a:	e01c      	b.n	80046a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d903      	bls.n	800467a <DMA_CheckFifoParam+0xb6>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d003      	beq.n	8004680 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004678:	e018      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
      break;
 800467e:	e015      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e00b      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      break;
 8004692:	bf00      	nop
 8004694:	e00a      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
 8004698:	e008      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 800469a:	bf00      	nop
 800469c:	e006      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 800469e:	bf00      	nop
 80046a0:	e004      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;   
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <DMA_CheckFifoParam+0xe8>
      break;
 80046aa:	bf00      	nop
    }
  } 
  
  return status; 
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop

080046bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e159      	b.n	800498c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046d8:	2201      	movs	r2, #1
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	f040 8148 	bne.w	8004986 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d005      	beq.n	800470e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470a:	2b02      	cmp	r3, #2
 800470c:	d130      	bne.n	8004770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	2203      	movs	r2, #3
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4313      	orrs	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004744:	2201      	movs	r2, #1
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 0201 	and.w	r2, r3, #1
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4313      	orrs	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	2b03      	cmp	r3, #3
 800477a:	d017      	beq.n	80047ac <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	2203      	movs	r2, #3
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4013      	ands	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d123      	bne.n	8004800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	08da      	lsrs	r2, r3, #3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3208      	adds	r2, #8
 80047c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	220f      	movs	r2, #15
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	08da      	lsrs	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3208      	adds	r2, #8
 80047fa:	69b9      	ldr	r1, [r7, #24]
 80047fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0203 	and.w	r2, r3, #3
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80a2 	beq.w	8004986 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_GPIO_Init+0x2e8>)
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	4a56      	ldr	r2, [pc, #344]	; (80049a4 <HAL_GPIO_Init+0x2e8>)
 800484c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004850:	6453      	str	r3, [r2, #68]	; 0x44
 8004852:	4b54      	ldr	r3, [pc, #336]	; (80049a4 <HAL_GPIO_Init+0x2e8>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800485e:	4a52      	ldr	r2, [pc, #328]	; (80049a8 <HAL_GPIO_Init+0x2ec>)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	3302      	adds	r3, #2
 8004866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	220f      	movs	r2, #15
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a49      	ldr	r2, [pc, #292]	; (80049ac <HAL_GPIO_Init+0x2f0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d019      	beq.n	80048be <HAL_GPIO_Init+0x202>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a48      	ldr	r2, [pc, #288]	; (80049b0 <HAL_GPIO_Init+0x2f4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_GPIO_Init+0x1fe>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a47      	ldr	r2, [pc, #284]	; (80049b4 <HAL_GPIO_Init+0x2f8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00d      	beq.n	80048b6 <HAL_GPIO_Init+0x1fa>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a46      	ldr	r2, [pc, #280]	; (80049b8 <HAL_GPIO_Init+0x2fc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <HAL_GPIO_Init+0x1f6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a45      	ldr	r2, [pc, #276]	; (80049bc <HAL_GPIO_Init+0x300>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <HAL_GPIO_Init+0x1f2>
 80048aa:	2304      	movs	r3, #4
 80048ac:	e008      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048ae:	2307      	movs	r3, #7
 80048b0:	e006      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048b2:	2303      	movs	r3, #3
 80048b4:	e004      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e002      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_GPIO_Init+0x204>
 80048be:	2300      	movs	r3, #0
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	f002 0203 	and.w	r2, r2, #3
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	4093      	lsls	r3, r2
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048d0:	4935      	ldr	r1, [pc, #212]	; (80049a8 <HAL_GPIO_Init+0x2ec>)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	3302      	adds	r3, #2
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048de:	4b38      	ldr	r3, [pc, #224]	; (80049c0 <HAL_GPIO_Init+0x304>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004902:	4a2f      	ldr	r2, [pc, #188]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004908:	4b2d      	ldr	r3, [pc, #180]	; (80049c0 <HAL_GPIO_Init+0x304>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800492c:	4a24      	ldr	r2, [pc, #144]	; (80049c0 <HAL_GPIO_Init+0x304>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004932:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004956:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800495c:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <HAL_GPIO_Init+0x304>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3301      	adds	r3, #1
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b0f      	cmp	r3, #15
 8004990:	f67f aea2 	bls.w	80046d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	3724      	adds	r7, #36	; 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40013800 	.word	0x40013800
 80049ac:	40020000 	.word	0x40020000
 80049b0:	40020400 	.word	0x40020400
 80049b4:	40020800 	.word	0x40020800
 80049b8:	40020c00 	.word	0x40020c00
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40013c00 	.word	0x40013c00

080049c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e001      	b.n	80049e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
 8004a00:	4613      	mov	r3, r2
 8004a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a04:	787b      	ldrb	r3, [r7, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a10:	e003      	b.n	8004a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a12:	887b      	ldrh	r3, [r7, #2]
 8004a14:	041a      	lsls	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e264      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d075      	beq.n	8004b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a46:	4ba3      	ldr	r3, [pc, #652]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d00c      	beq.n	8004a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a52:	4ba0      	ldr	r3, [pc, #640]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d112      	bne.n	8004a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a5e:	4b9d      	ldr	r3, [pc, #628]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a6a:	d10b      	bne.n	8004a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	4b99      	ldr	r3, [pc, #612]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d05b      	beq.n	8004b30 <HAL_RCC_OscConfig+0x108>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d157      	bne.n	8004b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e23f      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8c:	d106      	bne.n	8004a9c <HAL_RCC_OscConfig+0x74>
 8004a8e:	4b91      	ldr	r3, [pc, #580]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a90      	ldr	r2, [pc, #576]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e01d      	b.n	8004ad8 <HAL_RCC_OscConfig+0xb0>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x98>
 8004aa6:	4b8b      	ldr	r3, [pc, #556]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a8a      	ldr	r2, [pc, #552]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	4b88      	ldr	r3, [pc, #544]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a87      	ldr	r2, [pc, #540]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0xb0>
 8004ac0:	4b84      	ldr	r3, [pc, #528]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a83      	ldr	r2, [pc, #524]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aca:	6013      	str	r3, [r2, #0]
 8004acc:	4b81      	ldr	r3, [pc, #516]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a80      	ldr	r2, [pc, #512]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d013      	beq.n	8004b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fe fb76 	bl	80031d0 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fb72 	bl	80031d0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e204      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b76      	ldr	r3, [pc, #472]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xc0>
 8004b06:	e014      	b.n	8004b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fe fb62 	bl	80031d0 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fe fb5e 	bl	80031d0 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e1f0      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b22:	4b6c      	ldr	r3, [pc, #432]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0xe8>
 8004b2e:	e000      	b.n	8004b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d063      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b3e:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b4a:	4b62      	ldr	r3, [pc, #392]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d11c      	bne.n	8004b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b56:	4b5f      	ldr	r3, [pc, #380]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d116      	bne.n	8004b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b62:	4b5c      	ldr	r3, [pc, #368]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <HAL_RCC_OscConfig+0x152>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d001      	beq.n	8004b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e1c4      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7a:	4b56      	ldr	r3, [pc, #344]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4952      	ldr	r1, [pc, #328]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8e:	e03a      	b.n	8004c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d020      	beq.n	8004bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b98:	4b4f      	ldr	r3, [pc, #316]	; (8004cd8 <HAL_RCC_OscConfig+0x2b0>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9e:	f7fe fb17 	bl	80031d0 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba6:	f7fe fb13 	bl	80031d0 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e1a5      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc4:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4940      	ldr	r1, [pc, #256]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]
 8004bd8:	e015      	b.n	8004c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bda:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <HAL_RCC_OscConfig+0x2b0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fe faf6 	bl	80031d0 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be8:	f7fe faf2 	bl	80031d0 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e184      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfa:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d030      	beq.n	8004c74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d016      	beq.n	8004c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c1a:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <HAL_RCC_OscConfig+0x2b4>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c20:	f7fe fad6 	bl	80031d0 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c28:	f7fe fad2 	bl	80031d0 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e164      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3a:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f0      	beq.n	8004c28 <HAL_RCC_OscConfig+0x200>
 8004c46:	e015      	b.n	8004c74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <HAL_RCC_OscConfig+0x2b4>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4e:	f7fe fabf 	bl	80031d0 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c56:	f7fe fabb 	bl	80031d0 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e14d      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c68:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80a0 	beq.w	8004dc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c82:	2300      	movs	r3, #0
 8004c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10f      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a0e      	ldr	r2, [pc, #56]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <HAL_RCC_OscConfig+0x2ac>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCC_OscConfig+0x2b8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d121      	bne.n	8004d02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cbe:	4b08      	ldr	r3, [pc, #32]	; (8004ce0 <HAL_RCC_OscConfig+0x2b8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a07      	ldr	r2, [pc, #28]	; (8004ce0 <HAL_RCC_OscConfig+0x2b8>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cca:	f7fe fa81 	bl	80031d0 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd0:	e011      	b.n	8004cf6 <HAL_RCC_OscConfig+0x2ce>
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	42470000 	.word	0x42470000
 8004cdc:	42470e80 	.word	0x42470e80
 8004ce0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce4:	f7fe fa74 	bl	80031d0 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e106      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	4b85      	ldr	r3, [pc, #532]	; (8004f0c <HAL_RCC_OscConfig+0x4e4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d106      	bne.n	8004d18 <HAL_RCC_OscConfig+0x2f0>
 8004d0a:	4b81      	ldr	r3, [pc, #516]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0e:	4a80      	ldr	r2, [pc, #512]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6713      	str	r3, [r2, #112]	; 0x70
 8004d16:	e01c      	b.n	8004d52 <HAL_RCC_OscConfig+0x32a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b05      	cmp	r3, #5
 8004d1e:	d10c      	bne.n	8004d3a <HAL_RCC_OscConfig+0x312>
 8004d20:	4b7b      	ldr	r3, [pc, #492]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	4a7a      	ldr	r2, [pc, #488]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d26:	f043 0304 	orr.w	r3, r3, #4
 8004d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2c:	4b78      	ldr	r3, [pc, #480]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	4a77      	ldr	r2, [pc, #476]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	; 0x70
 8004d38:	e00b      	b.n	8004d52 <HAL_RCC_OscConfig+0x32a>
 8004d3a:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	4a74      	ldr	r2, [pc, #464]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	6713      	str	r3, [r2, #112]	; 0x70
 8004d46:	4b72      	ldr	r3, [pc, #456]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	4a71      	ldr	r2, [pc, #452]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d4c:	f023 0304 	bic.w	r3, r3, #4
 8004d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d015      	beq.n	8004d86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5a:	f7fe fa39 	bl	80031d0 <HAL_GetTick>
 8004d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d60:	e00a      	b.n	8004d78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d62:	f7fe fa35 	bl	80031d0 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e0c5      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	4b65      	ldr	r3, [pc, #404]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ee      	beq.n	8004d62 <HAL_RCC_OscConfig+0x33a>
 8004d84:	e014      	b.n	8004db0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d86:	f7fe fa23 	bl	80031d0 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fe fa1f 	bl	80031d0 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e0af      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da4:	4b5a      	ldr	r3, [pc, #360]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1ee      	bne.n	8004d8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d105      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004db6:	4b56      	ldr	r3, [pc, #344]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	4a55      	ldr	r2, [pc, #340]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 809b 	beq.w	8004f02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dcc:	4b50      	ldr	r3, [pc, #320]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 030c 	and.w	r3, r3, #12
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d05c      	beq.n	8004e92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d141      	bne.n	8004e64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de0:	4b4c      	ldr	r3, [pc, #304]	; (8004f14 <HAL_RCC_OscConfig+0x4ec>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de6:	f7fe f9f3 	bl	80031d0 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dee:	f7fe f9ef 	bl	80031d0 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e081      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e00:	4b43      	ldr	r3, [pc, #268]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f0      	bne.n	8004dee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	019b      	lsls	r3, r3, #6
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	3b01      	subs	r3, #1
 8004e26:	041b      	lsls	r3, r3, #16
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	061b      	lsls	r3, r3, #24
 8004e30:	4937      	ldr	r1, [pc, #220]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e36:	4b37      	ldr	r3, [pc, #220]	; (8004f14 <HAL_RCC_OscConfig+0x4ec>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fe f9c8 	bl	80031d0 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e44:	f7fe f9c4 	bl	80031d0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e056      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e56:	4b2e      	ldr	r3, [pc, #184]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x41c>
 8004e62:	e04e      	b.n	8004f02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e64:	4b2b      	ldr	r3, [pc, #172]	; (8004f14 <HAL_RCC_OscConfig+0x4ec>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6a:	f7fe f9b1 	bl	80031d0 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e72:	f7fe f9ad 	bl	80031d0 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e03f      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e84:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1f0      	bne.n	8004e72 <HAL_RCC_OscConfig+0x44a>
 8004e90:	e037      	b.n	8004f02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e032      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <HAL_RCC_OscConfig+0x4e8>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d028      	beq.n	8004efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d121      	bne.n	8004efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d11a      	bne.n	8004efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ece:	4013      	ands	r3, r2
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ed4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d111      	bne.n	8004efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d107      	bne.n	8004efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d001      	beq.n	8004f02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	40023800 	.word	0x40023800
 8004f14:	42470060 	.word	0x42470060

08004f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e0cc      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f2c:	4b68      	ldr	r3, [pc, #416]	; (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d90c      	bls.n	8004f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f3a:	4b65      	ldr	r3, [pc, #404]	; (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f42:	4b63      	ldr	r3, [pc, #396]	; (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0b8      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d020      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f6c:	4b59      	ldr	r3, [pc, #356]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a58      	ldr	r2, [pc, #352]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0308 	and.w	r3, r3, #8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f84:	4b53      	ldr	r3, [pc, #332]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a52      	ldr	r2, [pc, #328]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f90:	4b50      	ldr	r3, [pc, #320]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	494d      	ldr	r1, [pc, #308]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d044      	beq.n	8005038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb6:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d119      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e07f      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd6:	4b3f      	ldr	r3, [pc, #252]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e06f      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe6:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e067      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ff6:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 0203 	bic.w	r2, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4934      	ldr	r1, [pc, #208]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	4313      	orrs	r3, r2
 8005006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005008:	f7fe f8e2 	bl	80031d0 <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	e00a      	b.n	8005026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005010:	f7fe f8de 	bl	80031d0 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	f241 3288 	movw	r2, #5000	; 0x1388
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e04f      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	4b2b      	ldr	r3, [pc, #172]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 020c 	and.w	r2, r3, #12
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	429a      	cmp	r2, r3
 8005036:	d1eb      	bne.n	8005010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005038:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d20c      	bcs.n	8005060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d001      	beq.n	8005060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e032      	b.n	80050c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800506c:	4b19      	ldr	r3, [pc, #100]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4916      	ldr	r1, [pc, #88]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	490e      	ldr	r1, [pc, #56]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800509e:	f000 f821 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 80050a2:	4602      	mov	r2, r0
 80050a4:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	091b      	lsrs	r3, r3, #4
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	490a      	ldr	r1, [pc, #40]	; (80050d8 <HAL_RCC_ClockConfig+0x1c0>)
 80050b0:	5ccb      	ldrb	r3, [r1, r3]
 80050b2:	fa22 f303 	lsr.w	r3, r2, r3
 80050b6:	4a09      	ldr	r2, [pc, #36]	; (80050dc <HAL_RCC_ClockConfig+0x1c4>)
 80050b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050ba:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fe f842 	bl	8003148 <HAL_InitTick>

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40023c00 	.word	0x40023c00
 80050d4:	40023800 	.word	0x40023800
 80050d8:	080087d4 	.word	0x080087d4
 80050dc:	20000014 	.word	0x20000014
 80050e0:	20000018 	.word	0x20000018

080050e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]
 80050f4:	2300      	movs	r3, #0
 80050f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050fc:	4b67      	ldr	r3, [pc, #412]	; (800529c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b08      	cmp	r3, #8
 8005106:	d00d      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0x40>
 8005108:	2b08      	cmp	r3, #8
 800510a:	f200 80bd 	bhi.w	8005288 <HAL_RCC_GetSysClockFreq+0x1a4>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0x34>
 8005112:	2b04      	cmp	r3, #4
 8005114:	d003      	beq.n	800511e <HAL_RCC_GetSysClockFreq+0x3a>
 8005116:	e0b7      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005118:	4b61      	ldr	r3, [pc, #388]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800511a:	60bb      	str	r3, [r7, #8]
       break;
 800511c:	e0b7      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800511e:	4b61      	ldr	r3, [pc, #388]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005120:	60bb      	str	r3, [r7, #8]
      break;
 8005122:	e0b4      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005124:	4b5d      	ldr	r3, [pc, #372]	; (800529c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800512c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800512e:	4b5b      	ldr	r3, [pc, #364]	; (800529c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d04d      	beq.n	80051d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800513a:	4b58      	ldr	r3, [pc, #352]	; (800529c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	461a      	mov	r2, r3
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	ea02 0800 	and.w	r8, r2, r0
 8005152:	ea03 0901 	and.w	r9, r3, r1
 8005156:	4640      	mov	r0, r8
 8005158:	4649      	mov	r1, r9
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	014b      	lsls	r3, r1, #5
 8005164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005168:	0142      	lsls	r2, r0, #5
 800516a:	4610      	mov	r0, r2
 800516c:	4619      	mov	r1, r3
 800516e:	ebb0 0008 	subs.w	r0, r0, r8
 8005172:	eb61 0109 	sbc.w	r1, r1, r9
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	018b      	lsls	r3, r1, #6
 8005180:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005184:	0182      	lsls	r2, r0, #6
 8005186:	1a12      	subs	r2, r2, r0
 8005188:	eb63 0301 	sbc.w	r3, r3, r1
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	00d9      	lsls	r1, r3, #3
 8005196:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800519a:	00d0      	lsls	r0, r2, #3
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	eb12 0208 	adds.w	r2, r2, r8
 80051a4:	eb43 0309 	adc.w	r3, r3, r9
 80051a8:	f04f 0000 	mov.w	r0, #0
 80051ac:	f04f 0100 	mov.w	r1, #0
 80051b0:	0259      	lsls	r1, r3, #9
 80051b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80051b6:	0250      	lsls	r0, r2, #9
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	f7fb fe3e 	bl	8000e48 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4613      	mov	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e04a      	b.n	800526c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d6:	4b31      	ldr	r3, [pc, #196]	; (800529c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	099b      	lsrs	r3, r3, #6
 80051dc:	461a      	mov	r2, r3
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051e6:	f04f 0100 	mov.w	r1, #0
 80051ea:	ea02 0400 	and.w	r4, r2, r0
 80051ee:	ea03 0501 	and.w	r5, r3, r1
 80051f2:	4620      	mov	r0, r4
 80051f4:	4629      	mov	r1, r5
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	014b      	lsls	r3, r1, #5
 8005200:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005204:	0142      	lsls	r2, r0, #5
 8005206:	4610      	mov	r0, r2
 8005208:	4619      	mov	r1, r3
 800520a:	1b00      	subs	r0, r0, r4
 800520c:	eb61 0105 	sbc.w	r1, r1, r5
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	018b      	lsls	r3, r1, #6
 800521a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800521e:	0182      	lsls	r2, r0, #6
 8005220:	1a12      	subs	r2, r2, r0
 8005222:	eb63 0301 	sbc.w	r3, r3, r1
 8005226:	f04f 0000 	mov.w	r0, #0
 800522a:	f04f 0100 	mov.w	r1, #0
 800522e:	00d9      	lsls	r1, r3, #3
 8005230:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005234:	00d0      	lsls	r0, r2, #3
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	1912      	adds	r2, r2, r4
 800523c:	eb45 0303 	adc.w	r3, r5, r3
 8005240:	f04f 0000 	mov.w	r0, #0
 8005244:	f04f 0100 	mov.w	r1, #0
 8005248:	0299      	lsls	r1, r3, #10
 800524a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800524e:	0290      	lsls	r0, r2, #10
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	461a      	mov	r2, r3
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	f7fb fdf2 	bl	8000e48 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4613      	mov	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	3301      	adds	r3, #1
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	60bb      	str	r3, [r7, #8]
      break;
 8005286:	e002      	b.n	800528e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800528a:	60bb      	str	r3, [r7, #8]
      break;
 800528c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800528e:	68bb      	ldr	r3, [r7, #8]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	007a1200 	.word	0x007a1200

080052a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ae:	681b      	ldr	r3, [r3, #0]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000014 	.word	0x20000014

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052c4:	f7ff fff0 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052c8:	4602      	mov	r2, r0
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	0a9b      	lsrs	r3, r3, #10
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	4903      	ldr	r1, [pc, #12]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d6:	5ccb      	ldrb	r3, [r1, r3]
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	080087e4 	.word	0x080087e4

080052e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052ec:	f7ff ffdc 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	0b5b      	lsrs	r3, r3, #13
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	4903      	ldr	r1, [pc, #12]	; (800530c <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fe:	5ccb      	ldrb	r3, [r1, r3]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40023800 	.word	0x40023800
 800530c:	080087e4 	.word	0x080087e4

08005310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e07b      	b.n	800541a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b00      	cmp	r3, #0
 8005328:	d108      	bne.n	800533c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005332:	d009      	beq.n	8005348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	61da      	str	r2, [r3, #28]
 800533a:	e005      	b.n	8005348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fd fd22 	bl	8002dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	ea42 0103 	orr.w	r1, r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	f003 0104 	and.w	r1, r3, #4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0210 	and.w	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005408:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_SPI_Transmit_IT+0x20>
 8005440:	2302      	movs	r3, #2
 8005442:	e06f      	b.n	8005524 <HAL_SPI_Transmit_IT+0x100>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_SPI_Transmit_IT+0x34>
 8005452:	88fb      	ldrh	r3, [r7, #6]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800545c:	e05d      	b.n	800551a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d002      	beq.n	8005470 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800546a:	2302      	movs	r3, #2
 800546c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800546e:	e054      	b.n	800551a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2203      	movs	r2, #3
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <HAL_SPI_Transmit_IT+0x10c>)
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44
 80054b6:	e002      	b.n	80054be <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <HAL_SPI_Transmit_IT+0x110>)
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c6:	d10f      	bne.n	80054e8 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80054f6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d008      	beq.n	8005518 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e000      	b.n	800551a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8005518:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005522:	7dfb      	ldrb	r3, [r7, #23]
}
 8005524:	4618      	mov	r0, r3
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	080057bb 	.word	0x080057bb
 8005534:	08005775 	.word	0x08005775

08005538 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	099b      	lsrs	r3, r3, #6
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10f      	bne.n	800557c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	099b      	lsrs	r3, r3, #6
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d004      	beq.n	800557c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	4798      	blx	r3
    return;
 800557a:	e0d7      	b.n	800572c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <HAL_SPI_IRQHandler+0x66>
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	09db      	lsrs	r3, r3, #7
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
    return;
 800559c:	e0c6      	b.n	800572c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10c      	bne.n	80055c4 <HAL_SPI_IRQHandler+0x8c>
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80b4 	beq.w	800572c <HAL_SPI_IRQHandler+0x1f4>
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 80ad 	beq.w	800572c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	099b      	lsrs	r3, r3, #6
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d023      	beq.n	8005626 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d011      	beq.n	800560e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ee:	f043 0204 	orr.w	r2, r3, #4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	e00b      	b.n	8005626 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	693b      	ldr	r3, [r7, #16]
        return;
 8005624:	e082      	b.n	800572c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d014      	beq.n	800565c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f043 0201 	orr.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00c      	beq.n	8005682 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566c:	f043 0208 	orr.w	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005674:	2300      	movs	r3, #0
 8005676:	60bb      	str	r3, [r7, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04f      	beq.n	800572a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005698:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HAL_SPI_IRQHandler+0x17e>
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d034      	beq.n	8005720 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0203 	bic.w	r2, r2, #3
 80056c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d011      	beq.n	80056f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <HAL_SPI_IRQHandler+0x1fc>)
 80056d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fd62 	bl	80041a4 <HAL_DMA_Abort_IT>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d005      	beq.n	80056f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d016      	beq.n	8005728 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fe:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <HAL_SPI_IRQHandler+0x1fc>)
 8005700:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe fd4c 	bl	80041a4 <HAL_DMA_Abort_IT>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800571e:	e003      	b.n	8005728 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f809 	bl	8005738 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005726:	e000      	b.n	800572a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005728:	bf00      	nop
    return;
 800572a:	bf00      	nop
  }
}
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	0800574d 	.word	0x0800574d

08005738 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ffe6 	bl	8005738 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800576c:	bf00      	nop
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f8f1 	bl	8005994 <SPI_CloseTx_ISR>
  }
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	881a      	ldrh	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	1c9a      	adds	r2, r3, #2
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f8cf 	bl	8005994 <SPI_CloseTx_ISR>
  }
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005810:	f7fd fcde 	bl	80031d0 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	4413      	add	r3, r2
 800581e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005820:	f7fd fcd6 	bl	80031d0 <HAL_GetTick>
 8005824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005826:	4b39      	ldr	r3, [pc, #228]	; (800590c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	015b      	lsls	r3, r3, #5
 800582c:	0d1b      	lsrs	r3, r3, #20
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	fb02 f303 	mul.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005836:	e054      	b.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d050      	beq.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005840:	f7fd fcc6 	bl	80031d0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	429a      	cmp	r2, r3
 800584e:	d902      	bls.n	8005856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d13d      	bne.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586e:	d111      	bne.n	8005894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	d004      	beq.n	8005884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005882:	d107      	bne.n	8005894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589c:	d10f      	bne.n	80058be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e017      	b.n	8005902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3b01      	subs	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d19b      	bne.n	8005838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000014 	.word	0x20000014

08005910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <SPI_EndRxTxTransaction+0x7c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1b      	ldr	r2, [pc, #108]	; (8005990 <SPI_EndRxTxTransaction+0x80>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0d5b      	lsrs	r3, r3, #21
 8005928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593a:	d112      	bne.n	8005962 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	2180      	movs	r1, #128	; 0x80
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff ff5a 	bl	8005800 <SPI_WaitFlagStateUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f043 0220 	orr.w	r2, r3, #32
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e00f      	b.n	8005982 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3b01      	subs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d0f2      	beq.n	8005962 <SPI_EndRxTxTransaction+0x52>
 800597c:	e000      	b.n	8005980 <SPI_EndRxTxTransaction+0x70>
        break;
 800597e:	bf00      	nop
  }

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000014 	.word	0x20000014
 8005990:	165e9f81 	.word	0x165e9f81

08005994 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800599c:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <SPI_CloseTx_ISR+0xbc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2c      	ldr	r2, [pc, #176]	; (8005a54 <SPI_CloseTx_ISR+0xc0>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	0a5b      	lsrs	r3, r3, #9
 80059a8:	2264      	movs	r2, #100	; 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059b0:	f7fd fc0e 	bl	80031d0 <HAL_GetTick>
 80059b4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059c8:	e009      	b.n	80059de <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	3b01      	subs	r3, #1
 80059ce:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0eb      	beq.n	80059b6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059ec:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	2164      	movs	r1, #100	; 0x64
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff ff8c 	bl	8005910 <SPI_EndRxTxTransaction>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fe7d 	bl	8005738 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005a3e:	e002      	b.n	8005a46 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fd f867 	bl	8002b14 <HAL_SPI_TxCpltCallback>
}
 8005a46:	bf00      	nop
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000014 	.word	0x20000014
 8005a54:	057619f1 	.word	0x057619f1

08005a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e041      	b.n	8005aee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fd f9e4 	bl	8002e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f000 fade 	bl	8006058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d001      	beq.n	8005b10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e03c      	b.n	8005b8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <HAL_TIM_Base_Start+0xa0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <HAL_TIM_Base_Start+0x5c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2a:	d013      	beq.n	8005b54 <HAL_TIM_Base_Start+0x5c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <HAL_TIM_Base_Start+0xa4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <HAL_TIM_Base_Start+0x5c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <HAL_TIM_Base_Start+0xa8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <HAL_TIM_Base_Start+0x5c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <HAL_TIM_Base_Start+0xac>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_TIM_Base_Start+0x5c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <HAL_TIM_Base_Start+0xb0>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d111      	bne.n	8005b78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b06      	cmp	r3, #6
 8005b64:	d010      	beq.n	8005b88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0201 	orr.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b76:	e007      	b.n	8005b88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	40000400 	.word	0x40000400
 8005ba0:	40000800 	.word	0x40000800
 8005ba4:	40000c00 	.word	0x40000c00
 8005ba8:	40014000 	.word	0x40014000

08005bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d001      	beq.n	8005bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e044      	b.n	8005c4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1e      	ldr	r2, [pc, #120]	; (8005c5c <HAL_TIM_Base_Start_IT+0xb0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d018      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d013      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <HAL_TIM_Base_Start_IT+0xb4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_TIM_Base_Start_IT+0x6c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a16      	ldr	r2, [pc, #88]	; (8005c6c <HAL_TIM_Base_Start_IT+0xc0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d111      	bne.n	8005c3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b06      	cmp	r3, #6
 8005c28:	d010      	beq.n	8005c4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0201 	orr.w	r2, r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	e007      	b.n	8005c4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0201 	orr.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40014000 	.word	0x40014000

08005c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d122      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d11b      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0202 	mvn.w	r2, #2
 8005c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9b2 	bl	800601c <HAL_TIM_IC_CaptureCallback>
 8005cb8:	e005      	b.n	8005cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f9a4 	bl	8006008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f9b5 	bl	8006030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d122      	bne.n	8005d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d11b      	bne.n	8005d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0204 	mvn.w	r2, #4
 8005cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f988 	bl	800601c <HAL_TIM_IC_CaptureCallback>
 8005d0c:	e005      	b.n	8005d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f97a 	bl	8006008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f98b 	bl	8006030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d122      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d11b      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0208 	mvn.w	r2, #8
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f95e 	bl	800601c <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f950 	bl	8006008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f961 	bl	8006030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b10      	cmp	r3, #16
 8005d80:	d122      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0210 	mvn.w	r2, #16
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f934 	bl	800601c <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f926 	bl	8006008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f937 	bl	8006030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10e      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d107      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0201 	mvn.w	r2, #1
 8005dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fc fef6 	bl	8002be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfe:	2b80      	cmp	r3, #128	; 0x80
 8005e00:	d10e      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0c:	2b80      	cmp	r3, #128	; 0x80
 8005e0e:	d107      	bne.n	8005e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 faae 	bl	800637c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d10e      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e38:	2b40      	cmp	r3, #64	; 0x40
 8005e3a:	d107      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8fc 	bl	8006044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d10e      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d107      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0220 	mvn.w	r2, #32
 8005e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa78 	bl	8006368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_TIM_ConfigClockSource+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e0b3      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x180>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ebe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed0:	d03e      	beq.n	8005f50 <HAL_TIM_ConfigClockSource+0xd0>
 8005ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed6:	f200 8087 	bhi.w	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ede:	f000 8085 	beq.w	8005fec <HAL_TIM_ConfigClockSource+0x16c>
 8005ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee6:	d87f      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005ee8:	2b70      	cmp	r3, #112	; 0x70
 8005eea:	d01a      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0xa2>
 8005eec:	2b70      	cmp	r3, #112	; 0x70
 8005eee:	d87b      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005ef0:	2b60      	cmp	r3, #96	; 0x60
 8005ef2:	d050      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x116>
 8005ef4:	2b60      	cmp	r3, #96	; 0x60
 8005ef6:	d877      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005ef8:	2b50      	cmp	r3, #80	; 0x50
 8005efa:	d03c      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0xf6>
 8005efc:	2b50      	cmp	r3, #80	; 0x50
 8005efe:	d873      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d058      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0x136>
 8005f04:	2b40      	cmp	r3, #64	; 0x40
 8005f06:	d86f      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005f08:	2b30      	cmp	r3, #48	; 0x30
 8005f0a:	d064      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x156>
 8005f0c:	2b30      	cmp	r3, #48	; 0x30
 8005f0e:	d86b      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d060      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x156>
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d867      	bhi.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d05c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x156>
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d05a      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005f20:	e062      	b.n	8005fe8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6899      	ldr	r1, [r3, #8]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f000 f98b 	bl	800624c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	609a      	str	r2, [r3, #8]
      break;
 8005f4e:	e04e      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	6899      	ldr	r1, [r3, #8]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f000 f974 	bl	800624c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f72:	609a      	str	r2, [r3, #8]
      break;
 8005f74:	e03b      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6859      	ldr	r1, [r3, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f000 f8e8 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2150      	movs	r1, #80	; 0x50
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f941 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005f94:	e02b      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6859      	ldr	r1, [r3, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f000 f907 	bl	80061b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2160      	movs	r1, #96	; 0x60
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 f931 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005fb4:	e01b      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6859      	ldr	r1, [r3, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f000 f8c8 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2140      	movs	r1, #64	; 0x40
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 f921 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005fd4:	e00b      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	f000 f918 	bl	8006216 <TIM_ITRx_SetConfig>
        break;
 8005fe6:	e002      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005fe8:	bf00      	nop
 8005fea:	e000      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005fec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a34      	ldr	r2, [pc, #208]	; (800613c <TIM_Base_SetConfig+0xe4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00f      	beq.n	8006090 <TIM_Base_SetConfig+0x38>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006076:	d00b      	beq.n	8006090 <TIM_Base_SetConfig+0x38>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a31      	ldr	r2, [pc, #196]	; (8006140 <TIM_Base_SetConfig+0xe8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_Base_SetConfig+0x38>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a30      	ldr	r2, [pc, #192]	; (8006144 <TIM_Base_SetConfig+0xec>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_Base_SetConfig+0x38>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a2f      	ldr	r2, [pc, #188]	; (8006148 <TIM_Base_SetConfig+0xf0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d108      	bne.n	80060a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a25      	ldr	r2, [pc, #148]	; (800613c <TIM_Base_SetConfig+0xe4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01b      	beq.n	80060e2 <TIM_Base_SetConfig+0x8a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b0:	d017      	beq.n	80060e2 <TIM_Base_SetConfig+0x8a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <TIM_Base_SetConfig+0xe8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <TIM_Base_SetConfig+0x8a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a21      	ldr	r2, [pc, #132]	; (8006144 <TIM_Base_SetConfig+0xec>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d00f      	beq.n	80060e2 <TIM_Base_SetConfig+0x8a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a20      	ldr	r2, [pc, #128]	; (8006148 <TIM_Base_SetConfig+0xf0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <TIM_Base_SetConfig+0x8a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a1f      	ldr	r2, [pc, #124]	; (800614c <TIM_Base_SetConfig+0xf4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d007      	beq.n	80060e2 <TIM_Base_SetConfig+0x8a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <TIM_Base_SetConfig+0xf8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_Base_SetConfig+0x8a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <TIM_Base_SetConfig+0xfc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d108      	bne.n	80060f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a08      	ldr	r2, [pc, #32]	; (800613c <TIM_Base_SetConfig+0xe4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d103      	bne.n	8006128 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	615a      	str	r2, [r3, #20]
}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40010000 	.word	0x40010000
 8006140:	40000400 	.word	0x40000400
 8006144:	40000800 	.word	0x40000800
 8006148:	40000c00 	.word	0x40000c00
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800

08006158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 030a 	bic.w	r3, r3, #10
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0210 	bic.w	r2, r3, #16
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	f043 0307 	orr.w	r3, r3, #7
 8006238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	431a      	orrs	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e050      	b.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1c      	ldr	r2, [pc, #112]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f0:	d013      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a16      	ldr	r2, [pc, #88]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a15      	ldr	r2, [pc, #84]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a13      	ldr	r2, [pc, #76]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10c      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40010000 	.word	0x40010000
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40014000 	.word	0x40014000

08006368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e03f      	b.n	8006422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fc fd86 	bl	8002ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2224      	movs	r2, #36	; 0x24
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fc7b 	bl	8006cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b08a      	sub	sp, #40	; 0x28
 800642e:	af02      	add	r7, sp, #8
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b20      	cmp	r3, #32
 8006448:	d17c      	bne.n	8006544 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_UART_Transmit+0x2c>
 8006450:	88fb      	ldrh	r3, [r7, #6]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e075      	b.n	8006546 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_UART_Transmit+0x3e>
 8006464:	2302      	movs	r3, #2
 8006466:	e06e      	b.n	8006546 <HAL_UART_Transmit+0x11c>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2221      	movs	r2, #33	; 0x21
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800647e:	f7fc fea7 	bl	80031d0 <HAL_GetTick>
 8006482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006498:	d108      	bne.n	80064ac <HAL_UART_Transmit+0x82>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	e003      	b.n	80064b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064bc:	e02a      	b.n	8006514 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2200      	movs	r2, #0
 80064c6:	2180      	movs	r1, #128	; 0x80
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 fa3d 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e036      	b.n	8006546 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	3302      	adds	r3, #2
 80064f2:	61bb      	str	r3, [r7, #24]
 80064f4:	e007      	b.n	8006506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	781a      	ldrb	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	3301      	adds	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1cf      	bne.n	80064be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2200      	movs	r2, #0
 8006526:	2140      	movs	r1, #64	; 0x40
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 fa0d 	bl	8006948 <UART_WaitOnFlagUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d001      	beq.n	8006538 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e006      	b.n	8006546 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	e000      	b.n	8006546 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006544:	2302      	movs	r3, #2
  }
}
 8006546:	4618      	mov	r0, r3
 8006548:	3720      	adds	r7, #32
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	4613      	mov	r3, r2
 800655a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b20      	cmp	r3, #32
 8006566:	d11d      	bne.n	80065a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_UART_Receive_IT+0x26>
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e016      	b.n	80065a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_UART_Receive_IT+0x38>
 8006582:	2302      	movs	r3, #2
 8006584:	e00f      	b.n	80065a6 <HAL_UART_Receive_IT+0x58>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	461a      	mov	r2, r3
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fa1e 	bl	80069dc <UART_Start_Receive_IT>
 80065a0:	4603      	mov	r3, r0
 80065a2:	e000      	b.n	80065a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10d      	bne.n	8006602 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_UART_IRQHandler+0x52>
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fad1 	bl	8006ba2 <UART_Receive_IT>
      return;
 8006600:	e17c      	b.n	80068fc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80b1 	beq.w	800676c <HAL_UART_IRQHandler+0x1bc>
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <HAL_UART_IRQHandler+0x70>
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800661a:	2b00      	cmp	r3, #0
 800661c:	f000 80a6 	beq.w	800676c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <HAL_UART_IRQHandler+0x90>
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	f043 0201 	orr.w	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_UART_IRQHandler+0xb0>
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	f043 0202 	orr.w	r2, r3, #2
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <HAL_UART_IRQHandler+0xd0>
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	f043 0204 	orr.w	r2, r3, #4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00f      	beq.n	80066aa <HAL_UART_IRQHandler+0xfa>
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d104      	bne.n	800669e <HAL_UART_IRQHandler+0xee>
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d005      	beq.n	80066aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	f043 0208 	orr.w	r2, r3, #8
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 811f 	beq.w	80068f2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_UART_IRQHandler+0x11e>
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fa6a 	bl	8006ba2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d102      	bne.n	80066f6 <HAL_UART_IRQHandler+0x146>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d031      	beq.n	800675a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f9aa 	bl	8006a50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d123      	bne.n	8006752 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006718:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	2b00      	cmp	r3, #0
 8006720:	d013      	beq.n	800674a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006726:	4a77      	ldr	r2, [pc, #476]	; (8006904 <HAL_UART_IRQHandler+0x354>)
 8006728:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672e:	4618      	mov	r0, r3
 8006730:	f7fd fd38 	bl	80041a4 <HAL_DMA_Abort_IT>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d016      	beq.n	8006768 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	e00e      	b.n	8006768 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8e6 	bl	800691c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006750:	e00a      	b.n	8006768 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f8e2 	bl	800691c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006758:	e006      	b.n	8006768 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f8de 	bl	800691c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006766:	e0c4      	b.n	80068f2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006768:	bf00      	nop
    return;
 800676a:	e0c2      	b.n	80068f2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 80a2 	bne.w	80068ba <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	f003 0310 	and.w	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 809c 	beq.w	80068ba <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 8096 	beq.w	80068ba <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d14f      	bne.n	8006852 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80067bc:	8a3b      	ldrh	r3, [r7, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8099 	beq.w	80068f6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067c8:	8a3a      	ldrh	r2, [r7, #16]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	f080 8093 	bcs.w	80068f6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8a3a      	ldrh	r2, [r7, #16]
 80067d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e0:	d02b      	beq.n	800683a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695a      	ldr	r2, [r3, #20]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f022 0201 	bic.w	r2, r2, #1
 8006800:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006810:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0210 	bic.w	r2, r2, #16
 800682e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	4618      	mov	r0, r3
 8006836:	f7fd fc45 	bl	80040c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006842:	b29b      	uxth	r3, r3
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	b29b      	uxth	r3, r3
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f870 	bl	8006930 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006850:	e051      	b.n	80068f6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800685a:	b29b      	uxth	r3, r3
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d047      	beq.n	80068fa <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800686a:	8a7b      	ldrh	r3, [r7, #18]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d044      	beq.n	80068fa <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800687e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0201 	bic.w	r2, r2, #1
 800688e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0210 	bic.w	r2, r2, #16
 80068ac:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068ae:	8a7b      	ldrh	r3, [r7, #18]
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f83c 	bl	8006930 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80068b8:	e01f      	b.n	80068fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_UART_IRQHandler+0x326>
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8ff 	bl	8006ad2 <UART_Transmit_IT>
    return;
 80068d4:	e012      	b.n	80068fc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00d      	beq.n	80068fc <HAL_UART_IRQHandler+0x34c>
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f941 	bl	8006b72 <UART_EndTransmit_IT>
    return;
 80068f0:	e004      	b.n	80068fc <HAL_UART_IRQHandler+0x34c>
    return;
 80068f2:	bf00      	nop
 80068f4:	e002      	b.n	80068fc <HAL_UART_IRQHandler+0x34c>
      return;
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <HAL_UART_IRQHandler+0x34c>
      return;
 80068fa:	bf00      	nop
  }
}
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	08006aab 	.word	0x08006aab

08006908 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4613      	mov	r3, r2
 8006956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006958:	e02c      	b.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d028      	beq.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <UART_WaitOnFlagUntilTimeout+0x30>
 8006968:	f7fc fc32 	bl	80031d0 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	429a      	cmp	r2, r3
 8006976:	d21d      	bcs.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68da      	ldr	r2, [r3, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006986:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0201 	bic.w	r2, r2, #1
 8006996:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e00f      	b.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	4013      	ands	r3, r2
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	bf0c      	ite	eq
 80069c4:	2301      	moveq	r3, #1
 80069c6:	2300      	movne	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	461a      	mov	r2, r3
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d0c3      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	88fa      	ldrh	r2, [r7, #6]
 80069fa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2222      	movs	r2, #34	; 0x22
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a20:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695a      	ldr	r2, [r3, #20]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0220 	orr.w	r2, r2, #32
 8006a40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d107      	bne.n	8006a90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0210 	bic.w	r2, r2, #16
 8006a8e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a9e:	bf00      	nop
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff ff29 	bl	800691c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b21      	cmp	r3, #33	; 0x21
 8006ae4:	d13e      	bne.n	8006b64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aee:	d114      	bne.n	8006b1a <UART_Transmit_IT+0x48>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d110      	bne.n	8006b1a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	1c9a      	adds	r2, r3, #2
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]
 8006b18:	e008      	b.n	8006b2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	1c59      	adds	r1, r3, #1
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6211      	str	r1, [r2, #32]
 8006b24:	781a      	ldrb	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10f      	bne.n	8006b60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e000      	b.n	8006b66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b64:	2302      	movs	r3, #2
  }
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff feb8 	bl	8006908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b22      	cmp	r3, #34	; 0x22
 8006bb4:	f040 8087 	bne.w	8006cc6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc0:	d117      	bne.n	8006bf2 <UART_Receive_IT+0x50>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d113      	bne.n	8006bf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	629a      	str	r2, [r3, #40]	; 0x28
 8006bf0:	e026      	b.n	8006c40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c04:	d007      	beq.n	8006c16 <UART_Receive_IT+0x74>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <UART_Receive_IT+0x82>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	e008      	b.n	8006c36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d136      	bne.n	8006cc2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0220 	bic.w	r2, r2, #32
 8006c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695a      	ldr	r2, [r3, #20]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0201 	bic.w	r2, r2, #1
 8006c82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d10e      	bne.n	8006cb2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0210 	bic.w	r2, r2, #16
 8006ca2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7ff fe40 	bl	8006930 <HAL_UARTEx_RxEventCallback>
 8006cb0:	e002      	b.n	8006cb8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fb ff74 	bl	8002ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e002      	b.n	8006cc8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	e000      	b.n	8006cc8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006cc6:	2302      	movs	r3, #2
  }
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	b09f      	sub	sp, #124	; 0x7c
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce6:	68d9      	ldr	r1, [r3, #12]
 8006ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	ea40 0301 	orr.w	r3, r0, r1
 8006cf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	431a      	orrs	r2, r3
 8006d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d14:	f021 010c 	bic.w	r1, r1, #12
 8006d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2e:	6999      	ldr	r1, [r3, #24]
 8006d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	ea40 0301 	orr.w	r3, r0, r1
 8006d38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4bc5      	ldr	r3, [pc, #788]	; (8007054 <UART_SetConfig+0x384>)
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d004      	beq.n	8006d4e <UART_SetConfig+0x7e>
 8006d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	4bc3      	ldr	r3, [pc, #780]	; (8007058 <UART_SetConfig+0x388>)
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d103      	bne.n	8006d56 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d4e:	f7fe facb 	bl	80052e8 <HAL_RCC_GetPCLK2Freq>
 8006d52:	6778      	str	r0, [r7, #116]	; 0x74
 8006d54:	e002      	b.n	8006d5c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d56:	f7fe fab3 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8006d5a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d64:	f040 80b6 	bne.w	8006ed4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d6a:	461c      	mov	r4, r3
 8006d6c:	f04f 0500 	mov.w	r5, #0
 8006d70:	4622      	mov	r2, r4
 8006d72:	462b      	mov	r3, r5
 8006d74:	1891      	adds	r1, r2, r2
 8006d76:	6439      	str	r1, [r7, #64]	; 0x40
 8006d78:	415b      	adcs	r3, r3
 8006d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d80:	1912      	adds	r2, r2, r4
 8006d82:	eb45 0303 	adc.w	r3, r5, r3
 8006d86:	f04f 0000 	mov.w	r0, #0
 8006d8a:	f04f 0100 	mov.w	r1, #0
 8006d8e:	00d9      	lsls	r1, r3, #3
 8006d90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d94:	00d0      	lsls	r0, r2, #3
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	1911      	adds	r1, r2, r4
 8006d9c:	6639      	str	r1, [r7, #96]	; 0x60
 8006d9e:	416b      	adcs	r3, r5
 8006da0:	667b      	str	r3, [r7, #100]	; 0x64
 8006da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	1891      	adds	r1, r2, r2
 8006dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8006db0:	415b      	adcs	r3, r3
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006db8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006dbc:	f7fa f844 	bl	8000e48 <__aeabi_uldivmod>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4ba5      	ldr	r3, [pc, #660]	; (800705c <UART_SetConfig+0x38c>)
 8006dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	011e      	lsls	r6, r3, #4
 8006dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd0:	461c      	mov	r4, r3
 8006dd2:	f04f 0500 	mov.w	r5, #0
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	1891      	adds	r1, r2, r2
 8006ddc:	6339      	str	r1, [r7, #48]	; 0x30
 8006dde:	415b      	adcs	r3, r3
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
 8006de2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006de6:	1912      	adds	r2, r2, r4
 8006de8:	eb45 0303 	adc.w	r3, r5, r3
 8006dec:	f04f 0000 	mov.w	r0, #0
 8006df0:	f04f 0100 	mov.w	r1, #0
 8006df4:	00d9      	lsls	r1, r3, #3
 8006df6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dfa:	00d0      	lsls	r0, r2, #3
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	1911      	adds	r1, r2, r4
 8006e02:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e04:	416b      	adcs	r3, r5
 8006e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	1891      	adds	r1, r2, r2
 8006e14:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e16:	415b      	adcs	r3, r3
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e1e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e22:	f7fa f811 	bl	8000e48 <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4b8c      	ldr	r3, [pc, #560]	; (800705c <UART_SetConfig+0x38c>)
 8006e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	2164      	movs	r1, #100	; 0x64
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	3332      	adds	r3, #50	; 0x32
 8006e3e:	4a87      	ldr	r2, [pc, #540]	; (800705c <UART_SetConfig+0x38c>)
 8006e40:	fba2 2303 	umull	r2, r3, r2, r3
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e4c:	441e      	add	r6, r3
 8006e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e50:	4618      	mov	r0, r3
 8006e52:	f04f 0100 	mov.w	r1, #0
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	1894      	adds	r4, r2, r2
 8006e5c:	623c      	str	r4, [r7, #32]
 8006e5e:	415b      	adcs	r3, r3
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
 8006e62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e66:	1812      	adds	r2, r2, r0
 8006e68:	eb41 0303 	adc.w	r3, r1, r3
 8006e6c:	f04f 0400 	mov.w	r4, #0
 8006e70:	f04f 0500 	mov.w	r5, #0
 8006e74:	00dd      	lsls	r5, r3, #3
 8006e76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e7a:	00d4      	lsls	r4, r2, #3
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	462b      	mov	r3, r5
 8006e80:	1814      	adds	r4, r2, r0
 8006e82:	653c      	str	r4, [r7, #80]	; 0x50
 8006e84:	414b      	adcs	r3, r1
 8006e86:	657b      	str	r3, [r7, #84]	; 0x54
 8006e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	1891      	adds	r1, r2, r2
 8006e94:	61b9      	str	r1, [r7, #24]
 8006e96:	415b      	adcs	r3, r3
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e9e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ea2:	f7f9 ffd1 	bl	8000e48 <__aeabi_uldivmod>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4b6c      	ldr	r3, [pc, #432]	; (800705c <UART_SetConfig+0x38c>)
 8006eac:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	2164      	movs	r1, #100	; 0x64
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	3332      	adds	r3, #50	; 0x32
 8006ebe:	4a67      	ldr	r2, [pc, #412]	; (800705c <UART_SetConfig+0x38c>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	f003 0207 	and.w	r2, r3, #7
 8006eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4432      	add	r2, r6
 8006ed0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ed2:	e0b9      	b.n	8007048 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ed4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed6:	461c      	mov	r4, r3
 8006ed8:	f04f 0500 	mov.w	r5, #0
 8006edc:	4622      	mov	r2, r4
 8006ede:	462b      	mov	r3, r5
 8006ee0:	1891      	adds	r1, r2, r2
 8006ee2:	6139      	str	r1, [r7, #16]
 8006ee4:	415b      	adcs	r3, r3
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006eec:	1912      	adds	r2, r2, r4
 8006eee:	eb45 0303 	adc.w	r3, r5, r3
 8006ef2:	f04f 0000 	mov.w	r0, #0
 8006ef6:	f04f 0100 	mov.w	r1, #0
 8006efa:	00d9      	lsls	r1, r3, #3
 8006efc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f00:	00d0      	lsls	r0, r2, #3
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	eb12 0804 	adds.w	r8, r2, r4
 8006f0a:	eb43 0905 	adc.w	r9, r3, r5
 8006f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f04f 0100 	mov.w	r1, #0
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	008b      	lsls	r3, r1, #2
 8006f22:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f26:	0082      	lsls	r2, r0, #2
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	f7f9 ff8c 	bl	8000e48 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4b49      	ldr	r3, [pc, #292]	; (800705c <UART_SetConfig+0x38c>)
 8006f36:	fba3 2302 	umull	r2, r3, r3, r2
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	011e      	lsls	r6, r3, #4
 8006f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f40:	4618      	mov	r0, r3
 8006f42:	f04f 0100 	mov.w	r1, #0
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	1894      	adds	r4, r2, r2
 8006f4c:	60bc      	str	r4, [r7, #8]
 8006f4e:	415b      	adcs	r3, r3
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f56:	1812      	adds	r2, r2, r0
 8006f58:	eb41 0303 	adc.w	r3, r1, r3
 8006f5c:	f04f 0400 	mov.w	r4, #0
 8006f60:	f04f 0500 	mov.w	r5, #0
 8006f64:	00dd      	lsls	r5, r3, #3
 8006f66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f6a:	00d4      	lsls	r4, r2, #3
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	462b      	mov	r3, r5
 8006f70:	1814      	adds	r4, r2, r0
 8006f72:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f74:	414b      	adcs	r3, r1
 8006f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f04f 0100 	mov.w	r1, #0
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	008b      	lsls	r3, r1, #2
 8006f8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f90:	0082      	lsls	r2, r0, #2
 8006f92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f96:	f7f9 ff57 	bl	8000e48 <__aeabi_uldivmod>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4b2f      	ldr	r3, [pc, #188]	; (800705c <UART_SetConfig+0x38c>)
 8006fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa4:	095b      	lsrs	r3, r3, #5
 8006fa6:	2164      	movs	r1, #100	; 0x64
 8006fa8:	fb01 f303 	mul.w	r3, r1, r3
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	3332      	adds	r3, #50	; 0x32
 8006fb2:	4a2a      	ldr	r2, [pc, #168]	; (800705c <UART_SetConfig+0x38c>)
 8006fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fbe:	441e      	add	r6, r3
 8006fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f04f 0100 	mov.w	r1, #0
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	1894      	adds	r4, r2, r2
 8006fce:	603c      	str	r4, [r7, #0]
 8006fd0:	415b      	adcs	r3, r3
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd8:	1812      	adds	r2, r2, r0
 8006fda:	eb41 0303 	adc.w	r3, r1, r3
 8006fde:	f04f 0400 	mov.w	r4, #0
 8006fe2:	f04f 0500 	mov.w	r5, #0
 8006fe6:	00dd      	lsls	r5, r3, #3
 8006fe8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fec:	00d4      	lsls	r4, r2, #3
 8006fee:	4622      	mov	r2, r4
 8006ff0:	462b      	mov	r3, r5
 8006ff2:	eb12 0a00 	adds.w	sl, r2, r0
 8006ff6:	eb43 0b01 	adc.w	fp, r3, r1
 8006ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f04f 0100 	mov.w	r1, #0
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	008b      	lsls	r3, r1, #2
 800700e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007012:	0082      	lsls	r2, r0, #2
 8007014:	4650      	mov	r0, sl
 8007016:	4659      	mov	r1, fp
 8007018:	f7f9 ff16 	bl	8000e48 <__aeabi_uldivmod>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4b0e      	ldr	r3, [pc, #56]	; (800705c <UART_SetConfig+0x38c>)
 8007022:	fba3 1302 	umull	r1, r3, r3, r2
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	2164      	movs	r1, #100	; 0x64
 800702a:	fb01 f303 	mul.w	r3, r1, r3
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	3332      	adds	r3, #50	; 0x32
 8007034:	4a09      	ldr	r2, [pc, #36]	; (800705c <UART_SetConfig+0x38c>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	f003 020f 	and.w	r2, r3, #15
 8007040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4432      	add	r2, r6
 8007046:	609a      	str	r2, [r3, #8]
}
 8007048:	bf00      	nop
 800704a:	377c      	adds	r7, #124	; 0x7c
 800704c:	46bd      	mov	sp, r7
 800704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007052:	bf00      	nop
 8007054:	40011000 	.word	0x40011000
 8007058:	40011400 	.word	0x40011400
 800705c:	51eb851f 	.word	0x51eb851f

08007060 <__errno>:
 8007060:	4b01      	ldr	r3, [pc, #4]	; (8007068 <__errno+0x8>)
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	20000020 	.word	0x20000020

0800706c <__libc_init_array>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4d0d      	ldr	r5, [pc, #52]	; (80070a4 <__libc_init_array+0x38>)
 8007070:	4c0d      	ldr	r4, [pc, #52]	; (80070a8 <__libc_init_array+0x3c>)
 8007072:	1b64      	subs	r4, r4, r5
 8007074:	10a4      	asrs	r4, r4, #2
 8007076:	2600      	movs	r6, #0
 8007078:	42a6      	cmp	r6, r4
 800707a:	d109      	bne.n	8007090 <__libc_init_array+0x24>
 800707c:	4d0b      	ldr	r5, [pc, #44]	; (80070ac <__libc_init_array+0x40>)
 800707e:	4c0c      	ldr	r4, [pc, #48]	; (80070b0 <__libc_init_array+0x44>)
 8007080:	f001 f9ba 	bl	80083f8 <_init>
 8007084:	1b64      	subs	r4, r4, r5
 8007086:	10a4      	asrs	r4, r4, #2
 8007088:	2600      	movs	r6, #0
 800708a:	42a6      	cmp	r6, r4
 800708c:	d105      	bne.n	800709a <__libc_init_array+0x2e>
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	f855 3b04 	ldr.w	r3, [r5], #4
 8007094:	4798      	blx	r3
 8007096:	3601      	adds	r6, #1
 8007098:	e7ee      	b.n	8007078 <__libc_init_array+0xc>
 800709a:	f855 3b04 	ldr.w	r3, [r5], #4
 800709e:	4798      	blx	r3
 80070a0:	3601      	adds	r6, #1
 80070a2:	e7f2      	b.n	800708a <__libc_init_array+0x1e>
 80070a4:	08008c00 	.word	0x08008c00
 80070a8:	08008c00 	.word	0x08008c00
 80070ac:	08008c00 	.word	0x08008c00
 80070b0:	08008c04 	.word	0x08008c04

080070b4 <memcpy>:
 80070b4:	440a      	add	r2, r1
 80070b6:	4291      	cmp	r1, r2
 80070b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070bc:	d100      	bne.n	80070c0 <memcpy+0xc>
 80070be:	4770      	bx	lr
 80070c0:	b510      	push	{r4, lr}
 80070c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ca:	4291      	cmp	r1, r2
 80070cc:	d1f9      	bne.n	80070c2 <memcpy+0xe>
 80070ce:	bd10      	pop	{r4, pc}

080070d0 <memset>:
 80070d0:	4402      	add	r2, r0
 80070d2:	4603      	mov	r3, r0
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d100      	bne.n	80070da <memset+0xa>
 80070d8:	4770      	bx	lr
 80070da:	f803 1b01 	strb.w	r1, [r3], #1
 80070de:	e7f9      	b.n	80070d4 <memset+0x4>

080070e0 <siprintf>:
 80070e0:	b40e      	push	{r1, r2, r3}
 80070e2:	b500      	push	{lr}
 80070e4:	b09c      	sub	sp, #112	; 0x70
 80070e6:	ab1d      	add	r3, sp, #116	; 0x74
 80070e8:	9002      	str	r0, [sp, #8]
 80070ea:	9006      	str	r0, [sp, #24]
 80070ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070f0:	4809      	ldr	r0, [pc, #36]	; (8007118 <siprintf+0x38>)
 80070f2:	9107      	str	r1, [sp, #28]
 80070f4:	9104      	str	r1, [sp, #16]
 80070f6:	4909      	ldr	r1, [pc, #36]	; (800711c <siprintf+0x3c>)
 80070f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fc:	9105      	str	r1, [sp, #20]
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	a902      	add	r1, sp, #8
 8007104:	f000 f868 	bl	80071d8 <_svfiprintf_r>
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	b01c      	add	sp, #112	; 0x70
 8007110:	f85d eb04 	ldr.w	lr, [sp], #4
 8007114:	b003      	add	sp, #12
 8007116:	4770      	bx	lr
 8007118:	20000020 	.word	0x20000020
 800711c:	ffff0208 	.word	0xffff0208

08007120 <__ssputs_r>:
 8007120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007124:	688e      	ldr	r6, [r1, #8]
 8007126:	429e      	cmp	r6, r3
 8007128:	4682      	mov	sl, r0
 800712a:	460c      	mov	r4, r1
 800712c:	4690      	mov	r8, r2
 800712e:	461f      	mov	r7, r3
 8007130:	d838      	bhi.n	80071a4 <__ssputs_r+0x84>
 8007132:	898a      	ldrh	r2, [r1, #12]
 8007134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007138:	d032      	beq.n	80071a0 <__ssputs_r+0x80>
 800713a:	6825      	ldr	r5, [r4, #0]
 800713c:	6909      	ldr	r1, [r1, #16]
 800713e:	eba5 0901 	sub.w	r9, r5, r1
 8007142:	6965      	ldr	r5, [r4, #20]
 8007144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800714c:	3301      	adds	r3, #1
 800714e:	444b      	add	r3, r9
 8007150:	106d      	asrs	r5, r5, #1
 8007152:	429d      	cmp	r5, r3
 8007154:	bf38      	it	cc
 8007156:	461d      	movcc	r5, r3
 8007158:	0553      	lsls	r3, r2, #21
 800715a:	d531      	bpl.n	80071c0 <__ssputs_r+0xa0>
 800715c:	4629      	mov	r1, r5
 800715e:	f000 fb39 	bl	80077d4 <_malloc_r>
 8007162:	4606      	mov	r6, r0
 8007164:	b950      	cbnz	r0, 800717c <__ssputs_r+0x5c>
 8007166:	230c      	movs	r3, #12
 8007168:	f8ca 3000 	str.w	r3, [sl]
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717c:	6921      	ldr	r1, [r4, #16]
 800717e:	464a      	mov	r2, r9
 8007180:	f7ff ff98 	bl	80070b4 <memcpy>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800718a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718e:	81a3      	strh	r3, [r4, #12]
 8007190:	6126      	str	r6, [r4, #16]
 8007192:	6165      	str	r5, [r4, #20]
 8007194:	444e      	add	r6, r9
 8007196:	eba5 0509 	sub.w	r5, r5, r9
 800719a:	6026      	str	r6, [r4, #0]
 800719c:	60a5      	str	r5, [r4, #8]
 800719e:	463e      	mov	r6, r7
 80071a0:	42be      	cmp	r6, r7
 80071a2:	d900      	bls.n	80071a6 <__ssputs_r+0x86>
 80071a4:	463e      	mov	r6, r7
 80071a6:	4632      	mov	r2, r6
 80071a8:	6820      	ldr	r0, [r4, #0]
 80071aa:	4641      	mov	r1, r8
 80071ac:	f000 faa8 	bl	8007700 <memmove>
 80071b0:	68a3      	ldr	r3, [r4, #8]
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	1b9b      	subs	r3, r3, r6
 80071b6:	4432      	add	r2, r6
 80071b8:	60a3      	str	r3, [r4, #8]
 80071ba:	6022      	str	r2, [r4, #0]
 80071bc:	2000      	movs	r0, #0
 80071be:	e7db      	b.n	8007178 <__ssputs_r+0x58>
 80071c0:	462a      	mov	r2, r5
 80071c2:	f000 fb61 	bl	8007888 <_realloc_r>
 80071c6:	4606      	mov	r6, r0
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d1e1      	bne.n	8007190 <__ssputs_r+0x70>
 80071cc:	6921      	ldr	r1, [r4, #16]
 80071ce:	4650      	mov	r0, sl
 80071d0:	f000 fab0 	bl	8007734 <_free_r>
 80071d4:	e7c7      	b.n	8007166 <__ssputs_r+0x46>
	...

080071d8 <_svfiprintf_r>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	4698      	mov	r8, r3
 80071de:	898b      	ldrh	r3, [r1, #12]
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	b09d      	sub	sp, #116	; 0x74
 80071e4:	4607      	mov	r7, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	4614      	mov	r4, r2
 80071ea:	d50e      	bpl.n	800720a <_svfiprintf_r+0x32>
 80071ec:	690b      	ldr	r3, [r1, #16]
 80071ee:	b963      	cbnz	r3, 800720a <_svfiprintf_r+0x32>
 80071f0:	2140      	movs	r1, #64	; 0x40
 80071f2:	f000 faef 	bl	80077d4 <_malloc_r>
 80071f6:	6028      	str	r0, [r5, #0]
 80071f8:	6128      	str	r0, [r5, #16]
 80071fa:	b920      	cbnz	r0, 8007206 <_svfiprintf_r+0x2e>
 80071fc:	230c      	movs	r3, #12
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e0d1      	b.n	80073aa <_svfiprintf_r+0x1d2>
 8007206:	2340      	movs	r3, #64	; 0x40
 8007208:	616b      	str	r3, [r5, #20]
 800720a:	2300      	movs	r3, #0
 800720c:	9309      	str	r3, [sp, #36]	; 0x24
 800720e:	2320      	movs	r3, #32
 8007210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007214:	f8cd 800c 	str.w	r8, [sp, #12]
 8007218:	2330      	movs	r3, #48	; 0x30
 800721a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073c4 <_svfiprintf_r+0x1ec>
 800721e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007222:	f04f 0901 	mov.w	r9, #1
 8007226:	4623      	mov	r3, r4
 8007228:	469a      	mov	sl, r3
 800722a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800722e:	b10a      	cbz	r2, 8007234 <_svfiprintf_r+0x5c>
 8007230:	2a25      	cmp	r2, #37	; 0x25
 8007232:	d1f9      	bne.n	8007228 <_svfiprintf_r+0x50>
 8007234:	ebba 0b04 	subs.w	fp, sl, r4
 8007238:	d00b      	beq.n	8007252 <_svfiprintf_r+0x7a>
 800723a:	465b      	mov	r3, fp
 800723c:	4622      	mov	r2, r4
 800723e:	4629      	mov	r1, r5
 8007240:	4638      	mov	r0, r7
 8007242:	f7ff ff6d 	bl	8007120 <__ssputs_r>
 8007246:	3001      	adds	r0, #1
 8007248:	f000 80aa 	beq.w	80073a0 <_svfiprintf_r+0x1c8>
 800724c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800724e:	445a      	add	r2, fp
 8007250:	9209      	str	r2, [sp, #36]	; 0x24
 8007252:	f89a 3000 	ldrb.w	r3, [sl]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 80a2 	beq.w	80073a0 <_svfiprintf_r+0x1c8>
 800725c:	2300      	movs	r3, #0
 800725e:	f04f 32ff 	mov.w	r2, #4294967295
 8007262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007266:	f10a 0a01 	add.w	sl, sl, #1
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	9307      	str	r3, [sp, #28]
 800726e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007272:	931a      	str	r3, [sp, #104]	; 0x68
 8007274:	4654      	mov	r4, sl
 8007276:	2205      	movs	r2, #5
 8007278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727c:	4851      	ldr	r0, [pc, #324]	; (80073c4 <_svfiprintf_r+0x1ec>)
 800727e:	f7f8 ffb7 	bl	80001f0 <memchr>
 8007282:	9a04      	ldr	r2, [sp, #16]
 8007284:	b9d8      	cbnz	r0, 80072be <_svfiprintf_r+0xe6>
 8007286:	06d0      	lsls	r0, r2, #27
 8007288:	bf44      	itt	mi
 800728a:	2320      	movmi	r3, #32
 800728c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007290:	0711      	lsls	r1, r2, #28
 8007292:	bf44      	itt	mi
 8007294:	232b      	movmi	r3, #43	; 0x2b
 8007296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729a:	f89a 3000 	ldrb.w	r3, [sl]
 800729e:	2b2a      	cmp	r3, #42	; 0x2a
 80072a0:	d015      	beq.n	80072ce <_svfiprintf_r+0xf6>
 80072a2:	9a07      	ldr	r2, [sp, #28]
 80072a4:	4654      	mov	r4, sl
 80072a6:	2000      	movs	r0, #0
 80072a8:	f04f 0c0a 	mov.w	ip, #10
 80072ac:	4621      	mov	r1, r4
 80072ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b2:	3b30      	subs	r3, #48	; 0x30
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	d94e      	bls.n	8007356 <_svfiprintf_r+0x17e>
 80072b8:	b1b0      	cbz	r0, 80072e8 <_svfiprintf_r+0x110>
 80072ba:	9207      	str	r2, [sp, #28]
 80072bc:	e014      	b.n	80072e8 <_svfiprintf_r+0x110>
 80072be:	eba0 0308 	sub.w	r3, r0, r8
 80072c2:	fa09 f303 	lsl.w	r3, r9, r3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	46a2      	mov	sl, r4
 80072cc:	e7d2      	b.n	8007274 <_svfiprintf_r+0x9c>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	1d19      	adds	r1, r3, #4
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	9103      	str	r1, [sp, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfbb      	ittet	lt
 80072da:	425b      	neglt	r3, r3
 80072dc:	f042 0202 	orrlt.w	r2, r2, #2
 80072e0:	9307      	strge	r3, [sp, #28]
 80072e2:	9307      	strlt	r3, [sp, #28]
 80072e4:	bfb8      	it	lt
 80072e6:	9204      	strlt	r2, [sp, #16]
 80072e8:	7823      	ldrb	r3, [r4, #0]
 80072ea:	2b2e      	cmp	r3, #46	; 0x2e
 80072ec:	d10c      	bne.n	8007308 <_svfiprintf_r+0x130>
 80072ee:	7863      	ldrb	r3, [r4, #1]
 80072f0:	2b2a      	cmp	r3, #42	; 0x2a
 80072f2:	d135      	bne.n	8007360 <_svfiprintf_r+0x188>
 80072f4:	9b03      	ldr	r3, [sp, #12]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	9203      	str	r2, [sp, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bfb8      	it	lt
 8007300:	f04f 33ff 	movlt.w	r3, #4294967295
 8007304:	3402      	adds	r4, #2
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073d4 <_svfiprintf_r+0x1fc>
 800730c:	7821      	ldrb	r1, [r4, #0]
 800730e:	2203      	movs	r2, #3
 8007310:	4650      	mov	r0, sl
 8007312:	f7f8 ff6d 	bl	80001f0 <memchr>
 8007316:	b140      	cbz	r0, 800732a <_svfiprintf_r+0x152>
 8007318:	2340      	movs	r3, #64	; 0x40
 800731a:	eba0 000a 	sub.w	r0, r0, sl
 800731e:	fa03 f000 	lsl.w	r0, r3, r0
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	4303      	orrs	r3, r0
 8007326:	3401      	adds	r4, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732e:	4826      	ldr	r0, [pc, #152]	; (80073c8 <_svfiprintf_r+0x1f0>)
 8007330:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007334:	2206      	movs	r2, #6
 8007336:	f7f8 ff5b 	bl	80001f0 <memchr>
 800733a:	2800      	cmp	r0, #0
 800733c:	d038      	beq.n	80073b0 <_svfiprintf_r+0x1d8>
 800733e:	4b23      	ldr	r3, [pc, #140]	; (80073cc <_svfiprintf_r+0x1f4>)
 8007340:	bb1b      	cbnz	r3, 800738a <_svfiprintf_r+0x1b2>
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	3307      	adds	r3, #7
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	3308      	adds	r3, #8
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007350:	4433      	add	r3, r6
 8007352:	9309      	str	r3, [sp, #36]	; 0x24
 8007354:	e767      	b.n	8007226 <_svfiprintf_r+0x4e>
 8007356:	fb0c 3202 	mla	r2, ip, r2, r3
 800735a:	460c      	mov	r4, r1
 800735c:	2001      	movs	r0, #1
 800735e:	e7a5      	b.n	80072ac <_svfiprintf_r+0xd4>
 8007360:	2300      	movs	r3, #0
 8007362:	3401      	adds	r4, #1
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	4619      	mov	r1, r3
 8007368:	f04f 0c0a 	mov.w	ip, #10
 800736c:	4620      	mov	r0, r4
 800736e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007372:	3a30      	subs	r2, #48	; 0x30
 8007374:	2a09      	cmp	r2, #9
 8007376:	d903      	bls.n	8007380 <_svfiprintf_r+0x1a8>
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0c5      	beq.n	8007308 <_svfiprintf_r+0x130>
 800737c:	9105      	str	r1, [sp, #20]
 800737e:	e7c3      	b.n	8007308 <_svfiprintf_r+0x130>
 8007380:	fb0c 2101 	mla	r1, ip, r1, r2
 8007384:	4604      	mov	r4, r0
 8007386:	2301      	movs	r3, #1
 8007388:	e7f0      	b.n	800736c <_svfiprintf_r+0x194>
 800738a:	ab03      	add	r3, sp, #12
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	462a      	mov	r2, r5
 8007390:	4b0f      	ldr	r3, [pc, #60]	; (80073d0 <_svfiprintf_r+0x1f8>)
 8007392:	a904      	add	r1, sp, #16
 8007394:	4638      	mov	r0, r7
 8007396:	f3af 8000 	nop.w
 800739a:	1c42      	adds	r2, r0, #1
 800739c:	4606      	mov	r6, r0
 800739e:	d1d6      	bne.n	800734e <_svfiprintf_r+0x176>
 80073a0:	89ab      	ldrh	r3, [r5, #12]
 80073a2:	065b      	lsls	r3, r3, #25
 80073a4:	f53f af2c 	bmi.w	8007200 <_svfiprintf_r+0x28>
 80073a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073aa:	b01d      	add	sp, #116	; 0x74
 80073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	ab03      	add	r3, sp, #12
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	462a      	mov	r2, r5
 80073b6:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <_svfiprintf_r+0x1f8>)
 80073b8:	a904      	add	r1, sp, #16
 80073ba:	4638      	mov	r0, r7
 80073bc:	f000 f87a 	bl	80074b4 <_printf_i>
 80073c0:	e7eb      	b.n	800739a <_svfiprintf_r+0x1c2>
 80073c2:	bf00      	nop
 80073c4:	080087f4 	.word	0x080087f4
 80073c8:	080087fe 	.word	0x080087fe
 80073cc:	00000000 	.word	0x00000000
 80073d0:	08007121 	.word	0x08007121
 80073d4:	080087fa 	.word	0x080087fa

080073d8 <_printf_common>:
 80073d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073dc:	4616      	mov	r6, r2
 80073de:	4699      	mov	r9, r3
 80073e0:	688a      	ldr	r2, [r1, #8]
 80073e2:	690b      	ldr	r3, [r1, #16]
 80073e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	bfb8      	it	lt
 80073ec:	4613      	movlt	r3, r2
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073f4:	4607      	mov	r7, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b10a      	cbz	r2, 80073fe <_printf_common+0x26>
 80073fa:	3301      	adds	r3, #1
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	0699      	lsls	r1, r3, #26
 8007402:	bf42      	ittt	mi
 8007404:	6833      	ldrmi	r3, [r6, #0]
 8007406:	3302      	addmi	r3, #2
 8007408:	6033      	strmi	r3, [r6, #0]
 800740a:	6825      	ldr	r5, [r4, #0]
 800740c:	f015 0506 	ands.w	r5, r5, #6
 8007410:	d106      	bne.n	8007420 <_printf_common+0x48>
 8007412:	f104 0a19 	add.w	sl, r4, #25
 8007416:	68e3      	ldr	r3, [r4, #12]
 8007418:	6832      	ldr	r2, [r6, #0]
 800741a:	1a9b      	subs	r3, r3, r2
 800741c:	42ab      	cmp	r3, r5
 800741e:	dc26      	bgt.n	800746e <_printf_common+0x96>
 8007420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007424:	1e13      	subs	r3, r2, #0
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	bf18      	it	ne
 800742a:	2301      	movne	r3, #1
 800742c:	0692      	lsls	r2, r2, #26
 800742e:	d42b      	bmi.n	8007488 <_printf_common+0xb0>
 8007430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007434:	4649      	mov	r1, r9
 8007436:	4638      	mov	r0, r7
 8007438:	47c0      	blx	r8
 800743a:	3001      	adds	r0, #1
 800743c:	d01e      	beq.n	800747c <_printf_common+0xa4>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	68e5      	ldr	r5, [r4, #12]
 8007442:	6832      	ldr	r2, [r6, #0]
 8007444:	f003 0306 	and.w	r3, r3, #6
 8007448:	2b04      	cmp	r3, #4
 800744a:	bf08      	it	eq
 800744c:	1aad      	subeq	r5, r5, r2
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	6922      	ldr	r2, [r4, #16]
 8007452:	bf0c      	ite	eq
 8007454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007458:	2500      	movne	r5, #0
 800745a:	4293      	cmp	r3, r2
 800745c:	bfc4      	itt	gt
 800745e:	1a9b      	subgt	r3, r3, r2
 8007460:	18ed      	addgt	r5, r5, r3
 8007462:	2600      	movs	r6, #0
 8007464:	341a      	adds	r4, #26
 8007466:	42b5      	cmp	r5, r6
 8007468:	d11a      	bne.n	80074a0 <_printf_common+0xc8>
 800746a:	2000      	movs	r0, #0
 800746c:	e008      	b.n	8007480 <_printf_common+0xa8>
 800746e:	2301      	movs	r3, #1
 8007470:	4652      	mov	r2, sl
 8007472:	4649      	mov	r1, r9
 8007474:	4638      	mov	r0, r7
 8007476:	47c0      	blx	r8
 8007478:	3001      	adds	r0, #1
 800747a:	d103      	bne.n	8007484 <_printf_common+0xac>
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007484:	3501      	adds	r5, #1
 8007486:	e7c6      	b.n	8007416 <_printf_common+0x3e>
 8007488:	18e1      	adds	r1, r4, r3
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	2030      	movs	r0, #48	; 0x30
 800748e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007492:	4422      	add	r2, r4
 8007494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800749c:	3302      	adds	r3, #2
 800749e:	e7c7      	b.n	8007430 <_printf_common+0x58>
 80074a0:	2301      	movs	r3, #1
 80074a2:	4622      	mov	r2, r4
 80074a4:	4649      	mov	r1, r9
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d0e6      	beq.n	800747c <_printf_common+0xa4>
 80074ae:	3601      	adds	r6, #1
 80074b0:	e7d9      	b.n	8007466 <_printf_common+0x8e>
	...

080074b4 <_printf_i>:
 80074b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b8:	460c      	mov	r4, r1
 80074ba:	4691      	mov	r9, r2
 80074bc:	7e27      	ldrb	r7, [r4, #24]
 80074be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074c0:	2f78      	cmp	r7, #120	; 0x78
 80074c2:	4680      	mov	r8, r0
 80074c4:	469a      	mov	sl, r3
 80074c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ca:	d807      	bhi.n	80074dc <_printf_i+0x28>
 80074cc:	2f62      	cmp	r7, #98	; 0x62
 80074ce:	d80a      	bhi.n	80074e6 <_printf_i+0x32>
 80074d0:	2f00      	cmp	r7, #0
 80074d2:	f000 80d8 	beq.w	8007686 <_printf_i+0x1d2>
 80074d6:	2f58      	cmp	r7, #88	; 0x58
 80074d8:	f000 80a3 	beq.w	8007622 <_printf_i+0x16e>
 80074dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074e4:	e03a      	b.n	800755c <_printf_i+0xa8>
 80074e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074ea:	2b15      	cmp	r3, #21
 80074ec:	d8f6      	bhi.n	80074dc <_printf_i+0x28>
 80074ee:	a001      	add	r0, pc, #4	; (adr r0, 80074f4 <_printf_i+0x40>)
 80074f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80074f4:	0800754d 	.word	0x0800754d
 80074f8:	08007561 	.word	0x08007561
 80074fc:	080074dd 	.word	0x080074dd
 8007500:	080074dd 	.word	0x080074dd
 8007504:	080074dd 	.word	0x080074dd
 8007508:	080074dd 	.word	0x080074dd
 800750c:	08007561 	.word	0x08007561
 8007510:	080074dd 	.word	0x080074dd
 8007514:	080074dd 	.word	0x080074dd
 8007518:	080074dd 	.word	0x080074dd
 800751c:	080074dd 	.word	0x080074dd
 8007520:	0800766d 	.word	0x0800766d
 8007524:	08007591 	.word	0x08007591
 8007528:	0800764f 	.word	0x0800764f
 800752c:	080074dd 	.word	0x080074dd
 8007530:	080074dd 	.word	0x080074dd
 8007534:	0800768f 	.word	0x0800768f
 8007538:	080074dd 	.word	0x080074dd
 800753c:	08007591 	.word	0x08007591
 8007540:	080074dd 	.word	0x080074dd
 8007544:	080074dd 	.word	0x080074dd
 8007548:	08007657 	.word	0x08007657
 800754c:	680b      	ldr	r3, [r1, #0]
 800754e:	1d1a      	adds	r2, r3, #4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	600a      	str	r2, [r1, #0]
 8007554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800755c:	2301      	movs	r3, #1
 800755e:	e0a3      	b.n	80076a8 <_printf_i+0x1f4>
 8007560:	6825      	ldr	r5, [r4, #0]
 8007562:	6808      	ldr	r0, [r1, #0]
 8007564:	062e      	lsls	r6, r5, #24
 8007566:	f100 0304 	add.w	r3, r0, #4
 800756a:	d50a      	bpl.n	8007582 <_printf_i+0xce>
 800756c:	6805      	ldr	r5, [r0, #0]
 800756e:	600b      	str	r3, [r1, #0]
 8007570:	2d00      	cmp	r5, #0
 8007572:	da03      	bge.n	800757c <_printf_i+0xc8>
 8007574:	232d      	movs	r3, #45	; 0x2d
 8007576:	426d      	negs	r5, r5
 8007578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757c:	485e      	ldr	r0, [pc, #376]	; (80076f8 <_printf_i+0x244>)
 800757e:	230a      	movs	r3, #10
 8007580:	e019      	b.n	80075b6 <_printf_i+0x102>
 8007582:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007586:	6805      	ldr	r5, [r0, #0]
 8007588:	600b      	str	r3, [r1, #0]
 800758a:	bf18      	it	ne
 800758c:	b22d      	sxthne	r5, r5
 800758e:	e7ef      	b.n	8007570 <_printf_i+0xbc>
 8007590:	680b      	ldr	r3, [r1, #0]
 8007592:	6825      	ldr	r5, [r4, #0]
 8007594:	1d18      	adds	r0, r3, #4
 8007596:	6008      	str	r0, [r1, #0]
 8007598:	0628      	lsls	r0, r5, #24
 800759a:	d501      	bpl.n	80075a0 <_printf_i+0xec>
 800759c:	681d      	ldr	r5, [r3, #0]
 800759e:	e002      	b.n	80075a6 <_printf_i+0xf2>
 80075a0:	0669      	lsls	r1, r5, #25
 80075a2:	d5fb      	bpl.n	800759c <_printf_i+0xe8>
 80075a4:	881d      	ldrh	r5, [r3, #0]
 80075a6:	4854      	ldr	r0, [pc, #336]	; (80076f8 <_printf_i+0x244>)
 80075a8:	2f6f      	cmp	r7, #111	; 0x6f
 80075aa:	bf0c      	ite	eq
 80075ac:	2308      	moveq	r3, #8
 80075ae:	230a      	movne	r3, #10
 80075b0:	2100      	movs	r1, #0
 80075b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075b6:	6866      	ldr	r6, [r4, #4]
 80075b8:	60a6      	str	r6, [r4, #8]
 80075ba:	2e00      	cmp	r6, #0
 80075bc:	bfa2      	ittt	ge
 80075be:	6821      	ldrge	r1, [r4, #0]
 80075c0:	f021 0104 	bicge.w	r1, r1, #4
 80075c4:	6021      	strge	r1, [r4, #0]
 80075c6:	b90d      	cbnz	r5, 80075cc <_printf_i+0x118>
 80075c8:	2e00      	cmp	r6, #0
 80075ca:	d04d      	beq.n	8007668 <_printf_i+0x1b4>
 80075cc:	4616      	mov	r6, r2
 80075ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80075d2:	fb03 5711 	mls	r7, r3, r1, r5
 80075d6:	5dc7      	ldrb	r7, [r0, r7]
 80075d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075dc:	462f      	mov	r7, r5
 80075de:	42bb      	cmp	r3, r7
 80075e0:	460d      	mov	r5, r1
 80075e2:	d9f4      	bls.n	80075ce <_printf_i+0x11a>
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d10b      	bne.n	8007600 <_printf_i+0x14c>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	07df      	lsls	r7, r3, #31
 80075ec:	d508      	bpl.n	8007600 <_printf_i+0x14c>
 80075ee:	6923      	ldr	r3, [r4, #16]
 80075f0:	6861      	ldr	r1, [r4, #4]
 80075f2:	4299      	cmp	r1, r3
 80075f4:	bfde      	ittt	le
 80075f6:	2330      	movle	r3, #48	; 0x30
 80075f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007600:	1b92      	subs	r2, r2, r6
 8007602:	6122      	str	r2, [r4, #16]
 8007604:	f8cd a000 	str.w	sl, [sp]
 8007608:	464b      	mov	r3, r9
 800760a:	aa03      	add	r2, sp, #12
 800760c:	4621      	mov	r1, r4
 800760e:	4640      	mov	r0, r8
 8007610:	f7ff fee2 	bl	80073d8 <_printf_common>
 8007614:	3001      	adds	r0, #1
 8007616:	d14c      	bne.n	80076b2 <_printf_i+0x1fe>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b004      	add	sp, #16
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007622:	4835      	ldr	r0, [pc, #212]	; (80076f8 <_printf_i+0x244>)
 8007624:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	680e      	ldr	r6, [r1, #0]
 800762c:	061f      	lsls	r7, r3, #24
 800762e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007632:	600e      	str	r6, [r1, #0]
 8007634:	d514      	bpl.n	8007660 <_printf_i+0x1ac>
 8007636:	07d9      	lsls	r1, r3, #31
 8007638:	bf44      	itt	mi
 800763a:	f043 0320 	orrmi.w	r3, r3, #32
 800763e:	6023      	strmi	r3, [r4, #0]
 8007640:	b91d      	cbnz	r5, 800764a <_printf_i+0x196>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	f023 0320 	bic.w	r3, r3, #32
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	2310      	movs	r3, #16
 800764c:	e7b0      	b.n	80075b0 <_printf_i+0xfc>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f043 0320 	orr.w	r3, r3, #32
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	2378      	movs	r3, #120	; 0x78
 8007658:	4828      	ldr	r0, [pc, #160]	; (80076fc <_printf_i+0x248>)
 800765a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800765e:	e7e3      	b.n	8007628 <_printf_i+0x174>
 8007660:	065e      	lsls	r6, r3, #25
 8007662:	bf48      	it	mi
 8007664:	b2ad      	uxthmi	r5, r5
 8007666:	e7e6      	b.n	8007636 <_printf_i+0x182>
 8007668:	4616      	mov	r6, r2
 800766a:	e7bb      	b.n	80075e4 <_printf_i+0x130>
 800766c:	680b      	ldr	r3, [r1, #0]
 800766e:	6826      	ldr	r6, [r4, #0]
 8007670:	6960      	ldr	r0, [r4, #20]
 8007672:	1d1d      	adds	r5, r3, #4
 8007674:	600d      	str	r5, [r1, #0]
 8007676:	0635      	lsls	r5, r6, #24
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	d501      	bpl.n	8007680 <_printf_i+0x1cc>
 800767c:	6018      	str	r0, [r3, #0]
 800767e:	e002      	b.n	8007686 <_printf_i+0x1d2>
 8007680:	0671      	lsls	r1, r6, #25
 8007682:	d5fb      	bpl.n	800767c <_printf_i+0x1c8>
 8007684:	8018      	strh	r0, [r3, #0]
 8007686:	2300      	movs	r3, #0
 8007688:	6123      	str	r3, [r4, #16]
 800768a:	4616      	mov	r6, r2
 800768c:	e7ba      	b.n	8007604 <_printf_i+0x150>
 800768e:	680b      	ldr	r3, [r1, #0]
 8007690:	1d1a      	adds	r2, r3, #4
 8007692:	600a      	str	r2, [r1, #0]
 8007694:	681e      	ldr	r6, [r3, #0]
 8007696:	6862      	ldr	r2, [r4, #4]
 8007698:	2100      	movs	r1, #0
 800769a:	4630      	mov	r0, r6
 800769c:	f7f8 fda8 	bl	80001f0 <memchr>
 80076a0:	b108      	cbz	r0, 80076a6 <_printf_i+0x1f2>
 80076a2:	1b80      	subs	r0, r0, r6
 80076a4:	6060      	str	r0, [r4, #4]
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	2300      	movs	r3, #0
 80076ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b0:	e7a8      	b.n	8007604 <_printf_i+0x150>
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	4632      	mov	r2, r6
 80076b6:	4649      	mov	r1, r9
 80076b8:	4640      	mov	r0, r8
 80076ba:	47d0      	blx	sl
 80076bc:	3001      	adds	r0, #1
 80076be:	d0ab      	beq.n	8007618 <_printf_i+0x164>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	079b      	lsls	r3, r3, #30
 80076c4:	d413      	bmi.n	80076ee <_printf_i+0x23a>
 80076c6:	68e0      	ldr	r0, [r4, #12]
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	4298      	cmp	r0, r3
 80076cc:	bfb8      	it	lt
 80076ce:	4618      	movlt	r0, r3
 80076d0:	e7a4      	b.n	800761c <_printf_i+0x168>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4632      	mov	r2, r6
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	47d0      	blx	sl
 80076dc:	3001      	adds	r0, #1
 80076de:	d09b      	beq.n	8007618 <_printf_i+0x164>
 80076e0:	3501      	adds	r5, #1
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	9903      	ldr	r1, [sp, #12]
 80076e6:	1a5b      	subs	r3, r3, r1
 80076e8:	42ab      	cmp	r3, r5
 80076ea:	dcf2      	bgt.n	80076d2 <_printf_i+0x21e>
 80076ec:	e7eb      	b.n	80076c6 <_printf_i+0x212>
 80076ee:	2500      	movs	r5, #0
 80076f0:	f104 0619 	add.w	r6, r4, #25
 80076f4:	e7f5      	b.n	80076e2 <_printf_i+0x22e>
 80076f6:	bf00      	nop
 80076f8:	08008805 	.word	0x08008805
 80076fc:	08008816 	.word	0x08008816

08007700 <memmove>:
 8007700:	4288      	cmp	r0, r1
 8007702:	b510      	push	{r4, lr}
 8007704:	eb01 0402 	add.w	r4, r1, r2
 8007708:	d902      	bls.n	8007710 <memmove+0x10>
 800770a:	4284      	cmp	r4, r0
 800770c:	4623      	mov	r3, r4
 800770e:	d807      	bhi.n	8007720 <memmove+0x20>
 8007710:	1e43      	subs	r3, r0, #1
 8007712:	42a1      	cmp	r1, r4
 8007714:	d008      	beq.n	8007728 <memmove+0x28>
 8007716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800771a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800771e:	e7f8      	b.n	8007712 <memmove+0x12>
 8007720:	4402      	add	r2, r0
 8007722:	4601      	mov	r1, r0
 8007724:	428a      	cmp	r2, r1
 8007726:	d100      	bne.n	800772a <memmove+0x2a>
 8007728:	bd10      	pop	{r4, pc}
 800772a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800772e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007732:	e7f7      	b.n	8007724 <memmove+0x24>

08007734 <_free_r>:
 8007734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007736:	2900      	cmp	r1, #0
 8007738:	d048      	beq.n	80077cc <_free_r+0x98>
 800773a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773e:	9001      	str	r0, [sp, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f1a1 0404 	sub.w	r4, r1, #4
 8007746:	bfb8      	it	lt
 8007748:	18e4      	addlt	r4, r4, r3
 800774a:	f000 f8d3 	bl	80078f4 <__malloc_lock>
 800774e:	4a20      	ldr	r2, [pc, #128]	; (80077d0 <_free_r+0x9c>)
 8007750:	9801      	ldr	r0, [sp, #4]
 8007752:	6813      	ldr	r3, [r2, #0]
 8007754:	4615      	mov	r5, r2
 8007756:	b933      	cbnz	r3, 8007766 <_free_r+0x32>
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	6014      	str	r4, [r2, #0]
 800775c:	b003      	add	sp, #12
 800775e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007762:	f000 b8cd 	b.w	8007900 <__malloc_unlock>
 8007766:	42a3      	cmp	r3, r4
 8007768:	d90b      	bls.n	8007782 <_free_r+0x4e>
 800776a:	6821      	ldr	r1, [r4, #0]
 800776c:	1862      	adds	r2, r4, r1
 800776e:	4293      	cmp	r3, r2
 8007770:	bf04      	itt	eq
 8007772:	681a      	ldreq	r2, [r3, #0]
 8007774:	685b      	ldreq	r3, [r3, #4]
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	bf04      	itt	eq
 800777a:	1852      	addeq	r2, r2, r1
 800777c:	6022      	streq	r2, [r4, #0]
 800777e:	602c      	str	r4, [r5, #0]
 8007780:	e7ec      	b.n	800775c <_free_r+0x28>
 8007782:	461a      	mov	r2, r3
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	b10b      	cbz	r3, 800778c <_free_r+0x58>
 8007788:	42a3      	cmp	r3, r4
 800778a:	d9fa      	bls.n	8007782 <_free_r+0x4e>
 800778c:	6811      	ldr	r1, [r2, #0]
 800778e:	1855      	adds	r5, r2, r1
 8007790:	42a5      	cmp	r5, r4
 8007792:	d10b      	bne.n	80077ac <_free_r+0x78>
 8007794:	6824      	ldr	r4, [r4, #0]
 8007796:	4421      	add	r1, r4
 8007798:	1854      	adds	r4, r2, r1
 800779a:	42a3      	cmp	r3, r4
 800779c:	6011      	str	r1, [r2, #0]
 800779e:	d1dd      	bne.n	800775c <_free_r+0x28>
 80077a0:	681c      	ldr	r4, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	6053      	str	r3, [r2, #4]
 80077a6:	4421      	add	r1, r4
 80077a8:	6011      	str	r1, [r2, #0]
 80077aa:	e7d7      	b.n	800775c <_free_r+0x28>
 80077ac:	d902      	bls.n	80077b4 <_free_r+0x80>
 80077ae:	230c      	movs	r3, #12
 80077b0:	6003      	str	r3, [r0, #0]
 80077b2:	e7d3      	b.n	800775c <_free_r+0x28>
 80077b4:	6825      	ldr	r5, [r4, #0]
 80077b6:	1961      	adds	r1, r4, r5
 80077b8:	428b      	cmp	r3, r1
 80077ba:	bf04      	itt	eq
 80077bc:	6819      	ldreq	r1, [r3, #0]
 80077be:	685b      	ldreq	r3, [r3, #4]
 80077c0:	6063      	str	r3, [r4, #4]
 80077c2:	bf04      	itt	eq
 80077c4:	1949      	addeq	r1, r1, r5
 80077c6:	6021      	streq	r1, [r4, #0]
 80077c8:	6054      	str	r4, [r2, #4]
 80077ca:	e7c7      	b.n	800775c <_free_r+0x28>
 80077cc:	b003      	add	sp, #12
 80077ce:	bd30      	pop	{r4, r5, pc}
 80077d0:	20000118 	.word	0x20000118

080077d4 <_malloc_r>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	1ccd      	adds	r5, r1, #3
 80077d8:	f025 0503 	bic.w	r5, r5, #3
 80077dc:	3508      	adds	r5, #8
 80077de:	2d0c      	cmp	r5, #12
 80077e0:	bf38      	it	cc
 80077e2:	250c      	movcc	r5, #12
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	4606      	mov	r6, r0
 80077e8:	db01      	blt.n	80077ee <_malloc_r+0x1a>
 80077ea:	42a9      	cmp	r1, r5
 80077ec:	d903      	bls.n	80077f6 <_malloc_r+0x22>
 80077ee:	230c      	movs	r3, #12
 80077f0:	6033      	str	r3, [r6, #0]
 80077f2:	2000      	movs	r0, #0
 80077f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f6:	f000 f87d 	bl	80078f4 <__malloc_lock>
 80077fa:	4921      	ldr	r1, [pc, #132]	; (8007880 <_malloc_r+0xac>)
 80077fc:	680a      	ldr	r2, [r1, #0]
 80077fe:	4614      	mov	r4, r2
 8007800:	b99c      	cbnz	r4, 800782a <_malloc_r+0x56>
 8007802:	4f20      	ldr	r7, [pc, #128]	; (8007884 <_malloc_r+0xb0>)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	b923      	cbnz	r3, 8007812 <_malloc_r+0x3e>
 8007808:	4621      	mov	r1, r4
 800780a:	4630      	mov	r0, r6
 800780c:	f000 f862 	bl	80078d4 <_sbrk_r>
 8007810:	6038      	str	r0, [r7, #0]
 8007812:	4629      	mov	r1, r5
 8007814:	4630      	mov	r0, r6
 8007816:	f000 f85d 	bl	80078d4 <_sbrk_r>
 800781a:	1c43      	adds	r3, r0, #1
 800781c:	d123      	bne.n	8007866 <_malloc_r+0x92>
 800781e:	230c      	movs	r3, #12
 8007820:	6033      	str	r3, [r6, #0]
 8007822:	4630      	mov	r0, r6
 8007824:	f000 f86c 	bl	8007900 <__malloc_unlock>
 8007828:	e7e3      	b.n	80077f2 <_malloc_r+0x1e>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	1b5b      	subs	r3, r3, r5
 800782e:	d417      	bmi.n	8007860 <_malloc_r+0x8c>
 8007830:	2b0b      	cmp	r3, #11
 8007832:	d903      	bls.n	800783c <_malloc_r+0x68>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	441c      	add	r4, r3
 8007838:	6025      	str	r5, [r4, #0]
 800783a:	e004      	b.n	8007846 <_malloc_r+0x72>
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	42a2      	cmp	r2, r4
 8007840:	bf0c      	ite	eq
 8007842:	600b      	streq	r3, [r1, #0]
 8007844:	6053      	strne	r3, [r2, #4]
 8007846:	4630      	mov	r0, r6
 8007848:	f000 f85a 	bl	8007900 <__malloc_unlock>
 800784c:	f104 000b 	add.w	r0, r4, #11
 8007850:	1d23      	adds	r3, r4, #4
 8007852:	f020 0007 	bic.w	r0, r0, #7
 8007856:	1ac2      	subs	r2, r0, r3
 8007858:	d0cc      	beq.n	80077f4 <_malloc_r+0x20>
 800785a:	1a1b      	subs	r3, r3, r0
 800785c:	50a3      	str	r3, [r4, r2]
 800785e:	e7c9      	b.n	80077f4 <_malloc_r+0x20>
 8007860:	4622      	mov	r2, r4
 8007862:	6864      	ldr	r4, [r4, #4]
 8007864:	e7cc      	b.n	8007800 <_malloc_r+0x2c>
 8007866:	1cc4      	adds	r4, r0, #3
 8007868:	f024 0403 	bic.w	r4, r4, #3
 800786c:	42a0      	cmp	r0, r4
 800786e:	d0e3      	beq.n	8007838 <_malloc_r+0x64>
 8007870:	1a21      	subs	r1, r4, r0
 8007872:	4630      	mov	r0, r6
 8007874:	f000 f82e 	bl	80078d4 <_sbrk_r>
 8007878:	3001      	adds	r0, #1
 800787a:	d1dd      	bne.n	8007838 <_malloc_r+0x64>
 800787c:	e7cf      	b.n	800781e <_malloc_r+0x4a>
 800787e:	bf00      	nop
 8007880:	20000118 	.word	0x20000118
 8007884:	2000011c 	.word	0x2000011c

08007888 <_realloc_r>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	4607      	mov	r7, r0
 800788c:	4614      	mov	r4, r2
 800788e:	460e      	mov	r6, r1
 8007890:	b921      	cbnz	r1, 800789c <_realloc_r+0x14>
 8007892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007896:	4611      	mov	r1, r2
 8007898:	f7ff bf9c 	b.w	80077d4 <_malloc_r>
 800789c:	b922      	cbnz	r2, 80078a8 <_realloc_r+0x20>
 800789e:	f7ff ff49 	bl	8007734 <_free_r>
 80078a2:	4625      	mov	r5, r4
 80078a4:	4628      	mov	r0, r5
 80078a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a8:	f000 f830 	bl	800790c <_malloc_usable_size_r>
 80078ac:	42a0      	cmp	r0, r4
 80078ae:	d20f      	bcs.n	80078d0 <_realloc_r+0x48>
 80078b0:	4621      	mov	r1, r4
 80078b2:	4638      	mov	r0, r7
 80078b4:	f7ff ff8e 	bl	80077d4 <_malloc_r>
 80078b8:	4605      	mov	r5, r0
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d0f2      	beq.n	80078a4 <_realloc_r+0x1c>
 80078be:	4631      	mov	r1, r6
 80078c0:	4622      	mov	r2, r4
 80078c2:	f7ff fbf7 	bl	80070b4 <memcpy>
 80078c6:	4631      	mov	r1, r6
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7ff ff33 	bl	8007734 <_free_r>
 80078ce:	e7e9      	b.n	80078a4 <_realloc_r+0x1c>
 80078d0:	4635      	mov	r5, r6
 80078d2:	e7e7      	b.n	80078a4 <_realloc_r+0x1c>

080078d4 <_sbrk_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4d06      	ldr	r5, [pc, #24]	; (80078f0 <_sbrk_r+0x1c>)
 80078d8:	2300      	movs	r3, #0
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7fb fb9e 	bl	8003020 <_sbrk>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_sbrk_r+0x1a>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_sbrk_r+0x1a>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	200002f8 	.word	0x200002f8

080078f4 <__malloc_lock>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__malloc_lock+0x8>)
 80078f6:	f000 b811 	b.w	800791c <__retarget_lock_acquire_recursive>
 80078fa:	bf00      	nop
 80078fc:	20000300 	.word	0x20000300

08007900 <__malloc_unlock>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__malloc_unlock+0x8>)
 8007902:	f000 b80c 	b.w	800791e <__retarget_lock_release_recursive>
 8007906:	bf00      	nop
 8007908:	20000300 	.word	0x20000300

0800790c <_malloc_usable_size_r>:
 800790c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007910:	1f18      	subs	r0, r3, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfbc      	itt	lt
 8007916:	580b      	ldrlt	r3, [r1, r0]
 8007918:	18c0      	addlt	r0, r0, r3
 800791a:	4770      	bx	lr

0800791c <__retarget_lock_acquire_recursive>:
 800791c:	4770      	bx	lr

0800791e <__retarget_lock_release_recursive>:
 800791e:	4770      	bx	lr

08007920 <sinf>:
 8007920:	ee10 3a10 	vmov	r3, s0
 8007924:	b507      	push	{r0, r1, r2, lr}
 8007926:	4a1d      	ldr	r2, [pc, #116]	; (800799c <sinf+0x7c>)
 8007928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800792c:	4293      	cmp	r3, r2
 800792e:	dc05      	bgt.n	800793c <sinf+0x1c>
 8007930:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80079a0 <sinf+0x80>
 8007934:	2000      	movs	r0, #0
 8007936:	f000 fc5b 	bl	80081f0 <__kernel_sinf>
 800793a:	e004      	b.n	8007946 <sinf+0x26>
 800793c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007940:	db04      	blt.n	800794c <sinf+0x2c>
 8007942:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007946:	b003      	add	sp, #12
 8007948:	f85d fb04 	ldr.w	pc, [sp], #4
 800794c:	4668      	mov	r0, sp
 800794e:	f000 f829 	bl	80079a4 <__ieee754_rem_pio2f>
 8007952:	f000 0003 	and.w	r0, r0, #3
 8007956:	2801      	cmp	r0, #1
 8007958:	d008      	beq.n	800796c <sinf+0x4c>
 800795a:	2802      	cmp	r0, #2
 800795c:	d00d      	beq.n	800797a <sinf+0x5a>
 800795e:	b9b0      	cbnz	r0, 800798e <sinf+0x6e>
 8007960:	eddd 0a01 	vldr	s1, [sp, #4]
 8007964:	ed9d 0a00 	vldr	s0, [sp]
 8007968:	2001      	movs	r0, #1
 800796a:	e7e4      	b.n	8007936 <sinf+0x16>
 800796c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007970:	ed9d 0a00 	vldr	s0, [sp]
 8007974:	f000 f952 	bl	8007c1c <__kernel_cosf>
 8007978:	e7e5      	b.n	8007946 <sinf+0x26>
 800797a:	eddd 0a01 	vldr	s1, [sp, #4]
 800797e:	ed9d 0a00 	vldr	s0, [sp]
 8007982:	2001      	movs	r0, #1
 8007984:	f000 fc34 	bl	80081f0 <__kernel_sinf>
 8007988:	eeb1 0a40 	vneg.f32	s0, s0
 800798c:	e7db      	b.n	8007946 <sinf+0x26>
 800798e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007992:	ed9d 0a00 	vldr	s0, [sp]
 8007996:	f000 f941 	bl	8007c1c <__kernel_cosf>
 800799a:	e7f5      	b.n	8007988 <sinf+0x68>
 800799c:	3f490fd8 	.word	0x3f490fd8
 80079a0:	00000000 	.word	0x00000000

080079a4 <__ieee754_rem_pio2f>:
 80079a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a6:	ee10 6a10 	vmov	r6, s0
 80079aa:	4b8e      	ldr	r3, [pc, #568]	; (8007be4 <__ieee754_rem_pio2f+0x240>)
 80079ac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80079b0:	429d      	cmp	r5, r3
 80079b2:	b087      	sub	sp, #28
 80079b4:	eef0 7a40 	vmov.f32	s15, s0
 80079b8:	4604      	mov	r4, r0
 80079ba:	dc05      	bgt.n	80079c8 <__ieee754_rem_pio2f+0x24>
 80079bc:	2300      	movs	r3, #0
 80079be:	ed80 0a00 	vstr	s0, [r0]
 80079c2:	6043      	str	r3, [r0, #4]
 80079c4:	2000      	movs	r0, #0
 80079c6:	e01a      	b.n	80079fe <__ieee754_rem_pio2f+0x5a>
 80079c8:	4b87      	ldr	r3, [pc, #540]	; (8007be8 <__ieee754_rem_pio2f+0x244>)
 80079ca:	429d      	cmp	r5, r3
 80079cc:	dc46      	bgt.n	8007a5c <__ieee754_rem_pio2f+0xb8>
 80079ce:	2e00      	cmp	r6, #0
 80079d0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007bec <__ieee754_rem_pio2f+0x248>
 80079d4:	4b86      	ldr	r3, [pc, #536]	; (8007bf0 <__ieee754_rem_pio2f+0x24c>)
 80079d6:	f025 050f 	bic.w	r5, r5, #15
 80079da:	dd1f      	ble.n	8007a1c <__ieee754_rem_pio2f+0x78>
 80079dc:	429d      	cmp	r5, r3
 80079de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80079e2:	d00e      	beq.n	8007a02 <__ieee754_rem_pio2f+0x5e>
 80079e4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007bf4 <__ieee754_rem_pio2f+0x250>
 80079e8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80079ec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80079f0:	ed80 0a00 	vstr	s0, [r0]
 80079f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80079f8:	2001      	movs	r0, #1
 80079fa:	edc4 7a01 	vstr	s15, [r4, #4]
 80079fe:	b007      	add	sp, #28
 8007a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a02:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007bf8 <__ieee754_rem_pio2f+0x254>
 8007a06:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007bfc <__ieee754_rem_pio2f+0x258>
 8007a0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007a0e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007a12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a16:	edc0 6a00 	vstr	s13, [r0]
 8007a1a:	e7eb      	b.n	80079f4 <__ieee754_rem_pio2f+0x50>
 8007a1c:	429d      	cmp	r5, r3
 8007a1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007a22:	d00e      	beq.n	8007a42 <__ieee754_rem_pio2f+0x9e>
 8007a24:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007bf4 <__ieee754_rem_pio2f+0x250>
 8007a28:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007a2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007a30:	ed80 0a00 	vstr	s0, [r0]
 8007a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	edc4 7a01 	vstr	s15, [r4, #4]
 8007a40:	e7dd      	b.n	80079fe <__ieee754_rem_pio2f+0x5a>
 8007a42:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007bf8 <__ieee754_rem_pio2f+0x254>
 8007a46:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007bfc <__ieee754_rem_pio2f+0x258>
 8007a4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007a4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007a52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a56:	edc0 6a00 	vstr	s13, [r0]
 8007a5a:	e7eb      	b.n	8007a34 <__ieee754_rem_pio2f+0x90>
 8007a5c:	4b68      	ldr	r3, [pc, #416]	; (8007c00 <__ieee754_rem_pio2f+0x25c>)
 8007a5e:	429d      	cmp	r5, r3
 8007a60:	dc72      	bgt.n	8007b48 <__ieee754_rem_pio2f+0x1a4>
 8007a62:	f000 fc0d 	bl	8008280 <fabsf>
 8007a66:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007c04 <__ieee754_rem_pio2f+0x260>
 8007a6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007a6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a7a:	ee17 0a90 	vmov	r0, s15
 8007a7e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007bec <__ieee754_rem_pio2f+0x248>
 8007a82:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007a86:	281f      	cmp	r0, #31
 8007a88:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007bf4 <__ieee754_rem_pio2f+0x250>
 8007a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a90:	eeb1 6a47 	vneg.f32	s12, s14
 8007a94:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007a98:	ee16 2a90 	vmov	r2, s13
 8007a9c:	dc1c      	bgt.n	8007ad8 <__ieee754_rem_pio2f+0x134>
 8007a9e:	495a      	ldr	r1, [pc, #360]	; (8007c08 <__ieee754_rem_pio2f+0x264>)
 8007aa0:	1e47      	subs	r7, r0, #1
 8007aa2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007aa6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007aaa:	428b      	cmp	r3, r1
 8007aac:	d014      	beq.n	8007ad8 <__ieee754_rem_pio2f+0x134>
 8007aae:	6022      	str	r2, [r4, #0]
 8007ab0:	ed94 7a00 	vldr	s14, [r4]
 8007ab4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007abe:	ed84 0a01 	vstr	s0, [r4, #4]
 8007ac2:	da9c      	bge.n	80079fe <__ieee754_rem_pio2f+0x5a>
 8007ac4:	eeb1 7a47 	vneg.f32	s14, s14
 8007ac8:	eeb1 0a40 	vneg.f32	s0, s0
 8007acc:	ed84 7a00 	vstr	s14, [r4]
 8007ad0:	ed84 0a01 	vstr	s0, [r4, #4]
 8007ad4:	4240      	negs	r0, r0
 8007ad6:	e792      	b.n	80079fe <__ieee754_rem_pio2f+0x5a>
 8007ad8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007adc:	15eb      	asrs	r3, r5, #23
 8007ade:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8007ae2:	2d08      	cmp	r5, #8
 8007ae4:	dde3      	ble.n	8007aae <__ieee754_rem_pio2f+0x10a>
 8007ae6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007bf8 <__ieee754_rem_pio2f+0x254>
 8007aea:	eef0 6a40 	vmov.f32	s13, s0
 8007aee:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007af2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007af6:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007afa:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007bfc <__ieee754_rem_pio2f+0x258>
 8007afe:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8007b02:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007b06:	eef0 7a40 	vmov.f32	s15, s0
 8007b0a:	ee15 2a90 	vmov	r2, s11
 8007b0e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007b12:	1a5b      	subs	r3, r3, r1
 8007b14:	2b19      	cmp	r3, #25
 8007b16:	dc04      	bgt.n	8007b22 <__ieee754_rem_pio2f+0x17e>
 8007b18:	edc4 5a00 	vstr	s11, [r4]
 8007b1c:	eeb0 0a66 	vmov.f32	s0, s13
 8007b20:	e7c6      	b.n	8007ab0 <__ieee754_rem_pio2f+0x10c>
 8007b22:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007c0c <__ieee754_rem_pio2f+0x268>
 8007b26:	eeb0 0a66 	vmov.f32	s0, s13
 8007b2a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007b2e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007b32:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007c10 <__ieee754_rem_pio2f+0x26c>
 8007b36:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007b3a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007b3e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007b42:	ed84 7a00 	vstr	s14, [r4]
 8007b46:	e7b3      	b.n	8007ab0 <__ieee754_rem_pio2f+0x10c>
 8007b48:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8007b4c:	db06      	blt.n	8007b5c <__ieee754_rem_pio2f+0x1b8>
 8007b4e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007b52:	edc0 7a01 	vstr	s15, [r0, #4]
 8007b56:	edc0 7a00 	vstr	s15, [r0]
 8007b5a:	e733      	b.n	80079c4 <__ieee754_rem_pio2f+0x20>
 8007b5c:	15ea      	asrs	r2, r5, #23
 8007b5e:	3a86      	subs	r2, #134	; 0x86
 8007b60:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b6c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007c14 <__ieee754_rem_pio2f+0x270>
 8007b70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b78:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007b7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b8c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007b90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9c:	edcd 7a05 	vstr	s15, [sp, #20]
 8007ba0:	d11e      	bne.n	8007be0 <__ieee754_rem_pio2f+0x23c>
 8007ba2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007baa:	bf14      	ite	ne
 8007bac:	2302      	movne	r3, #2
 8007bae:	2301      	moveq	r3, #1
 8007bb0:	4919      	ldr	r1, [pc, #100]	; (8007c18 <__ieee754_rem_pio2f+0x274>)
 8007bb2:	9101      	str	r1, [sp, #4]
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	9100      	str	r1, [sp, #0]
 8007bb8:	a803      	add	r0, sp, #12
 8007bba:	4621      	mov	r1, r4
 8007bbc:	f000 f88e 	bl	8007cdc <__kernel_rem_pio2f>
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	f6bf af1c 	bge.w	80079fe <__ieee754_rem_pio2f+0x5a>
 8007bc6:	edd4 7a00 	vldr	s15, [r4]
 8007bca:	eef1 7a67 	vneg.f32	s15, s15
 8007bce:	edc4 7a00 	vstr	s15, [r4]
 8007bd2:	edd4 7a01 	vldr	s15, [r4, #4]
 8007bd6:	eef1 7a67 	vneg.f32	s15, s15
 8007bda:	edc4 7a01 	vstr	s15, [r4, #4]
 8007bde:	e779      	b.n	8007ad4 <__ieee754_rem_pio2f+0x130>
 8007be0:	2303      	movs	r3, #3
 8007be2:	e7e5      	b.n	8007bb0 <__ieee754_rem_pio2f+0x20c>
 8007be4:	3f490fd8 	.word	0x3f490fd8
 8007be8:	4016cbe3 	.word	0x4016cbe3
 8007bec:	3fc90f80 	.word	0x3fc90f80
 8007bf0:	3fc90fd0 	.word	0x3fc90fd0
 8007bf4:	37354443 	.word	0x37354443
 8007bf8:	37354400 	.word	0x37354400
 8007bfc:	2e85a308 	.word	0x2e85a308
 8007c00:	43490f80 	.word	0x43490f80
 8007c04:	3f22f984 	.word	0x3f22f984
 8007c08:	08008828 	.word	0x08008828
 8007c0c:	2e85a300 	.word	0x2e85a300
 8007c10:	248d3132 	.word	0x248d3132
 8007c14:	43800000 	.word	0x43800000
 8007c18:	080088a8 	.word	0x080088a8

08007c1c <__kernel_cosf>:
 8007c1c:	ee10 3a10 	vmov	r3, s0
 8007c20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c24:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007c28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007c2c:	da05      	bge.n	8007c3a <__kernel_cosf+0x1e>
 8007c2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007c32:	ee17 2a90 	vmov	r2, s15
 8007c36:	2a00      	cmp	r2, #0
 8007c38:	d03d      	beq.n	8007cb6 <__kernel_cosf+0x9a>
 8007c3a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007c3e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007cbc <__kernel_cosf+0xa0>
 8007c42:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8007cc0 <__kernel_cosf+0xa4>
 8007c46:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007cc4 <__kernel_cosf+0xa8>
 8007c4a:	4a1f      	ldr	r2, [pc, #124]	; (8007cc8 <__kernel_cosf+0xac>)
 8007c4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007c50:	4293      	cmp	r3, r2
 8007c52:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007ccc <__kernel_cosf+0xb0>
 8007c56:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007c5a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8007cd0 <__kernel_cosf+0xb4>
 8007c5e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007c62:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007cd4 <__kernel_cosf+0xb8>
 8007c66:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007c6a:	eeb0 7a66 	vmov.f32	s14, s13
 8007c6e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007c72:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007c76:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007c7a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8007c7e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8007c82:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007c86:	dc04      	bgt.n	8007c92 <__kernel_cosf+0x76>
 8007c88:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007c8c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8007c90:	4770      	bx	lr
 8007c92:	4a11      	ldr	r2, [pc, #68]	; (8007cd8 <__kernel_cosf+0xbc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	bfda      	itte	le
 8007c98:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007c9c:	ee06 3a90 	vmovle	s13, r3
 8007ca0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007ca4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ca8:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007cac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cb0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007cb4:	4770      	bx	lr
 8007cb6:	eeb0 0a46 	vmov.f32	s0, s12
 8007cba:	4770      	bx	lr
 8007cbc:	ad47d74e 	.word	0xad47d74e
 8007cc0:	310f74f6 	.word	0x310f74f6
 8007cc4:	3d2aaaab 	.word	0x3d2aaaab
 8007cc8:	3e999999 	.word	0x3e999999
 8007ccc:	b493f27c 	.word	0xb493f27c
 8007cd0:	37d00d01 	.word	0x37d00d01
 8007cd4:	bab60b61 	.word	0xbab60b61
 8007cd8:	3f480000 	.word	0x3f480000

08007cdc <__kernel_rem_pio2f>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	ed2d 8b04 	vpush	{d8-d9}
 8007ce4:	b0d7      	sub	sp, #348	; 0x15c
 8007ce6:	4616      	mov	r6, r2
 8007ce8:	4698      	mov	r8, r3
 8007cea:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007cec:	4bbb      	ldr	r3, [pc, #748]	; (8007fdc <__kernel_rem_pio2f+0x300>)
 8007cee:	9001      	str	r0, [sp, #4]
 8007cf0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007cf4:	1d33      	adds	r3, r6, #4
 8007cf6:	460d      	mov	r5, r1
 8007cf8:	f108 39ff 	add.w	r9, r8, #4294967295
 8007cfc:	db29      	blt.n	8007d52 <__kernel_rem_pio2f+0x76>
 8007cfe:	1ef1      	subs	r1, r6, #3
 8007d00:	bf48      	it	mi
 8007d02:	1d31      	addmi	r1, r6, #4
 8007d04:	10c9      	asrs	r1, r1, #3
 8007d06:	1c4c      	adds	r4, r1, #1
 8007d08:	00e3      	lsls	r3, r4, #3
 8007d0a:	9302      	str	r3, [sp, #8]
 8007d0c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007d0e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007fec <__kernel_rem_pio2f+0x310>
 8007d12:	eba1 0009 	sub.w	r0, r1, r9
 8007d16:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8007d1a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8007d1e:	eb07 0c09 	add.w	ip, r7, r9
 8007d22:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8007d26:	2300      	movs	r3, #0
 8007d28:	4563      	cmp	r3, ip
 8007d2a:	dd14      	ble.n	8007d56 <__kernel_rem_pio2f+0x7a>
 8007d2c:	ab1a      	add	r3, sp, #104	; 0x68
 8007d2e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8007d32:	46cc      	mov	ip, r9
 8007d34:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8007d38:	f1c8 0b01 	rsb	fp, r8, #1
 8007d3c:	eb0b 020c 	add.w	r2, fp, ip
 8007d40:	4297      	cmp	r7, r2
 8007d42:	db27      	blt.n	8007d94 <__kernel_rem_pio2f+0xb8>
 8007d44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007d48:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007fec <__kernel_rem_pio2f+0x310>
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	2200      	movs	r2, #0
 8007d50:	e016      	b.n	8007d80 <__kernel_rem_pio2f+0xa4>
 8007d52:	2100      	movs	r1, #0
 8007d54:	e7d7      	b.n	8007d06 <__kernel_rem_pio2f+0x2a>
 8007d56:	42d8      	cmn	r0, r3
 8007d58:	bf5d      	ittte	pl
 8007d5a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8007d5e:	ee07 2a90 	vmovpl	s15, r2
 8007d62:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007d66:	eef0 7a47 	vmovmi.f32	s15, s14
 8007d6a:	ecea 7a01 	vstmia	sl!, {s15}
 8007d6e:	3301      	adds	r3, #1
 8007d70:	e7da      	b.n	8007d28 <__kernel_rem_pio2f+0x4c>
 8007d72:	ecfe 6a01 	vldmia	lr!, {s13}
 8007d76:	ed90 7a00 	vldr	s14, [r0]
 8007d7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007d7e:	3201      	adds	r2, #1
 8007d80:	454a      	cmp	r2, r9
 8007d82:	f1a0 0004 	sub.w	r0, r0, #4
 8007d86:	ddf4      	ble.n	8007d72 <__kernel_rem_pio2f+0x96>
 8007d88:	ecea 7a01 	vstmia	sl!, {s15}
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	f10c 0c01 	add.w	ip, ip, #1
 8007d92:	e7d3      	b.n	8007d3c <__kernel_rem_pio2f+0x60>
 8007d94:	ab06      	add	r3, sp, #24
 8007d96:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007d9a:	9304      	str	r3, [sp, #16]
 8007d9c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8007d9e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007fe8 <__kernel_rem_pio2f+0x30c>
 8007da2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007fe4 <__kernel_rem_pio2f+0x308>
 8007da6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007daa:	9303      	str	r3, [sp, #12]
 8007dac:	46ba      	mov	sl, r7
 8007dae:	ab56      	add	r3, sp, #344	; 0x158
 8007db0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007db4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007db8:	ab06      	add	r3, sp, #24
 8007dba:	4618      	mov	r0, r3
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	dc51      	bgt.n	8007e66 <__kernel_rem_pio2f+0x18a>
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	9305      	str	r3, [sp, #20]
 8007dc6:	f000 faa5 	bl	8008314 <scalbnf>
 8007dca:	eeb0 8a40 	vmov.f32	s16, s0
 8007dce:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007dd2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007dd6:	f000 fa5b 	bl	8008290 <floorf>
 8007dda:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007dde:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007de2:	2c00      	cmp	r4, #0
 8007de4:	9b05      	ldr	r3, [sp, #20]
 8007de6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007dea:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8007dee:	edcd 7a00 	vstr	s15, [sp]
 8007df2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007df6:	dd4b      	ble.n	8007e90 <__kernel_rem_pio2f+0x1b4>
 8007df8:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007dfc:	aa06      	add	r2, sp, #24
 8007dfe:	f1c4 0e08 	rsb	lr, r4, #8
 8007e02:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007e06:	ee17 1a90 	vmov	r1, s15
 8007e0a:	fa42 f00e 	asr.w	r0, r2, lr
 8007e0e:	4401      	add	r1, r0
 8007e10:	9100      	str	r1, [sp, #0]
 8007e12:	fa00 f00e 	lsl.w	r0, r0, lr
 8007e16:	a906      	add	r1, sp, #24
 8007e18:	1a12      	subs	r2, r2, r0
 8007e1a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007e1e:	f1c4 0007 	rsb	r0, r4, #7
 8007e22:	fa42 fb00 	asr.w	fp, r2, r0
 8007e26:	f1bb 0f00 	cmp.w	fp, #0
 8007e2a:	dd43      	ble.n	8007eb4 <__kernel_rem_pio2f+0x1d8>
 8007e2c:	9a00      	ldr	r2, [sp, #0]
 8007e2e:	f04f 0e00 	mov.w	lr, #0
 8007e32:	3201      	adds	r2, #1
 8007e34:	9200      	str	r2, [sp, #0]
 8007e36:	4670      	mov	r0, lr
 8007e38:	45f2      	cmp	sl, lr
 8007e3a:	dc6c      	bgt.n	8007f16 <__kernel_rem_pio2f+0x23a>
 8007e3c:	2c00      	cmp	r4, #0
 8007e3e:	dd04      	ble.n	8007e4a <__kernel_rem_pio2f+0x16e>
 8007e40:	2c01      	cmp	r4, #1
 8007e42:	d079      	beq.n	8007f38 <__kernel_rem_pio2f+0x25c>
 8007e44:	2c02      	cmp	r4, #2
 8007e46:	f000 8082 	beq.w	8007f4e <__kernel_rem_pio2f+0x272>
 8007e4a:	f1bb 0f02 	cmp.w	fp, #2
 8007e4e:	d131      	bne.n	8007eb4 <__kernel_rem_pio2f+0x1d8>
 8007e50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e54:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007e58:	b360      	cbz	r0, 8007eb4 <__kernel_rem_pio2f+0x1d8>
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fa5a 	bl	8008314 <scalbnf>
 8007e60:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007e64:	e026      	b.n	8007eb4 <__kernel_rem_pio2f+0x1d8>
 8007e66:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007e6a:	3a01      	subs	r2, #1
 8007e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e70:	a942      	add	r1, sp, #264	; 0x108
 8007e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e76:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007e7a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007e7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007e82:	eca0 0a01 	vstmia	r0!, {s0}
 8007e86:	ed9c 0a00 	vldr	s0, [ip]
 8007e8a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007e8e:	e796      	b.n	8007dbe <__kernel_rem_pio2f+0xe2>
 8007e90:	d107      	bne.n	8007ea2 <__kernel_rem_pio2f+0x1c6>
 8007e92:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007e96:	a906      	add	r1, sp, #24
 8007e98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e9c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8007ea0:	e7c1      	b.n	8007e26 <__kernel_rem_pio2f+0x14a>
 8007ea2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007ea6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eae:	da2f      	bge.n	8007f10 <__kernel_rem_pio2f+0x234>
 8007eb0:	f04f 0b00 	mov.w	fp, #0
 8007eb4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ebc:	f040 8098 	bne.w	8007ff0 <__kernel_rem_pio2f+0x314>
 8007ec0:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007ec4:	469c      	mov	ip, r3
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	45bc      	cmp	ip, r7
 8007eca:	da48      	bge.n	8007f5e <__kernel_rem_pio2f+0x282>
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	d05f      	beq.n	8007f90 <__kernel_rem_pio2f+0x2b4>
 8007ed0:	aa06      	add	r2, sp, #24
 8007ed2:	3c08      	subs	r4, #8
 8007ed4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007ed8:	2900      	cmp	r1, #0
 8007eda:	d07d      	beq.n	8007fd8 <__kernel_rem_pio2f+0x2fc>
 8007edc:	4620      	mov	r0, r4
 8007ede:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	f000 fa16 	bl	8008314 <scalbnf>
 8007ee8:	9b01      	ldr	r3, [sp, #4]
 8007eea:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007fe8 <__kernel_rem_pio2f+0x30c>
 8007eee:	4619      	mov	r1, r3
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	f280 80af 	bge.w	8008054 <__kernel_rem_pio2f+0x378>
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	2400      	movs	r4, #0
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f2c0 80d0 	blt.w	80080a0 <__kernel_rem_pio2f+0x3c4>
 8007f00:	a942      	add	r1, sp, #264	; 0x108
 8007f02:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8007f06:	4a36      	ldr	r2, [pc, #216]	; (8007fe0 <__kernel_rem_pio2f+0x304>)
 8007f08:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007fec <__kernel_rem_pio2f+0x310>
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	e0bb      	b.n	8008088 <__kernel_rem_pio2f+0x3ac>
 8007f10:	f04f 0b02 	mov.w	fp, #2
 8007f14:	e78a      	b.n	8007e2c <__kernel_rem_pio2f+0x150>
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	b948      	cbnz	r0, 8007f2e <__kernel_rem_pio2f+0x252>
 8007f1a:	b11a      	cbz	r2, 8007f24 <__kernel_rem_pio2f+0x248>
 8007f1c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f10e 0e01 	add.w	lr, lr, #1
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	e784      	b.n	8007e38 <__kernel_rem_pio2f+0x15c>
 8007f2e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	4602      	mov	r2, r0
 8007f36:	e7f5      	b.n	8007f24 <__kernel_rem_pio2f+0x248>
 8007f38:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007f3c:	ab06      	add	r3, sp, #24
 8007f3e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f46:	aa06      	add	r2, sp, #24
 8007f48:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8007f4c:	e77d      	b.n	8007e4a <__kernel_rem_pio2f+0x16e>
 8007f4e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007f52:	ab06      	add	r3, sp, #24
 8007f54:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f5c:	e7f3      	b.n	8007f46 <__kernel_rem_pio2f+0x26a>
 8007f5e:	a906      	add	r1, sp, #24
 8007f60:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007f64:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f68:	4302      	orrs	r2, r0
 8007f6a:	e7ad      	b.n	8007ec8 <__kernel_rem_pio2f+0x1ec>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	d0fa      	beq.n	8007f6c <__kernel_rem_pio2f+0x290>
 8007f76:	a91a      	add	r1, sp, #104	; 0x68
 8007f78:	eb0a 0208 	add.w	r2, sl, r8
 8007f7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007f80:	f10a 0301 	add.w	r3, sl, #1
 8007f84:	eb0a 0100 	add.w	r1, sl, r0
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	da04      	bge.n	8007f96 <__kernel_rem_pio2f+0x2ba>
 8007f8c:	468a      	mov	sl, r1
 8007f8e:	e70e      	b.n	8007dae <__kernel_rem_pio2f+0xd2>
 8007f90:	9b04      	ldr	r3, [sp, #16]
 8007f92:	2001      	movs	r0, #1
 8007f94:	e7eb      	b.n	8007f6e <__kernel_rem_pio2f+0x292>
 8007f96:	9803      	ldr	r0, [sp, #12]
 8007f98:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007f9c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007fa0:	9000      	str	r0, [sp, #0]
 8007fa2:	ee07 0a90 	vmov	s15, r0
 8007fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007faa:	2000      	movs	r0, #0
 8007fac:	ece2 7a01 	vstmia	r2!, {s15}
 8007fb0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007fec <__kernel_rem_pio2f+0x310>
 8007fb4:	4696      	mov	lr, r2
 8007fb6:	4548      	cmp	r0, r9
 8007fb8:	dd06      	ble.n	8007fc8 <__kernel_rem_pio2f+0x2ec>
 8007fba:	a842      	add	r0, sp, #264	; 0x108
 8007fbc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007fc0:	edc0 7a00 	vstr	s15, [r0]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	e7df      	b.n	8007f88 <__kernel_rem_pio2f+0x2ac>
 8007fc8:	ecfc 6a01 	vldmia	ip!, {s13}
 8007fcc:	ed3e 7a01 	vldmdb	lr!, {s14}
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007fd6:	e7ee      	b.n	8007fb6 <__kernel_rem_pio2f+0x2da>
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	e779      	b.n	8007ed0 <__kernel_rem_pio2f+0x1f4>
 8007fdc:	08008bec 	.word	0x08008bec
 8007fe0:	08008bc0 	.word	0x08008bc0
 8007fe4:	43800000 	.word	0x43800000
 8007fe8:	3b800000 	.word	0x3b800000
 8007fec:	00000000 	.word	0x00000000
 8007ff0:	9b02      	ldr	r3, [sp, #8]
 8007ff2:	eeb0 0a48 	vmov.f32	s0, s16
 8007ff6:	1b98      	subs	r0, r3, r6
 8007ff8:	f000 f98c 	bl	8008314 <scalbnf>
 8007ffc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007fe4 <__kernel_rem_pio2f+0x308>
 8008000:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008008:	db1b      	blt.n	8008042 <__kernel_rem_pio2f+0x366>
 800800a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007fe8 <__kernel_rem_pio2f+0x30c>
 800800e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008012:	aa06      	add	r2, sp, #24
 8008014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008018:	a906      	add	r1, sp, #24
 800801a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800801e:	3408      	adds	r4, #8
 8008020:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008028:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800802c:	ee10 3a10 	vmov	r3, s0
 8008030:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8008034:	ee17 2a90 	vmov	r2, s15
 8008038:	f10a 0301 	add.w	r3, sl, #1
 800803c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008040:	e74c      	b.n	8007edc <__kernel_rem_pio2f+0x200>
 8008042:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008046:	aa06      	add	r2, sp, #24
 8008048:	ee10 3a10 	vmov	r3, s0
 800804c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8008050:	4653      	mov	r3, sl
 8008052:	e743      	b.n	8007edc <__kernel_rem_pio2f+0x200>
 8008054:	aa42      	add	r2, sp, #264	; 0x108
 8008056:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800805a:	aa06      	add	r2, sp, #24
 800805c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	ee07 2a90 	vmov	s15, r2
 8008066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800806a:	3901      	subs	r1, #1
 800806c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008070:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008074:	edc0 7a00 	vstr	s15, [r0]
 8008078:	e73a      	b.n	8007ef0 <__kernel_rem_pio2f+0x214>
 800807a:	ecf2 6a01 	vldmia	r2!, {s13}
 800807e:	ecb6 7a01 	vldmia	r6!, {s14}
 8008082:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008086:	3101      	adds	r1, #1
 8008088:	42b9      	cmp	r1, r7
 800808a:	dc01      	bgt.n	8008090 <__kernel_rem_pio2f+0x3b4>
 800808c:	428c      	cmp	r4, r1
 800808e:	daf4      	bge.n	800807a <__kernel_rem_pio2f+0x39e>
 8008090:	aa56      	add	r2, sp, #344	; 0x158
 8008092:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8008096:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800809a:	3801      	subs	r0, #1
 800809c:	3401      	adds	r4, #1
 800809e:	e72c      	b.n	8007efa <__kernel_rem_pio2f+0x21e>
 80080a0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80080a2:	2a02      	cmp	r2, #2
 80080a4:	dc0a      	bgt.n	80080bc <__kernel_rem_pio2f+0x3e0>
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	dc61      	bgt.n	800816e <__kernel_rem_pio2f+0x492>
 80080aa:	d03c      	beq.n	8008126 <__kernel_rem_pio2f+0x44a>
 80080ac:	9b00      	ldr	r3, [sp, #0]
 80080ae:	f003 0007 	and.w	r0, r3, #7
 80080b2:	b057      	add	sp, #348	; 0x15c
 80080b4:	ecbd 8b04 	vpop	{d8-d9}
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080bc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80080be:	2a03      	cmp	r2, #3
 80080c0:	d1f4      	bne.n	80080ac <__kernel_rem_pio2f+0x3d0>
 80080c2:	aa2e      	add	r2, sp, #184	; 0xb8
 80080c4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80080c8:	4608      	mov	r0, r1
 80080ca:	461c      	mov	r4, r3
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	f1a0 0004 	sub.w	r0, r0, #4
 80080d2:	dc59      	bgt.n	8008188 <__kernel_rem_pio2f+0x4ac>
 80080d4:	4618      	mov	r0, r3
 80080d6:	2801      	cmp	r0, #1
 80080d8:	f1a1 0104 	sub.w	r1, r1, #4
 80080dc:	dc64      	bgt.n	80081a8 <__kernel_rem_pio2f+0x4cc>
 80080de:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007fec <__kernel_rem_pio2f+0x310>
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	dc70      	bgt.n	80081c8 <__kernel_rem_pio2f+0x4ec>
 80080e6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80080ea:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80080ee:	f1bb 0f00 	cmp.w	fp, #0
 80080f2:	d172      	bne.n	80081da <__kernel_rem_pio2f+0x4fe>
 80080f4:	edc5 6a00 	vstr	s13, [r5]
 80080f8:	ed85 7a01 	vstr	s14, [r5, #4]
 80080fc:	edc5 7a02 	vstr	s15, [r5, #8]
 8008100:	e7d4      	b.n	80080ac <__kernel_rem_pio2f+0x3d0>
 8008102:	aa2e      	add	r2, sp, #184	; 0xb8
 8008104:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8008108:	ed91 7a00 	vldr	s14, [r1]
 800810c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008110:	3b01      	subs	r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	daf5      	bge.n	8008102 <__kernel_rem_pio2f+0x426>
 8008116:	f1bb 0f00 	cmp.w	fp, #0
 800811a:	d001      	beq.n	8008120 <__kernel_rem_pio2f+0x444>
 800811c:	eef1 7a67 	vneg.f32	s15, s15
 8008120:	edc5 7a00 	vstr	s15, [r5]
 8008124:	e7c2      	b.n	80080ac <__kernel_rem_pio2f+0x3d0>
 8008126:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007fec <__kernel_rem_pio2f+0x310>
 800812a:	e7f2      	b.n	8008112 <__kernel_rem_pio2f+0x436>
 800812c:	aa2e      	add	r2, sp, #184	; 0xb8
 800812e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8008132:	edd0 7a00 	vldr	s15, [r0]
 8008136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800813a:	3901      	subs	r1, #1
 800813c:	2900      	cmp	r1, #0
 800813e:	daf5      	bge.n	800812c <__kernel_rem_pio2f+0x450>
 8008140:	f1bb 0f00 	cmp.w	fp, #0
 8008144:	d017      	beq.n	8008176 <__kernel_rem_pio2f+0x49a>
 8008146:	eef1 7a47 	vneg.f32	s15, s14
 800814a:	edc5 7a00 	vstr	s15, [r5]
 800814e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008156:	a82f      	add	r0, sp, #188	; 0xbc
 8008158:	2101      	movs	r1, #1
 800815a:	428b      	cmp	r3, r1
 800815c:	da0e      	bge.n	800817c <__kernel_rem_pio2f+0x4a0>
 800815e:	f1bb 0f00 	cmp.w	fp, #0
 8008162:	d001      	beq.n	8008168 <__kernel_rem_pio2f+0x48c>
 8008164:	eef1 7a67 	vneg.f32	s15, s15
 8008168:	edc5 7a01 	vstr	s15, [r5, #4]
 800816c:	e79e      	b.n	80080ac <__kernel_rem_pio2f+0x3d0>
 800816e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007fec <__kernel_rem_pio2f+0x310>
 8008172:	4619      	mov	r1, r3
 8008174:	e7e2      	b.n	800813c <__kernel_rem_pio2f+0x460>
 8008176:	eef0 7a47 	vmov.f32	s15, s14
 800817a:	e7e6      	b.n	800814a <__kernel_rem_pio2f+0x46e>
 800817c:	ecb0 7a01 	vldmia	r0!, {s14}
 8008180:	3101      	adds	r1, #1
 8008182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008186:	e7e8      	b.n	800815a <__kernel_rem_pio2f+0x47e>
 8008188:	edd0 7a00 	vldr	s15, [r0]
 800818c:	edd0 6a01 	vldr	s13, [r0, #4]
 8008190:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008194:	3c01      	subs	r4, #1
 8008196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800819a:	ed80 7a00 	vstr	s14, [r0]
 800819e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80081a6:	e791      	b.n	80080cc <__kernel_rem_pio2f+0x3f0>
 80081a8:	edd1 7a00 	vldr	s15, [r1]
 80081ac:	edd1 6a01 	vldr	s13, [r1, #4]
 80081b0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80081b4:	3801      	subs	r0, #1
 80081b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081ba:	ed81 7a00 	vstr	s14, [r1]
 80081be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081c2:	edc1 7a01 	vstr	s15, [r1, #4]
 80081c6:	e786      	b.n	80080d6 <__kernel_rem_pio2f+0x3fa>
 80081c8:	aa2e      	add	r2, sp, #184	; 0xb8
 80081ca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80081ce:	ed91 7a00 	vldr	s14, [r1]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80081d8:	e783      	b.n	80080e2 <__kernel_rem_pio2f+0x406>
 80081da:	eef1 6a66 	vneg.f32	s13, s13
 80081de:	eeb1 7a47 	vneg.f32	s14, s14
 80081e2:	edc5 6a00 	vstr	s13, [r5]
 80081e6:	ed85 7a01 	vstr	s14, [r5, #4]
 80081ea:	eef1 7a67 	vneg.f32	s15, s15
 80081ee:	e785      	b.n	80080fc <__kernel_rem_pio2f+0x420>

080081f0 <__kernel_sinf>:
 80081f0:	ee10 3a10 	vmov	r3, s0
 80081f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081f8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80081fc:	da04      	bge.n	8008208 <__kernel_sinf+0x18>
 80081fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008202:	ee17 3a90 	vmov	r3, s15
 8008206:	b35b      	cbz	r3, 8008260 <__kernel_sinf+0x70>
 8008208:	ee20 7a00 	vmul.f32	s14, s0, s0
 800820c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008264 <__kernel_sinf+0x74>
 8008210:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008268 <__kernel_sinf+0x78>
 8008214:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008218:	eddf 7a14 	vldr	s15, [pc, #80]	; 800826c <__kernel_sinf+0x7c>
 800821c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008220:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8008270 <__kernel_sinf+0x80>
 8008224:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008228:	eddf 7a12 	vldr	s15, [pc, #72]	; 8008274 <__kernel_sinf+0x84>
 800822c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008230:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008234:	b930      	cbnz	r0, 8008244 <__kernel_sinf+0x54>
 8008236:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8008278 <__kernel_sinf+0x88>
 800823a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800823e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008242:	4770      	bx	lr
 8008244:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008248:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800824c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008250:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008254:	eddf 7a09 	vldr	s15, [pc, #36]	; 800827c <__kernel_sinf+0x8c>
 8008258:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800825c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	2f2ec9d3 	.word	0x2f2ec9d3
 8008268:	b2d72f34 	.word	0xb2d72f34
 800826c:	3638ef1b 	.word	0x3638ef1b
 8008270:	b9500d01 	.word	0xb9500d01
 8008274:	3c088889 	.word	0x3c088889
 8008278:	be2aaaab 	.word	0xbe2aaaab
 800827c:	3e2aaaab 	.word	0x3e2aaaab

08008280 <fabsf>:
 8008280:	ee10 3a10 	vmov	r3, s0
 8008284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008288:	ee00 3a10 	vmov	s0, r3
 800828c:	4770      	bx	lr
	...

08008290 <floorf>:
 8008290:	ee10 3a10 	vmov	r3, s0
 8008294:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008298:	3a7f      	subs	r2, #127	; 0x7f
 800829a:	2a16      	cmp	r2, #22
 800829c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80082a0:	dc2a      	bgt.n	80082f8 <floorf+0x68>
 80082a2:	2a00      	cmp	r2, #0
 80082a4:	da11      	bge.n	80082ca <floorf+0x3a>
 80082a6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008308 <floorf+0x78>
 80082aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b6:	dd05      	ble.n	80082c4 <floorf+0x34>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	da23      	bge.n	8008304 <floorf+0x74>
 80082bc:	4a13      	ldr	r2, [pc, #76]	; (800830c <floorf+0x7c>)
 80082be:	2900      	cmp	r1, #0
 80082c0:	bf18      	it	ne
 80082c2:	4613      	movne	r3, r2
 80082c4:	ee00 3a10 	vmov	s0, r3
 80082c8:	4770      	bx	lr
 80082ca:	4911      	ldr	r1, [pc, #68]	; (8008310 <floorf+0x80>)
 80082cc:	4111      	asrs	r1, r2
 80082ce:	420b      	tst	r3, r1
 80082d0:	d0fa      	beq.n	80082c8 <floorf+0x38>
 80082d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008308 <floorf+0x78>
 80082d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80082da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80082de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e2:	ddef      	ble.n	80082c4 <floorf+0x34>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfbe      	ittt	lt
 80082e8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80082ec:	fa40 f202 	asrlt.w	r2, r0, r2
 80082f0:	189b      	addlt	r3, r3, r2
 80082f2:	ea23 0301 	bic.w	r3, r3, r1
 80082f6:	e7e5      	b.n	80082c4 <floorf+0x34>
 80082f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80082fc:	d3e4      	bcc.n	80082c8 <floorf+0x38>
 80082fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008302:	4770      	bx	lr
 8008304:	2300      	movs	r3, #0
 8008306:	e7dd      	b.n	80082c4 <floorf+0x34>
 8008308:	7149f2ca 	.word	0x7149f2ca
 800830c:	bf800000 	.word	0xbf800000
 8008310:	007fffff 	.word	0x007fffff

08008314 <scalbnf>:
 8008314:	ee10 3a10 	vmov	r3, s0
 8008318:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800831c:	d025      	beq.n	800836a <scalbnf+0x56>
 800831e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008322:	d302      	bcc.n	800832a <scalbnf+0x16>
 8008324:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008328:	4770      	bx	lr
 800832a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800832e:	d122      	bne.n	8008376 <scalbnf+0x62>
 8008330:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <scalbnf+0xc8>)
 8008332:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80083e0 <scalbnf+0xcc>
 8008336:	4298      	cmp	r0, r3
 8008338:	ee20 0a27 	vmul.f32	s0, s0, s15
 800833c:	db16      	blt.n	800836c <scalbnf+0x58>
 800833e:	ee10 3a10 	vmov	r3, s0
 8008342:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008346:	3a19      	subs	r2, #25
 8008348:	4402      	add	r2, r0
 800834a:	2afe      	cmp	r2, #254	; 0xfe
 800834c:	dd15      	ble.n	800837a <scalbnf+0x66>
 800834e:	ee10 3a10 	vmov	r3, s0
 8008352:	eddf 7a24 	vldr	s15, [pc, #144]	; 80083e4 <scalbnf+0xd0>
 8008356:	eddf 6a24 	vldr	s13, [pc, #144]	; 80083e8 <scalbnf+0xd4>
 800835a:	2b00      	cmp	r3, #0
 800835c:	eeb0 7a67 	vmov.f32	s14, s15
 8008360:	bfb8      	it	lt
 8008362:	eef0 7a66 	vmovlt.f32	s15, s13
 8008366:	ee27 0a27 	vmul.f32	s0, s14, s15
 800836a:	4770      	bx	lr
 800836c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80083ec <scalbnf+0xd8>
 8008370:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008374:	4770      	bx	lr
 8008376:	0dd2      	lsrs	r2, r2, #23
 8008378:	e7e6      	b.n	8008348 <scalbnf+0x34>
 800837a:	2a00      	cmp	r2, #0
 800837c:	dd06      	ble.n	800838c <scalbnf+0x78>
 800837e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008382:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008386:	ee00 3a10 	vmov	s0, r3
 800838a:	4770      	bx	lr
 800838c:	f112 0f16 	cmn.w	r2, #22
 8008390:	da1a      	bge.n	80083c8 <scalbnf+0xb4>
 8008392:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008396:	4298      	cmp	r0, r3
 8008398:	ee10 3a10 	vmov	r3, s0
 800839c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083a0:	dd0a      	ble.n	80083b8 <scalbnf+0xa4>
 80083a2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80083e4 <scalbnf+0xd0>
 80083a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80083e8 <scalbnf+0xd4>
 80083aa:	eef0 7a40 	vmov.f32	s15, s0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bf18      	it	ne
 80083b2:	eeb0 0a47 	vmovne.f32	s0, s14
 80083b6:	e7db      	b.n	8008370 <scalbnf+0x5c>
 80083b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80083ec <scalbnf+0xd8>
 80083bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80083f0 <scalbnf+0xdc>
 80083c0:	eef0 7a40 	vmov.f32	s15, s0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	e7f3      	b.n	80083b0 <scalbnf+0x9c>
 80083c8:	3219      	adds	r2, #25
 80083ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80083ce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80083d2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80083f4 <scalbnf+0xe0>
 80083d6:	ee07 3a10 	vmov	s14, r3
 80083da:	e7c4      	b.n	8008366 <scalbnf+0x52>
 80083dc:	ffff3cb0 	.word	0xffff3cb0
 80083e0:	4c000000 	.word	0x4c000000
 80083e4:	7149f2ca 	.word	0x7149f2ca
 80083e8:	f149f2ca 	.word	0xf149f2ca
 80083ec:	0da24260 	.word	0x0da24260
 80083f0:	8da24260 	.word	0x8da24260
 80083f4:	33000000 	.word	0x33000000

080083f8 <_init>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr

08008404 <_fini>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr
